/**

 * 

 * V360	 

 * File: WidgetFacotry.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 *

 */


var WidgetManager = {

	widgetMap : new Object(),

	

	getWidget : function(widgetName){

		if(widgetName && this.widgetMap[widgetName])

		   return new this.widgetMap[widgetName]();

	},

	

	registerWidget : function(widgetName,widgetClass){

		if(widgetName)

			this.widgetMap[widgetName] = widgetClass;

	}

}/**

 * 

 * V360	 

 * File: validateEmail.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 * Revision History:

 * <<Date>>, <<Who>>, <<What>>

 * 12/03/2012, Tony Li, Initial version

 *

 */

    function checkEmail(emailStr) {

        if (emailStr.length == 0) {

            return true;

        }

        // TLD checking turned off by default

        var checkTLD=0;

        var knownDomsPat=/^(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum)$/;

        var emailPat=/^(.+)@(.+)$/;

        var specialChars="\\(\\)><@,;:\\\\\\\"\\.\\[\\]";

        var validChars="\[^\\s" + specialChars + "\]";

        var quotedUser="(\"[^\"]*\")";

        var ipDomainPat=/^\[(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\]$/;

        var atom=validChars + '+';

        var word="(" + atom + "|" + quotedUser + ")";

        var userPat=new RegExp("^" + word + "(\\." + word + ")*$");

        var domainPat=new RegExp("^" + atom + "(\\." + atom +")*$");

        var matchArray=emailStr.match(emailPat);

        if (matchArray==null) {

            return false;

        }

        var user=matchArray[1];

        var domain=matchArray[2];

        for (i=0; i<user.length; i++) {

            if (user.charCodeAt(i)>127) {

                return false;

            }

        }

        for (i=0; i<domain.length; i++) {

            if (domain.charCodeAt(i)>127) {

                return false;

            }

        }

        if (user.match(userPat)==null) {

            return false;

        }

        var IPArray=domain.match(ipDomainPat);

        if (IPArray!=null) {

            for (var i=1;i<=4;i++) {

                if (IPArray[i]>255) {

                    return false;

                }

            }

            return true;

        }

        var atomPat=new RegExp("^" + atom + "$");

        var domArr=domain.split(".");

        var len=domArr.length;

        for (i=0;i<len;i++) {

            if (domArr[i].search(atomPat)==-1) {

                return false;

            }

        }

        if (checkTLD && domArr[domArr.length-1].length!=2 && 

            domArr[domArr.length-1].search(knownDomsPat)==-1) {

            return false;

        }

        if (len<2) {

            return false;

        }

        return true;

    }av = {};

av.validation = {};

av.validation.Manager = function() {

    var allNames = [];

    var allValidators = [];

    this.attach = function(el) {

        if (el._attached)

            return;


        var validatorCfg = el.getAttribute("data-rule");

        if (!validatorCfg)

            return;

        var arrValidator = validatorCfg.split(";"), ruleStr;

        el.validators = [];

        for (var i = 0, cnt = arrValidator.length; i < cnt; i++) {

            ruleStr = arrValidator[i];

            if (!ruleStr)

                continue;

            var validator = this._parseValidator(ruleStr);

            if (validator) {

                el.validators.push(validator);

                var validateObj = validator.validator;

                if (validateObj.onAttach) {

                    validateObj.onAttach(el);

                }

            }

        }

        if (el.validators.length > 0) {

                       Ac360.attachEvent(el,"onblur", this.doBlur);

                       Ac360.attachEvent(el,"onkeypress", this.doKeypress);

                       Ac360.attachEvent(el,"onkeydown", function() {

                this.oldValue = this.value;

            });

        }

        el._attached = 1;

    };


    this._parseValidator = function(validatorStr) {

        var k = validatorStr.indexOf("("), name, params = null;

        if (k < 0)

            name = validatorStr;

        else {

            name = validatorStr.substring(0, k);

            params = validatorStr.substring(k + 1, validatorStr.length - 1);

            params = '[' + params + ']';

            params = window.eval(params);

        }

        var validator = this.getValidator(name);

        return {

            validator : validator,

            params : params

        };

    }


    this.validate = function(el) {

        var validator, errorMsg = null, currValidator, value;

        el = window.event.srcElement;

        for ( i = 0, cnt = el.validators.length; i < cnt; i++) {

            currValidator = el.validators[i];

            validator = currValidator.validator;

            if (validator.validateBlur) {

                if (trim)

                    value = trim(el.value);

                else if ($ && $.trim)

                    value = $.trim(el.value);


                errorMsg = validator.validateBlur(value, currValidator.params, el);

                if (errorMsg) {

                    break;

                }

            }

        }

    }

    var Z = this;


    this.doBlur = function(event) {

        Z.validate(this);

    };


    this.doKeypress = function(event) {


        var event = Ac360.getEvent(), keyCode = ('which' in event) ? event.which : event.keyCode, c = String.fromCharCode(keyCode), v = this.value + c, validator, el = this, rules = [];

        var srcElement = event.srcElement || event.target;

        for ( i = 0, cnt = srcElement.validators.length; i < cnt; i++) {

            validator = srcElement.validators[i].validator;

            if (validator.validateKeyPress) {

                rules.push(validator);

            }

        }

        window.setTimeout(function() {

            for (var i = 0, cnt = rules.length; i < cnt; i++) {

                var rule = rules[i];

                if (!rule.validateKeyPress(el.value, c)) {

                    el.value = el.oldValue;

                    return;

                }

            }

        }, 20);


        return true;

    };


    this.getValidator = function(name) {

        var k = Ac360.indexOfArray(allNames, name);

        return k >= 0 ? allValidators[k] : null;

    };


    this.reqister = function(name, validator) {

        allNames.push(name);

        allValidators.push(validator);

    };


    this.unregister = function(name) {

        var k = Ac360.indexOfArray(allNames, name);

        if (k >= 0) {

            allNames.splice(k, 1);

            allValidators.splice(k, 1);

        }

    };

};


av.validation.global = new av.validation.Manager();


/**

 * attach validation to element by customized attribute:valiator

 */

av.validation.attach = function() {

    var elArr = jQuery("[data-rule]"), el;


    for (var i = 0, cnt = elArr.length; i < cnt; i++) {

        el = elArr[i];

        av.validation.global.attach(el);

    }

};


av.validation.attachByElement = function(element) {

    av.validation.global.attach(element);

};


av.validation.attachById = function(id) {

    av.validation.global.attach(document.getElementById(id));

};


av.validation.checkValid = function(parentNode, checkAll) {

    var elArr = jQuery(parentNode).find("[data-rule]"), el, flag = true;

    if (checkAll === undefined)

        checkAll = true;

    for (var i = 0, cnt = elArr.length; i < cnt; i++) {

        el = elArr[i];

        if (!el._attached)

            av.validation.attachByElement(el);


        if (el.invalid === undefined)

            av.validation.global.validate(el);

        if (el.invalid) {

            flag = false;

            if (!checkAll)

                return flag

        }

    }

    return flag;

}


av.util = {};

av.util.checkregex = function(pattern, value) {

    if (!value || value.length == 0)

        return true;


    return pattern.test(value);

};


/***

 * All Validator

 */


av.validation.patterns = {};

av.validation.patterns.INT = /^-?[1-9][0-9]*$/;

av.validation.patterns.FLOAT = /^-?[1-9][0-9]*(\.[0-9]*)?$/;

av.validation.patterns.EMAIL = /^[a-zA-Z_0-9-'\+~]+(\.[a-zA-Z_0-9-'\+~]+)*@([a-zA-Z_0-9-]+\.)+[a-zA-Z]{2,7}$/;

av.validation.patterns.URL = /^((http|https|ftp|file)\:\/\/([a-zA-Z0-0]*:[a-zA-Z0-0]*(@))?[a-zA-Z0-9-\.]+(\.[a-zA-Z]{2,3})?(:[a-zA-Z0-9]*)?\/?([a-zA-Z0-9-\._\?\,\'\/\+&amp;%\$#\=~])*)|((mailto)\:[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,7})|((news)\:[a-zA-Z0-9\.]*)$/;

av.validation.patterns.TIME = /^((2?[0-3])|([0-1]?[0-9])):([0-5]?[0-9])(:[0-5]?[0-9])$/;

av.validation.patterns.SHORTTIME = /^((2?[0-3])|([0-1]?[0-9])):([0-5]?[0-9])$/;


/***

 * Required Validator

 */

av.validation.ReqiredValidator = function() {

    this.errorMessage = "Required!";


    this.validateBlur = function(value) {

        return value.length > 0 ? null : this.errorMessage;

    };

};

av.validation.global.reqister("required", new av.validation.ReqiredValidator());


/***

 * Int invalidator

 */

av.validation.IntValidator = function() {

    this.errorMessage = "Invalid integer!";


    this.validateBlur = function(value) {

        return av.util.checkregex(av.validation.patterns.INT, value) ? null : this.errorMessage;

    };


    this.validateKeyPress = function(value) {

        if (value == '-')

            return true;


        return av.util.checkregex(av.validation.patterns.INT, value);

    };

};

av.validation.global.reqister("int", new av.validation.IntValidator());


/***

 * Float invalidator

 */

av.validation.FloatValidator = function() {

    this.errorMessage = "Invalid float!";


    this.validateBlur = function(value) {

        return av.util.checkregex(av.validation.patterns.FLOAT, value) ? null : this.errorMessage;

    };


    this.validateKeyPress = function(value) {

        if (value == '-')

            return true;

        return av.util.checkregex(av.validation.patterns.FLOAT, value);

    };

};

av.validation.global.reqister("float", new av.validation.FloatValidator());


/***

 * Email Validator

 */

av.validation.EmailValidator = function() {

    this.errorMessage = "Invalid Email address!";


    this.validateBlur = function(value) {

        return av.util.checkregex(av.validation.patterns.EMAIL, value) ? null : this.errorMessage;

    };

};

av.validation.global.reqister("email", new av.validation.EmailValidator());


/***

 * Time Validator

 */

av.validation.TimeValidator = function() {

    this.errorMessage = "Invalid Time!";


    this.validateBlur = function(value) {

        return av.util.checkregex(av.validation.patterns.TIME, value) ? null : this.errorMessage;

    };

};

av.validation.global.reqister("time", new av.validation.TimeValidator());


/***

 * Time Validator

 */

av.validation.ShortTimeValidator = function() {

    this.errorMessage = "Invalid Time!";


    this.validateBlur = function(value) {

        return av.util.checkregex(av.validation.patterns.SHORTTIME, value) ? null : this.errorMessage;

    };

};

av.validation.global.reqister("shorttime", new av.validation.ShortTimeValidator());


/***

 * Time Validator

 */

av.validation.DateValidator = function() {

    this.errorMessage = "Invalid Date!";


    this.onAttach = function(el) {

        //		jQuery(el).datepicker(jQuery.datepicker.regional['']);

    }


    this.validateBlur = function(value, params, el) {

        checkDate(el, 1);

    };

};

av.validation.global.reqister("date", new av.validation.DateValidator());


av.validation.RangeValidator = function() {

    //	this.errorMessage = "Value range:{0} and {1}!";


    this.validateBlur = function(value, params) {

        if (!params)

            return true;

        var minValue = params[0];

        var maxValue = (params.length > 1) ? params[1] : null;

        if (minValue && typeof minValue == 'number' || maxValue && typeof maxValue == 'number') {

            value = parseFloat(value);

        }

        if (minValue && minValue.getDate !== undefined)

            value = new Date(value);


        var isLessMin = (minValue && value < minValue);

        var isMoreMax = (maxValue && value > maxValue);

        if (minValue && !maxValue && isLessMin)

            return "must more than: " + minValue;


        if (maxValue && !minValue && isMoreMax)

            return "Must less than: " + maxValue;


        if (isLessMin || isMoreMax) {

            if (minValue && minValue.getDate !== undefined) {

                minValue = minValue.toLocaleDateString();

                maxValue = maxValue.toLocaleDateString();

            }

            return "Range: [" + minValue + "] to [" + maxValue + "]";

        }

    };

};

av.validation.global.reqister("range", new av.validation.RangeValidator());

/**

 * 

 * V360	 

 * File: Util.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 * Revision History:

 * <<Date>>, <<Who>>, <<What>>

 * 15/01/2012, Ray Zhang, Initial version

 *

 */


Util = {

	//true - AR

	checkAr : function() {

		var p = self;

		var i = 0;

		if (typeof (p) == 'undefined') {

			return false;

		}


		while (p) {

			if (typeof (p.profile) != "undefined") {

				if (p.profile.language.toLowerCase().indexOf("ar") >= 0) {

					return true;

				} else {

					return false;

				}

			}

			p = p.parent;

			i++;

			if (i >= 10)

				break;


		}

		return false;

	},


	extend : function(subClass, superClass, o) {


		if (typeof superClass == "object") {

			this.apply(subClass.prototype, superClass);

			return;

		}


		var spp = superClass.prototype;

		var F = function() {

		};

		F.prototype = spp;

		subClass.prototype = new F();

		if (o) {

			this.apply(subClass.prototype, o);

		}

		subClass.prototype.constructor = subClass;

		//set super class

		subClass.prototype.superClass = superClass;


		return subClass;

	},


	//name space

	namespace : function() {

		var a = arguments, o = null, i, j, d, rt;

		for (i = 0; i < a.length; ++i) {

			d = a[i].split(".");

			rt = d[0];

			eval('if (typeof ' + rt + ' == "undefined"){' + rt + ' = {};} o = '

					+ rt + ';');

			for (j = 1; j < d.length; ++j) {

				o[d[j]] = o[d[j]] || {};

				o = o[d[j]];

			}

		}

	},


	applyIf : function(o, c) {

		if (o && c) {

			for ( var p in c) {

				if (typeof o[p] == "undefined") {

					o[p] = c[p];

				}

			}

		}

		return o;

	},


	apply : function(o, c) {

		if (o && c && typeof c == 'object') {

			for ( var p in c) {

				if (c[p])

					o[p] = c[p];

			}

		}

		return o;

	},


	increase : (function() {

		var id = 0;

		return function() {

			return id++;

		};

	})(),


	handleHref : function(aHref) {

		if (aHref.toUpperCase().trim().startsWith("JAVASCRIPT:")) {

			if (aHref.indexOf("?") > 0)

				aHref = aHref.substring(0, aHref.indexOf("?"));

		}

		return aHref;

	},

	

	specialLetters : "!@#$%^&*()_=+?<>?.,;'\"\\|[]",

	

	dealwithSpecialLetter: function(letters){

		var letter;

		var pattern;

		var arrays = new Array();

		for (var i = 0; i < letters.length; i++)

		{

			letter = letters.charAt(i);

			if (this.specialLetters.indexOf(letter) >= 0)

			{

				//pattern = new RegExp(letter, 'ig');

				letter = letter.replace(letter, "\\"+letter);

			}

			arrays.push(letter);

		}

		

		letters = arrays.join("");

		return letters;

	},

	

	/*

	 * word: should query word

	 * tag:  should search tag

	 * className: hight bright class

	 * scopeObj: Affect area.

	 * excludeExpress: exclude express, use for filter exclude element.

	 * */

	highLight : function(word, tag, className,scopeObj, excludeExpress) {


		word = word.trim();

		var isNum = false;

		if (!isNaN(parseInt(word)))

		{

			isNum = true;

		}

		if (word)

		{

			word = word.replace(/\\/g, "");

		}

		

		word = this.dealwithSpecialLetter(word);

		

		var express = new RegExp(word, 'ig');


		if(scopeObj){

			tag= scopeObj.getElementsByTagName(tag);

		}else{

		 tag= document.getElementsByTagName(tag);

		}

		//high bright style

		var replaceTo = function(sentence, data){

			for (var key in data)

			{

				sentence = sentence.replace(key, data[key]);

			}

			return sentence;

		};

		//the style between sentence

		var pattern = "<font class=\\\"" + className + "\\\"" +">([\\w\\s\\/\\#\\$\\%\\^\\&\\*\\(\\)\\_\\+\\|=\\?\\-\\!@'\":\\.\\,\\[\\]\\{\\}\\~\\`\\;]*)<\\/font>";

		var beforeRegular = new RegExp(pattern, "ig");

		//html patten

		var htmlPattern = /<[^>]*>/ig;

		var htmlSpecialPattern = "\\&[a-zA-Z]{1,10};";

		var htmlSpecialRegular = new RegExp(htmlSpecialPattern, 'ig');


		//rs: result which is found by regular. wasChange: Is the innerHTML change?

		var rs, wasChange;


		for ( var i = 0; i < tag.length; i++) {

			this.wasChange = false;

			var innerHTML = tag[i].innerHTML;

			var innerText = tag[i].innerText;

			var tmpHTML = innerHTML;


			//1. replace all before changed style

			while ((rs = beforeRegular.exec(innerHTML)) != null) {

				//alert(rs[0] + " :  " + rs[1] + " begin: "+rs.index + " lastIndex:  "+rs.lastIndex);

				tmpHTML = tmpHTML.replace(rs[0], rs[1]);

				this.wasChange = true;

			}


			innerHTML = tmpHTML;

            //filter exclude element.

            if (excludeExpress && excludeExpress.exec(innerHTML)) {

                continue;

            }

			//2. hight bright(except html gat content)

			if (word && innerText.trim()) {

				innerHTML = this.specialChar(innerText, innerHTML, word,

						replaceTo, htmlPattern, htmlSpecialRegular, express, className, isNum);

			}


			//3. if the innerHTML was change ant 1&2 step, we must reset the html.

			if (this.wasChange) {

				tag[i].innerHTML = innerHTML;

			}

		}

		

		this.wasChange = null;

	},


	specialChar : function(innerText, innerHtml, word, replaceTo, htmlPattern,

			htmlSpecialRegular, express, className, isNum) {

		var rs, tmpHtml = innerHtml, i = 0, content, tmpSentence, result;

		//replaceAll("\\&[a-zA-Z]{1,10};", "").replaceAll("<[^>]*>", "").replaceAll("[(/>)<]", "");   

		var array = innerHtml.split(htmlPattern);

		var contentArray, wordObject, shuldReplace, tmp, key;


		

		//1. split from html code(<...></..>)

		for ( var j = 0; j < array.length; j++) {

			content = array[j];

			if (!content) {

				continue;

			}

			//2.split form special html(&...;)

			contentArray = content.split(htmlSpecialRegular);

			for ( var z = 0; z < contentArray.length; z++) {

				shuldReplace = false;

				var index = 0;

				rs = contentArray[z];

				tmp = rs;

				wordObject = {};

				var replaceIndex = 0;

				while ((result = express.exec(rs)) != null) {

					shuldReplace = true;

				}

				

				if (shuldReplace)

				{

					var pattern = "<font class='" + className + "'>";

					var regStr = "(" + pattern + ")" + word + "</font>|" + "(\\&[a-zA-Z]{1,10};)|<[a-zA-Z\/]+[^<>]*" +word+ "[^<]*>|<" + word+"[^<>]*>|" + word;

					var reg = new RegExp(regStr, "ig");

					tmpHtml = tmpHtml.replace(reg, function(matchWord){

						return Util.handleMatchedCharacters(matchWord,className,pattern,reg);

					});

					this.wasChange = true;

				}

			}

		}

		

		return tmpHtml;

	},


	/*

	 * handle the characters that match the regex,

	 * special handle the "<font class='" + className + "'>", &,<a>

	 */

	handleMatchedCharacters : function(matchWord, className, pattern, reg) 

	{

		if (matchWord.search("&") != -1 || matchWord.search(pattern) != -1 || matchWord.search("<[a-zA-Z\/]+[^<>]*>") != -1) 

		{

			return matchWord;

		}

		else 

		{

			return "<font class='" + className + "'>" + matchWord + "</font>";

		}

	},


	

	/**

	* Find the nearest parent node which tag name is same to the specific tag name

	*/

	findParentNodeByTag : function(srcObj, tagName, maxLevel){

		var p = srcObj;

		var count = 0;

		var maxLevelVal = maxLevel || 5;

		while (p) 

		{

			p = p.parentNode;

			count++;

			if (p.tagName == tagName || count == maxLevelVal) 

			{

				break;

			}

		}

		return p;

	},

	

	/**

	 * remove dom node

	 */

	removeNode : function(id)

	{

		var node = document.getElementById(id);

		if (node.parentNode) {   

			node.parentNode.removeChild(node); 

		}

	}

}


Function.prototype.bind = function() {

	var a = arguments;

	var __method = this;

	var args = null;

	var object = a[0];


	if (a.length > 1) {

		args = Array.prototype.slice.call(arguments, 1);

	} else {

		if (typeof object != "object") {

			object = window;

			args = Array.prototype.slice.call(arguments, 0);

		}

	}


	return function() {

		return __method.apply(object, args || arguments);

	}

};


String.prototype.startsWith = function(str) {

	return (this.match("^" + str) == str)

};


String.prototype.trim = function() {

	return (this.replace(/^[\s\xA0]+/, "").replace(/[\s\xA0]+$/, ""));

};

/**

 * 

 * V360	 

 * File: Observable.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 * Revision History:

 * <<Date>>, <<Who>>, <<What>>

 * 15/01/2012, Ray Zhang, Initial version

 *

 */


UI.Observable = function(){};


UI.Observable.prototype = {

	addObserver : function(eventName, fn, scope, o)

	{

		eventName = eventName.toLowerCase();

		var ce = this.events[eventName] || true;

		if (typeof ce == 'boolean') {

			this.events[eventName] = new UI.EventMgr(this, eventName);

		}

		this.events[eventName].addListener(fn, scope, typeof o == 'object' ? o : {});

	},

	

	addListener : function(eventName, fn, scope, o)

	{

		this.addObserver(eventName, fn, scope, o);

	},

	

	deleteObserver : function(eventName, fn, scope)

	{

		var ce = this.events[eventName.toLowerCase()];

		if (typeof ce == 'object') {

			ce.removeListener(fn, scope);

		}

	},

	

	clearObservers : function(eventName, fn, scope)

	{

		var ce = this.events[eventName.toLowerCase()];

		if (typeof ce == 'object') {

			ce.clearListener(fn, scope);

		}

	},

	

	hasObserver : function(eventName)

	{

		var ce = this.events[eventName.toLowerCase()];

		return typeof ce == 'object' && ce.listeners.length > 0;

	},

	

	fireEvent : function()

	{

		var a = Array.prototype.slice.call(arguments, 0),

			ename = a[0].toLowerCase(),

			ret = true,

			ce = this.events[ename];


		

		if(typeof ce == 'object') {

			a.shift();

			ret = ce.fire.apply(ce, a);

		}

		return ret;

	},


	addEvents : function(o){

		this.events = this.events || {};

		if (typeof o == 'string') {

			var a = arguments,

				i = a.length;

			while(i--) {

				this.events[a[i]] = this.events[a[i]] || true;

			}

		}

	}

};



UI.EventMgr = function(scope, eventName){

	this.scope = scope;

	this.eventName = eventName;

	this.listeners = [];

}


UI.EventMgr.prototype = {

	addListener : function(fn, scope, options){

	    var l;

	    scope = scope || this.scope;

	    if(!this.isListening(fn, scope)){

	        l = this.createListener(fn, scope, options);

	        this.listeners.push(l);

	    }

	},

	

	createListener: function(fn, scope, options){

		var o = o || {}, scope = scope || this.obj;

        return {

            fn: fn,

            scope: scope,

            options: o

        }

	},

	

	findListener : function(fn, scope){

        var list = this.listeners,

            i = list.length,

            l;


        scope = scope || this.obj;

        while(i--){

            l = list[i];

            if(l){

                if(l.fn == fn && l.scope == scope){

                    return i;

                }

            }

        }

        return -1;

    },


    isListening : function(fn, scope){

        return this.findListener(fn, scope) != -1;

    },

    

    removeListener : function(fn, scope){

        var index,	ret = false;

        if((index = this.findListener(fn, scope)) != -1){

            me.listeners.splice(index, 1);

            ret = true;

        }

        return ret;

    },

    

    clearListener : function(){

    	 var listeners = this.listeners, i = listeners.length;

    	 while(i--) {

    		 this.removeListener(listeners[i].fn, listeners[i].scope);

    	 }

    },

    

    fire : function(){

        var listeners = this.listeners,

            len = listeners.length,

            i = len -1,

            rs = true,

            listener;


        if(len > 0){

            var args = Array.prototype.slice.call(arguments, 0);

            for (; i >= 0; i--) 

            {

            	listener = listeners[i];

            	if (listener)

            	{

            		rs = listener.fn.apply(listener.scope || this.obj || window, args);

            	}

            }

        }


        return rs;//only return first function

    }

}


/**

 * 

 * V360	 

 * File: Component.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * usage:

 * UI.V360Button = new UI.Component();

 * Util.extend(UI.V360Button, {.......});

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 * Revision History:

 * <<Date>>, <<Who>>, <<What>>

 * 15/01/2012, Ray Zhang, Initial version

 * 

 * */


UI.Component = function() {

	var _class = function(config){

		this.config = config || {};

		

		this.init.call(this, this.config);

	}

	_class = Util.extend(_class, UI.Component);

	_class.extend = function(object)

	{

		if (typeof object != "object")

			return;

		//we can inject some property in here.

		Util.extend(this, object);

	}

	return _class;

};


Util.extend(UI.Component, UI.Observable, {

	

	idPrevious : "component-",

	

	getId : function(){

		if(this.id)

			return this.id;

		return this.idPrevious + Util.increase(); 

	},

	

	/*

	 *Convert events object to HTML format events. 

	 */

	eventsToHTML : function(eventMap,supportEvents){

		var eventBuilder = new Array();

		for(var eventName in eventMap){

			var eventNameLC = eventName.toLowerCase();

			if(Ac360.indexOfArray(supportEvents,eventNameLC)>-1 && eventMap[eventName]){

				eventBuilder.push(" on");

				eventBuilder.push(eventNameLC);

				eventBuilder.push("='");

				eventBuilder.push(eventMap[eventName]);

				eventBuilder.push("'");

			}

		}

		return eventBuilder.join("");

	},

	

	/*

	 * Bind events to target object.

	 */

	bindEvents : function(target,eventMap,supportEvents){

		for(var eventName in eventMap){

			var eventNameLC = eventName.toLowerCase();

			if(Ac360.indexOfArray(supportEvents,eventNameLC)>-1 && eventMap[eventName]){

				BaseJS.addEventHandler(target,eventNameLC,new Function(eventMap[eventName]));

			}

		}

	},

	

	parseWidth : function(style){

		var widthPtn = /width\s*:\s*(\d+)/gi;

		var matches = widthPtn.exec(style);

		if(matches){

			return parseInt(matches[1]);

		}

		return 0;

	},

	

	//1. should re-write

	init : function(config){

		alert("init");

	},

	

	//2. re-write

	render : function(){},

	

	//3. re-write

	addDefaultEvent : function(){},

	

	/*

	 * If the parameter data is not specified, the outerHTML of a default instance of this component will be returned.  

	 * @param data: data to initialize this component.

	 */

	getOuterHTML : function(data){},

	

	/*

	 * @param sibling: DOM object with the same type as this component. 

	 */

	parseSiblingValue : function(sibling){},

	

	getHtml : function(){},

	

	keyCode : {up : 38,	down : 40,	right : 39,	left : 37,	enter : 13, tab : 9},

	

	jsToHtml : function(str){

	    return str.replace(/'/g, "\\'");

	},

	

	environment : {webPath : ""},

	

	//invoke in ElementSupport.encodeElemAttribute

	needToEncode : 'true'

});

/**

 * 

 * V360	 

 * File: FormLayout.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<Common form layout for Ac360>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.ElementSupport = function(){

}


UI.ElementSupport.prototype = {

		/*

	 * Cache the widget instance to avoid create it many times.

	 */

	widgetCache : new Object(),

	/*

	 * Some elements are not implemented in pure HTML format, we have to add them to group table after group table has been rendered.

	 * The container id of these elements will be used as the key of this map, and the corresponding java script component instance is 

	 * this map's value.

	 */

	delayAppendMap : new Object(),

	

	getWidget  :  function(type){

		if(!this.widgetCache[type]){

			this.widgetCache[type] = WidgetManager.getWidget(type);

			this.widgetCache[type].getOuterHTMLWrapper = function(data){

						if(!data.id){

							data.id = this.idPrevious + Ac360.increase();

						}

						return this.getOuterHTML(data);

					};

		}

		return this.widgetCache[type];

	},

	

	renderDelayedElem : function(){

		for(var delayId in this.delayAppendMap){

			this.delayAppendMap[delayId].render();

		}

		this.delayAppendMap = null;

	},

	

	generateHTMLElement : function(htmlElementHead,htmlElementData,containerId){

		var cellBuilder = new Array();

		var data = htmlElementData;

		data.eventMap = data.eventDefine;

		data.containId = containerId;

		data.items = data.items || htmlElementHead.items;

		

		var widget = this.getWidget(htmlElementHead.elementType);

		

		data = this.encodeElemAttribute(data, widget);

		

		var elemContent = widget.getOuterHTMLWrapper(data);

		

		if(elemContent==undefined){

			var widget = WidgetManager.getWidget(htmlElementHead.elementType);

			widget.init(data);

			this.delayAppendMap[containerId]= widget;

		}else if(typeof elemContent == "string"){

			cellBuilder.push(elemContent);

		}

	

		var content = cellBuilder.join("");

		if (Ac360.validator.isEmpty(content))

		  content = "&nbsp;";

		

		return content;

	},

	

	//encode all the property.

	encodeElemAttribute : function(elemData, widget){

		if(!elemData){

			return elemData;

		}

		for(var item in elemData){

			if(typeof elemData[item] == "string" && item!="text"){

				elemData[item]= BaseJS.htmlEncode(elemData[item]);

			}else if(typeof elemData[item] == "string" && item=="text" && widget.needToEncode == 'true'){

                var htmlEncode = elemData.htmlEncode;

                var text = elemData[item];

                if(!Ac360.validator.isEmpty(text))

                {

                    if (Ac360.validator.isEmpty(htmlEncode) || "true" != htmlEncode)

                    {

                        elemData[item] = BaseJS.htmlEncode(text);

                    }

                }

            } else if (typeof elemData[item] == "string" && item == "text" && widget.encode)

			{

				var text = elemData[item];

				if (!Ac360.validator.isEmpty(text))

				{

					elemData[item] = widget.encode(text);

				}

			}

			

		}

		var eventMap = elemData['eventMap'] ||{};

		for(var eventName in eventMap){

			if(typeof eventMap[eventName] == "string"){

				eventMap[eventName] = BaseJS.htmlEncode(eventMap[eventName]);

			}

		}

		return elemData;

	}

};


/**

 * 

 * V360	 

 * File: DropMenu.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 * Revision History:

 * <<Date>>, <<Who>>, <<What>>

 * 15/01/2012, Ray Zhang, Initial version

 *

 */


//var menu = new UI.DropMenu([{text: aa, url:.., click:}, {text: }]);


UI.DropMenu = new UI.Component();

UI.DropMenu.extend({

	

	idPrevious : "dropMenu-",

	

	items: null,

	

	selectIndex : -1,

	

	//drop menu show status. when isShow = true, show drop menu.

	isShow : false,

	

	//drop menu parent object, it is a menu item.

	parentMenuItemObj : null,

	

	timeoutId: null,

	

	//1. [{text: '111', click: function(){}, children: [{text: '222', click: function(){}}]}, {text: '333', click: function(){}]

	init : function(config){


		if(Ac360.validator.isEmpty(config) || config == "null")

		{

			return;

		}

		

		this.items = new Array();

		

		if (typeof(config) == "string")

		{

			config = BaseJS.strToJson(config);

		}

		

		//generator menu item

		for (var i =0; i < config.length; i++){

			this.createItem(config[i]);

		};


		//only super those event

		this.addEvents("onshow", "showed", "close", "hidden", "mouseenter", "mouseleave", "keydown", "up", "down", "left", "right", "blur");


	},

	

	//2.render

	render : function(srcId){

		if(Ac360.validator.isEmpty(this.items))

		{

			return;

		}

		

		var contain = document.createElement('div');

		contain.className = "dropMenueDiv";

		contain.id = this.getId();	

		this.menuId = contain.id;

		this.contain = contain;

		contain.style.display = "none";

		

		var tab = document.createElement('a');

		tab.id = this.getId();

		tab.href = "#";

		tab.tabIndex = "-1";

		tab.onclick = "return false;";

		contain.appendChild(tab);

		

		var ul = document.createElement('ul');

		

		for (var i = 0; i < this.items.length; i++)

		{

			var li = document.createElement('li');

			li.appendChild(this.items[i].getMenuItem());

			ul.appendChild(li);

		}

		contain.appendChild(ul);

	

		//insert as body first node

		var firstChild = document.body.firstChild;

		this.parentNode = document.body;

		document.body.insertBefore(contain, firstChild);

		

		this.addDefaultEvent();

	},


	//3.

	addDefaultEvent : function()

	{

		this.contain["onmouseenter"]  = this.onmouseEnter.bind(this);

		this.contain["onmouseleave"]  = this.onmouseLeave.bind(this);

		this.contain["onkeydown"]  = this.onkeyDown.bind(this);

		this.contain["onblur"]  = this.onblur.bind(this);

		this.addListener("showed", function(){

			try{

				var parent_frame = document.frames.frameElement;

				if(scrollBarIssue.judgeIsObj(parent_frame))

				{

					var ignore_ = parent_frame.getAttribute("ignore");

					if(!scrollBarIssue.judgeIsNull(ignore_)){					

						if(parent_frame.popUpAddIgnore){

							parent_frame.removeAttribute("ignore");

						}

					}

				}

			}catch(e){}

		});

	},


	onmouseEnter : function()

	{

		this.fireEvent("mouseenter");

		

		//set parent menu item selected style

		this.setSelectedMenuStyle(true);

		

		//set drop menu and parent drop menu isShow status.

		this.isShow = true;

		if(this.timeoutId)

		{

			clearTimeout(this.timeoutId);

			this.timeoutId = null;

		}

		this.evtPropagation(this, true);

	},

	

	onmouseLeave : function()

	{

		this.fireEvent("mouseleave");

		

		this.isShow = false;

		this.hiddenMenu();

		this.evtPropagation(this, false);

	},

	

	//set parent menu item selected style.  flag: true,  parent menu selected.

	setSelectedMenuStyle : function(flag)

	{

		if(this.parentMenuItemObj && this.parentMenuItemObj.onbackColor)

		{

			if(flag)

			{

				this.parentMenuItemObj.onbackColor();

			} else {

				this.parentMenuItemObj.lostbackColor();

			}

		}

	},

	

	//hidden current drop menu when mouse out.

	hiddenMenu : function()

	{

		if (!this.timeoutFn)

    	{

    		this.timeoutFn = function(){

    			if(this.contain && !this.isShow)

    			{

    				this.contain.style.display = "none";

    				

    				//set parent menu item selected style

    				this.setSelectedMenuStyle(false);

    			}

    		}.bind(this);

    	}

		

		clearTimeout(this.timeoutId);

		this.timeoutId  = setTimeout(this.timeoutFn, 100);

	},

	

	/**

	 * event propagation, loop hidden parent drop menu.

	 * obj: DropMenu Object.  flag: true/false.  isImmediatelyHidden: true/false

	 */

	evtPropagation : function(obj, flag, isImmediatelyHidden)

	{

		//obj.parentMenuItemObj is a menu item object. obj.parentMenuItemObj.parentDropMenuObj is a drop menu object.

		if(obj && obj.parentMenuItemObj && obj.parentMenuItemObj.parentDropMenuObj)

		{

			var parentDropMenuObj = obj.parentMenuItemObj.parentDropMenuObj;

			parentDropMenuObj.isShow = flag;

			if(!flag && parentDropMenuObj.hiddenMenu)

			{

				if(isImmediatelyHidden)

				{

					parentDropMenuObj.contain.style.display = "none";

				} else {

					parentDropMenuObj.hiddenMenu();

				}

			}

			

			this.evtPropagation(parentDropMenuObj, flag, isImmediatelyHidden);

		}

		else

		{

			// bind drop menu to element

			if (obj && obj.bindMenu)

			{

				obj.bindMenu.isShow = flag;

				if (!flag)

				{

					obj.bindMenu.onmouseLeave();

				}	

			}

		}

	},


	onkeyDown : function()

	{

		switch(event.keyCode)

		{

			case this.keyCode.up:

				this.up();

			break;

			case this.keyCode.down:

				this.down();

			break;

			case this.keyCode.left:

				this.left();

			break;

			case this.keyCode.right:

				this.right();

			break;

			case this.keyCode.tab:

				this.tab();

			break;

		}

		this.fireEvent("keydown");

	},

	

	onblur : function()

	{

	    

		this.fireEvent("blur");

	},

	

	up : function()

	{

		// hidden sub menu

		this.keyboardHiddenChild();

		

		this.selectIndex -= 1;

		if (this.selectIndex <= -1)

		{

			this.selectIndex = this.items.length - 1;

		}

		if(!this.items[this.selectIndex].menuItem.isDisabled)

		{

			this.items[this.selectIndex].menuItem.focus();

			// show sub menu

			this.keyboardShowChild();


		}

	},

	

	down : function(){

		// hidden sub menu

		this.keyboardHiddenChild();


		if (this.selectIndex == this.items.length - 1)

		{

			this.selectIndex = 0;

		}

		else

		{

			this.selectIndex += 1;

		}

		if(!this.items[this.selectIndex].menuItem.isDisabled)

		{	

			this.items[this.selectIndex].menuItem.focus();

			// show sub menu

			this.keyboardShowChild();

		}

	},

	

	left : function()

	{

		// enter parent menu

		if (this.items && this.items[0] && this.items[0].parentDropMenuObj && this.items[0].parentDropMenuObj.parentMenuItemObj)

		{

			this.items[0].parentDropMenuObj.parentMenuItemObj.menuItem.focus();

		}

	},

	

	right : function()

	{

		// enter sub menu

		if (this.selectIndex > -1 && this.items[this.selectIndex].children)

		{

			if (this.items[this.selectIndex].children)

			{

				this.items[this.selectIndex].childrenMenu.items[0].menuItem.focus();

				this.items[this.selectIndex].childrenMenu.selectIndex = 0;

			}

		}	

	},

	

	tab : function()

	{

		// hidden sub menu

		this.keyboardHiddenChild();

		

		this.selectIndex += 1;

		if (this.selectIndex >= this.items.length)//lost focus, must set focus in drop menu button

		{

			this.onblur();

			this.hidden();

			this.selectIndex = -1;	

		}

		else

		{

			// show sub menu

			this.keyboardShowChild();

		}

	},

	

	// hidden sub menu

	keyboardHiddenChild : function()

	{

		if (this.selectIndex > -1 && this.items[this.selectIndex].children)

		{

			this.items[this.selectIndex].hiddenChild();

		}

	},

	

	// show sub menu

	keyboardShowChild : function()

	{

		if (this.items[this.selectIndex].children)

		{

			this.items[this.selectIndex].showChild();

		}

	},

	

	//create Item

	createItem : function(obj){

		var menuitem = new UI.MenuItem(obj);

		//set parent object point, parent object is current drop menu object.

		menuitem.parentDropMenuObj = this;

		this.addItem(menuitem);	

	},

	

	//must MunuItem object

	addItem : function(menuItem){

		menuItem.addListener("click", function(){

			this.hidden();

			var menuItem = arguments[0];

			if (menuItem && menuItem.childrenMenu)

			{

				menuItem.childrenMenu.hidden();

			}

		}.bind(this, menuItem));

		this.items.push(menuItem);

	},

	

	clearItem : function ()

	{

		this.items.splice(0, this.items.length);

		this.parentNode.removeChild(document.getElementById(this.menuId));

	},

	

	getItems : function(){

		return this.items;

	},

	

	getLength : function(){

		if (this.items)

		{

			return this.items.length;

		}

		else

		{

			return 0;

		}

	},

	

	hidden : function(stopEvtPropagationFlag){

		if (this.menuId){

			document.getElementById(this.menuId).style.display = 'none';

			

			// if stopEvtPropagationFlag value is true, don't propagation event

			if (!stopEvtPropagationFlag)

			{

				//hidden sub menu item.

				this.evtPropagation(this, false, true);

			}
			
			scrollBarIssue.autoResizePopUpContainer(document,this.menuId);

		}

	},

	

	getShow : function()

	{

		if (this.menuId)

		{

			if(document.getElementById(this.menuId).style.display == 'none')

			{

				return false;

			}

			else

			{

				return true;

			}

		}

		else

		{

			return false;

		}

	},

	

	//let current input/text/textArea element loose focus. Because of that curse will through pop-up DIV.

	looseFocus : function(){

		var focuseEleBeforeShow;

		

		//sometime, document doesn't loader complete, below will throw exception

		try{

			focuseEleBeforeShow = document.activeElement;

		}catch(e)

		{

			

		}

		

		if(focuseEleBeforeShow && ((focuseEleBeforeShow.nodeName == "INPUT" && focuseEleBeforeShow.type == "text") || focuseEleBeforeShow.nodeName == "TEXTAREA")){

			focuseEleBeforeShow.blur();

		}

	},

	

	show : function(srcId)

	{


	    if(!this.items || !this.items.length)

                  return;


		this.looseFocus();

		

		if (!this.menuId)

		{

			this.render(srcId);

		}

		this.fireEvent("onshow");

		this.isShow = true;


		//whether show children menu item

		var isShowChildMenu = false;

		var childMenuId = null;

		if(srcId.indexOf("menuItem-") == 0)

		{

			isShowChildMenu = true;

			childMenuId = this.menuId;

		}

		UI.positionMgr.show(srcId, this.menuId, {isMenu: true, isShowChildMenu: isShowChildMenu, childMenuId: childMenuId});

		

		//set default menu width
		var menu = document.getElementById(this.menuId);

		var button = document.getElementById(srcId);

		if (menu.style.display != "none" && menu.offsetWidth < button.offsetWidth && !isShowChildMenu)

		{

			//ar position left

			if(UI.Base.checkAr() && !isNaN(parseInt(menu.style.left)))

			{

				menu.style.left = parseInt(menu.style.left) - (button.offsetWidth - menu.offsetWidth) + "px";

			}

			

			menu.style.width = button.offsetWidth +"px";

		}

		

		this.fireEvent("showed");

		this.selectIndex = -1;

	},

	

	//dynamic retrieve data for drop menu item

	setStoreUrl : function(storeUrl)

	{

		this.storeUrl = storeUrl;

	},

	

	setBindMenu : function(bindMenu)

	{

		this.bindMenu = bindMenu;

	}

	

});


//galen-zhang:

//configObj: json object.    {dropMenuStr: dropMenuStr, targetId: id, targetMouseOverFn: mouseOverFn, targetMouseOutFn: mouseOutFn, disableMouseEvent: false}

UI.DropMenu.bind = function(configObj)

{

	if (!configObj.dropMenuStr)

	{

		return;

	}

	configObj.dropMenu = new UI.DropMenu(configObj.dropMenuStr); 

	

	function bindMenu(configObj) {

		this.menu = configObj.dropMenu;

		this.targetId = configObj.targetId;

		this.isShow = false;

		this.targetMouseOverFn = configObj.targetMouseOverFn || this.emptyFn;

		this.targetMouseOutFn = configObj.targetMouseOutFn || this.emptyFn;

		this.menu.setBindMenu(this);

		

		this.onkeyDown = function()

		{

			switch(event.keyCode)

			{

				case 13: // Enter

					this.targetMouseOverFn();

					break;

				case 40: // Down

					this.down();

					break;

			}

		};

		

		this.onmouseLeave = function ()

	    {

	    	if (!this.timeoutFn)

	    	{

	    		this.timeoutFn = function(){

	    			if (!this.isShow && this.menu)

	    			{

	    				this.menu.hidden(true);

	    				this.targetMouseOutFn();

	    			}

	    		}.bind(this);

	    	}

	    	

	    	this.timeout = setTimeout(this.timeoutFn, 100);

	    };

	    

	    this.onmouseEnter = function()

		{

			if (this.timeout){

				clearTimeout(this.timeout);

			}


			if (this.menu)

			{

				// show dorp menu, when mouse move drop menu to element, don't hidden drop menu

				if (!this.menu.getShow())

				{

					this.menu.show(this.targetId);

				}

				else

				{

					this.menu.isShow = true;

				}

				this.targetMouseOverFn();

			}

			return false;

	    };

	    

	    this.down = function()

	    {

	    	if (!this.menu.getShow())

	    	{

	    		this.onmouseEnter();

	    	}

	    	this.menu.down();

	    };

	    

	    this.emptyFn = function()

	    {};

	};

    

    var bindMethod = new bindMenu(configObj);

    var targetObj = document.getElementById(configObj.targetId);

    targetObj.onclick = bindMethod.onmouseEnter.bind(bindMethod);

    targetObj.onkeydown = bindMethod.onkeyDown.bind(bindMethod);

    if (!configObj.disableMouseEvent)

    {

	    targetObj.onmouseenter = bindMethod.onmouseEnter.bind(bindMethod);

	    targetObj.onmouseleave = bindMethod.onmouseLeave.bind(bindMethod);

    }

    

    configObj = null;

};


/**

 * 

 * V360	 

 * File: menuItem.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 * Revision History:

 * <<Date>>, <<Who>>, <<What>>

 * 15/01/2012, Ray Zhang, Initial version

 *

 */


UI.MenuItem = new UI.Component();

//{text: a, css: c1, events:{click:fn1, mouseover: fn2...}}

UI.MenuItem.extend({

	

	idPrevious : "menuItem-",

	

	onSelect : false,

	

	timeoutId: null,

	

	//{text:...,css:..., click:..}

	

	init : function(config)

	{

		this.text = config.text || "";

		this.css = config.css || "";

		var clickFn = config.click;

		this.id = config.id || this.getId();

		this.target = config.target || "";

		this.children = config.childrens || "";

		this.selected = config.selected || false;

		this.hasSelectStatus = config.hasSelectStatus || false;

		this.isGrayout = config.isGrayout || false;

		if (config.url)

		{

			this.setHref(config.url);

		}

		//only super those event

		this.addEvents("click", "mouseover", "mouseout", "focus", "blur");

		if (clickFn)

		{

			if (typeof(clickFn) == "string")

			{

				if (clickFn.indexOf("return") == 0)

				{

					clickFn = clickFn.replaceAll("return", "");

				}

				var clickFn = function(){

					eval(arguments[0]);

				}.bind(clickFn);

			}

			this.addObserver("click", clickFn);

		}

		

	},

	

	render : function()

	{

		var menuItem = document.createElement('a');

		if(this.isGrayout)

			menuItem.disabled = true;


		if (this.href && this.href != "#")

		{

			menuItem.href = this.href = Util.handleHref(this.href);

			menuItem.target = this.target;

		}

		else

		{

			menuItem.href = "javascript:void(0);";

		}


		menuItem.className = 'portlet-menu-item';

		menuItem.id = this.id;

		menuItem.unselectable = "on";

		menuItem.innerHTML = "&nbsp;<span id='"+this.getId()+"'>"+this.addCheckContent()+this.text+"</span>&nbsp;&nbsp;&nbsp;&nbsp;";

		if (!this.isGrayout)

			this.addDefaultEvent(menuItem);

		this.menuItem = menuItem;

		return menuItem;

	},

	

	//href is first

	addDefaultEvent : function(menuItem)

	{

		menuItem["onclick"] = this.onclick.bind(this);

		menuItem["onmouseover"] = this.onmouseover.bind(this);

		menuItem["onmouseout"] = this.onmouseout.bind(this);

		menuItem["onfocus"] = this.onfocus.bind(this);

		menuItem["onblur"] = this.onblur.bind(this);

		menuItem["onmouseenter"] = this.onmouseenter.bind(this);

		menuItem["onmouseleave"] = this.onmouseleave.bind(this);

	},

	

	/**

	 * add menu item checked style

	 */

	addCheckContent : function()

	{

		var itemPrefix = "";

		if(this.hasSelectStatus){

			itemPrefix ="&nbsp;&nbsp;&nbsp;";

		}

		if(this.selected)

		{

			itemPrefix= "<span class='menuitem-checkedtype-selected'>&nbsp;&nbsp;</span>&nbsp;";

		}

		return itemPrefix;

	},

	

	onclick : function()

	{

		this.fireEvent("click");

	},

	

	onmouseout : function()

	{

		this.lostbackColor();

		this.fireEvent("mouseover");

	},

	

	onmouseover : function()

	{

		this.onbackColor();

		this.fireEvent("mouseout");		

	},


	onmouseenter : function(){

		this.showChild();

	},

	

	onmouseleave : function(){

		this.hiddenChild();

	},

	

	hiddenChild : function(){

		

		if (!this.childrenMenu)

			return;

		

		this.childrenMenu.isShow = false;

		

		//when mouse out menu item, hidden this menu item child drop menu.

		if (!this.timeoutFn)

    	{

    		this.timeoutFn = function(){

    			if(this.childrenMenu)

    			{

    				if(this.childrenMenu.contain && !this.childrenMenu.isShow)

    				{

    					this.childrenMenu.contain.style.display = "none";

    				}

    			}

    		}.bind(this);

    	}

		

		clearTimeout(this.timeoutId);

		this.timeoutId  = setTimeout(this.timeoutFn, 100);

	},

	

	showChild : function(){

		if (!this.children)

			return;

		

		if (!this.childrenMenu)

		{

			this.childrenMenu = new UI.DropMenu(this.children);

			this.onbackColor();

		}


		//childrenMenu is a drop menu object.

		if (this.childrenMenu)

		{

			this.childrenMenu.show(this.id);

			//set parent object point, parent object is current menu item object.

			this.childrenMenu.parentMenuItemObj = this;

		}

	},

	

	onbackColor : function()

	{

		

		if(this.childrenMenu)

		{

			this.menuItem.className = "portlet-menu-item menuitem-hasclildren-selected";
			//to check if section 508 is open 
			if(profile.isEnabled508){
				this.menuItem.title = this.menuItem.text+getTextlable("genericview.genericviewform.expand.label");
			}
			
		} else {

			this.menuItem.className = "portlet-menu-item menuitem-selected";

		}

	},

	

	lostbackColor : function()

	{

		this.menuItem.className = "portlet-menu-item menuitem-notselected";

	},

	

	onfocus : function()

	{

		this.onbackColor();

		this.fireEvent("focus");

	},

	

	onblur : function()

	{

		this.lostbackColor();

		this.fireEvent("blur");

	},

	

	setText : function(text)

	{

		this.text = text;

	},

	

	setCss: function(css)

	{

		this.css = css;

	},

	

	setDisable : function(isDisable)

	{

		this.menuItem.disable = isDisable;

	},

	

	setHref : function(href)

	{

		if (!href || "null" == href)

		{

			href = "javascript:void(0);";

		}

		this.href = href;

	},

	

	setTarget : function(target){

		this.target = target;

	},

	

	getMenuItem : function()

	{

		if (!this.menuItem)

		{

			return this.render();

		}

		return this.menuItem;

	}

});

/**

 * 

 * V360 File: BaseInput.js

 * 

 * Accela, Inc. Copyright (C): 2012-2014

 * 

 * Description: <<General description of the class>>

 * 

 * Notes: <<Specific programming notes>>

 * 

 * Revision History: <<Date>>, <<Who>>, <<What>> 25/4/2012, Ray Zhang,

 * Initial version

 * 

 */


UI.BaseInput = new UI.Component();


UI.BaseInput.extend( {


	idPrevious : "baseinput-",


	init : function(config) {

		this.id = config.id || this.getId();

		this.name = config.name || this.getId();

		this.disabled = config.disabled || false;

		this.accessKey = config.accessKey || "";

		this.style = config.style || "";

		this.tabIndex = config.tabIndex;

		this.title = config.title || "";

		this.className = config.className || "";

		this.containId = config.containId;

		this.eventMap = config.eventMap||{};

		this.supportEvents = config.supportEvents || [ "change", "click" ];

		this.initInput(config);

	},

	

	initInput : function(){

	},

	

	customizeInput : function(input){

		return input;

	},

	

	customizeHTML : function(data){

		return data;

	},

	

	render : function() {

		var input = document.createElement('input');

		input.id = this.id;

		input.name = this.name;

		if (this.title) {

			input.title = this.title;

		}

		if (this.style) {

			input.style = this.style;

		}

		if (this.accessKey) {

			input.accessKey = this.accessKey;

		}

		if (this.tabIndex) {

			input.tabIndex = this.tabIndex;

		}

		if (this.disabled) {

			input.disabled = this.disabled;

		}

		if (this.className) {

			input.className = this.className;

		}

		this.customizeInput(input);

		this.bindEvents(input, this.eventMap, this.supportEvents);

		var contain = document.getElementById(this.containId);

		contain.appendChild(input);

	},


	getOuterHTML : function(data) {

		var initData = data || {};

		var id = initData.id || this.id;

		var name = initData.name || id;

		var disabled = initData.disabled || this.disabled;

		var className = initData.className || this.className;

		var title = initData.title || this.title;

		var accesskey = initData.accesskey || this.accesskey;

		var style = initData.style || this.style;

		var tabIndex = initData.tabIndex || this.tabIndex;

		var eventMap = initData.eventMap || this.eventMap;

		var supportEvents = initData.supportEvents || this.supportEvents;

		var content = new Array();

		content.push("<input id='");

		content.push(id);

		content.push("' name='");

		content.push(name);

		if (className) {

			content.push("' class='");

			content.push(className);

		}

		if (title) {

			content.push("' title='");

			content.push(title);

		}

		if (accesskey) {

			content.push("' accesskey='");

			content.push(accesskey);

		}

		if (style) {

			content.push("' style='");

			content.push(style);

		}

		if (tabIndex) {

			content.push("' tabIndex='");

			content.push(tabIndex);

		}

		content.push("'");

		if (disabled) {

			content.push(" disabled='disabled'");

		}

		content.push(" ");

		content.push(this.customizeHTML(data));

		content.push(" ");

		content.push(this.eventsToHTML(eventMap,supportEvents));

		content.push("/>");

       	content.push(this.extraHTML(data));

		return content.join("");

	},


    extraHTML : function(data)

    {

      return "";  

    },


	addDefaultEvent : function() {


	}


});

/**

 * 

 * V360  

 * File: Button.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 * Revision History:

 * <<Date>>, <<Who>>, <<What>>

 * 15/01/2012, Ray Zhang, Initial version

 *

 */



UI.Button = new UI.Component();


Util.extend(UI.Button, UI.BaseInput, {


	idPrevious : "button-",


	initInput : function(config) {

		this.value = config.value || "";

		this.supportEvents = config.supportEvents || [ "click" ];

	},


	customizeInput : function(input) {

		input.type = 'button';

		if (this.value) {

			input.value = this.value;

		}

		return input;

	},


	customizeHTML : function(data) {

		var initData = data || {};

		var value = initData.value || this.value;

		var content = new Array();

		content.push("type='button'");

		if (value) {

			content.push(" value='");

			content.push(value);

			content.push("'");

		}

		return content.join("");

	},


	parseSiblingValue : function(sibling) {

		return sibling.value;

	},


	addDefaultEvent : function() {


	},

	

	createNewStyleButton : function()

    {

		
        var leftDiv = document.createElement("DIV");

        leftDiv.id = this.getImgId();

        leftDiv.style.cssText= "width: auto";
        

        var rightDiv = document.createElement("DIV");

        rightDiv.id = this.getId();
        
        rightDiv.style.cssText= "width: auto";


        var midDiv = document.createElement("DIV");

        midDiv.id = this.getId();
        
        midDiv.style.cssText= "width: auto";

        midDiv.innerHTML = "<font class='portlet-menu-item'>" + this.text + "</font>";

        

        rightDiv.appendChild(midDiv);

        leftDiv.appendChild(rightDiv);


        this.left = leftDiv;

        this.right = rightDiv;

        this.mid = midDiv;

        this.createWrap().appendChild(leftDiv);

    },

    

    createWrap : function()

    {

        var aHref = document.createElement('a');

        aHref.id = this.getHrefId();

        aHref.style.textDecoration  = "none";

        if (this.href)

            this.href = Util.handleHref(this.href);

        aHref.href = this.href || "javascript:void(0);";

        aHref.target = this.target || "";

        aHref.accesskey = this.accesskey || "";

        if(this.circle)

        {

        	aHref.circle = this.circle;

        }

        this.aHref = aHref;

        var contain = document.getElementById(this.containId);

        contain.appendChild(aHref);

        

        this.addDefaultSubmit(aHref);

        

        this.addDefaultEvent();

        this.resetButtonStyle();

        return aHref;

    },

    

    //add default submit img

    addDefaultSubmit : function(aHref)

    {

        if (this.isImgButton && this.isImgButton == "true")

        {

            var imgButton = document.createElement("input");

            imgButton.type = "image";
            
            imgButton.tabIndex = "-1";

            imgButton.style.width = "0px";

            imgButton.style.height = "0px";

            imgButton.style.border = "none";

            aHref.appendChild(imgButton);

            imgButton["onclick"] = function(){return false;};

            //sHtml += '<input onclick="return false;" type="image" src="" alt="" style="width:0px; height:0px; border:none" tabindex="-1"/>';

        }

    },

    

    //old style button

    createOldStyleButton : function()

    {

        //var sHtml = "<img style='border:0px;' src='" + this.img + "' name='" + this.name + "' id='"+ this.imgId +"' alert = '" + this.tip + "'/>";

        var img = document.createElement("img");

        img.src = this.img;

        img.name = this.getImgId();

        img.id = this.getImgId();

        img.alt = this.tip;

        img.title = this.tip;

        img.style.border = "0px";

        

        this.image = img;

        

        var wrap = this.createWrap();

        wrap.appendChild(img);

        if (this.displayText && this.displayText != "false")

        {   var font = document.createElement("font");

            font.className = "portlet-menu-item";

            font.innerHTML = "&nbsp;"+this.text;

            wrap.appendChild(font);

            //sHtml += "&nbsp;<font class='portlet-menu-item'><label>" + this.text + "</label></font>"

        }

    },

    

    //tradition button

    createTraditionButton : function()

    {

        var sHtml = "<input type='button' id='"+this.id+"' value='"+this.text+"'/>";

        this.createWrap().innerHTML = sHtml;

    },

    

    updateImg : function(imgSrc)

    {

        //only use old UI

        if (imgSrc)

        {

            //handle menu bar copy

            var event = this.event;

            if (event)

            {

                var src = event.srcElement;

                var childNodes = src.children;

                for (var i = 0; i < childNodes.length; i++)

                {

                    var node = childNodes[i]

                    if (node.tagName.toLowerCase() == "img")

                    {

                        var img = node;

                        break;

                    }

                }

            }

            

            if (!img)

            {

                var img = this.image;

            }

            

            if (img)

            {

                img.src = imgSrc;

            }

        }

    }


});


WidgetManager.registerWidget("button",UI.Button);

/**

 * 

 * V360	 

 * File: DropMenuButton.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 * Revision History:

 * <<Date>>, <<Who>>, <<What>>

 * 15/01/2012, Ray Zhang, Initial version

 *

 */


UI.DropMenuButton = new UI.Component();


Util.extend(UI.DropMenuButton, UI.Button, {

	

	idPrevious : "dropdownbutton-",

	

	isShow : false,

	

	getHrefId : function()

	{

		return this.id;

	},

	

	getImgId : function()

	{

		return this.imgId;

	},

	

	//1	

	init : function(config)

	{

		this.text = config.text;

		this.containId = config.containId;

		this.imgId = config.imgId || this.getId();

		this.name = config.name || this.getId();

		this.img = config.img || "N/C";

		this.swapImg = config.swapImg || "";

		this.tip = config.tip || "";

		this.id = config.id || this.getId();

		this.displayText = config.displayText || true;

		this.addEvents("mouseenter", "mouseleave", "keydown", "blur");

	},

	//2

	render : function()

	{

		this.createNewStyleButton();

		//default render, not postpone render

		if (this.menu)

			this.menu.render(this.aHref.id);

	},

	//3

	addDefaultEvent : function(menuButton)

	{

		this.aHref["onmouseenter"] = this.onmouseEnter.bind(this);

		this.aHref["onmouseleave"] = this.onmouseLeave.bind(this);

		this.aHref["onkeydown"] = this.onkeydown.bind(this);

		this.aHref["onblur"] = this.onblur.bind(this);

	}, 

	

	onmouseEnter : function()

	{

		if (!this.storeUrl)

			this.mouseEnter();

		else

			this.refreshMenuItem();

		this.fireEvent("mouseenter");

	},

	

	onmouseLeave : function()

	{

		this.mouseLeave();

		this.fireEvent("mouseLeave");

	},

	

	mouseEnter : function()

	{

		if (this.timeout){

			clearTimeout(this.timeout);

		}

		this.left.className = "menu-left-hover";

		this.mid.className = "menu-middle-hover";

		this.right.className = "menu-right-hover";

		this.mid.firstChild.className= "portlet-menu-item-hover";


		if (this.menu)

		{

			this.menu.hidden();

			this.menu.show(this.aHref.id);

		}

		this.aHref.style.cursor = "hand";

		return false;

    },

    

    /*

     * return data format:{menu:[{text:.., itemOnClickStr: ...,itemAccessKey:..}], menuName:..}

     * more: AttachedGISAction.doRetrieveMenuItems

     * */

    refreshMenuItem : function()

    {

    	remoteAccess(this.storeUrl, this.handleResponseData.bind(this));

    },

    

    handleResponseData : function(data)

    {

    	var responseMsg = BaseJS.strToJson(data);

		var menu = responseMsg.menu;

		menu = BaseJS.strToJson(menu);

		var menuItem;

		if (this.menu){

			this.menu.clearItem();

			this.menu = null;

		}

		for(var i = 0; i < menu.length; i++)

		{

			menuItem = BaseJS.strToJson(menu[i]);

			var item = new UI.MenuItem({text:menuItem.text, click: menuItem.itemOnClickStr});

			this.addItem(item);

		}

		this.show();

    },

    

    resetButtonStyle : function()

    {

		this.left.className = "menu-left-normal";

		this.mid.className = "menu-middle-normal";

		this.right.className = "menu-right-normal";

		this.mid.firstChild.className= "portlet-menu-item";

    },

    

    mouseLeave : function ()

    {

    	if (!this.timeoutFn)

    	{

    		this.timeoutFn = function(){

    			if (this.menu)

    				this.menu.hidden();

    			this.resetButtonStyle();

    		}.bind(this);

    	}

    	

    	//deal with mouse move to drop menu event

    	//because when mouse leave button, the menu will hidden

    	this.timeout = setTimeout(this.timeoutFn, 100);

    },

    

    onblur : function()

    {

    	if (this.isShow)

    		return;

    	this.mouseLeave();

    },

    

    onfocus : function()

    {

    	this.isShow = false;

    	this.aHref.focus();

    },

    

    onkeydown : function()

    {

    	switch(event.keyCode)

    	{

    		case this.keyCode.enter:

    			this.mouseEnter();

    			break;

    		case this.keyCode.up:

    			this.up();

    			break;

    		case this.keyCode.down:

    			this.down();

    			break;

    	}

		this.fireEvent("keydown");

    },


    up : function()

    {

    	if (!this.menu.getShow())

    	{

    		this.mouseEnter();

    	}

    	this.isShow = true;

    	this.menu.up();

    },

    

    down : function()

    {

    	if (!this.menu.getShow())

    	{

    		this.mouseEnter();

    	}

    	this.isShow = true;

    	this.menu.down();

    },

    

	setText : function(text)

	{

		this.text = text;

	},

	

	setId : function(id)

	{

		this.id = id || this.getId();

	},

	

	setImg : function(img)

	{

		this.img = img;

	},

	

	setSwapImg : function(swapImg){

		this.swapImg = swapImg;

	},

	

	setContainId : function(containId)

	{

		this.containId = containId;

	},

	

	setTip : function(tip)

	{

		this.setTip(tip);

	},

	

	setName : function(name)

	{

		this.name = name;

	},

	

	setMenu : function(menu)

	{

		this.menu = menu;

	},

	

	addItem : function(menuItem)

	{

		if (!this.menu)

		{

			this.menu = new UI.DropMenu();

			var mouseEnter = function(){

				if (this.timeout)

					clearTimeout(this.timeout);

			};

			var mouseLeave = function(){

				this.mouseLeave();

			};

			//when menu item lost focus, change this.isSow state

			var blur = function(){

				this.onfocus();

			};

			

			this.menu.addListener("mouseenter", mouseEnter, this);

			this.menu.addListener("mouseleave", mouseLeave, this);

			this.menu.addListener("blur", blur, this);//listen focus exist drop menu

		}

		this.menu.addItem(menuItem);

	},

		

	show : function()

	{

		this.mouseEnter();

	},

	

	//dynamic retrieve data for drop menu item

	setStoreUrl : function(storeUrl)

	{

		this.storeUrl = storeUrl;

	}

});

/**

 * 

 * V360	 

 * File: menuButton.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 * Revision History:

 * <<Date>>, <<Who>>, <<What>>

 * 25/10/2010, Ray Li, Initial version

 *

 */


UI.V360Button = new UI.Component();


Util.extend(UI.V360Button, UI.Button, {

	

	idPrevious : "button-",

	

	getHrefId : function()

	{

		if (this.isImgButton == "true")

			return this.id; 

		return "a_"+this.id;

	},


	getImgId : function()

	{

		return this.imgId;

	},


	init: function(config) {

		this.text = config.text;

		this.containId = config.containId;

		this.imgId = config.imgId || this.getId();

		this.name = config.name || this.getId();

		this.img = config.img;

		this.tip = config.tip || "";

		this.target = config.target || "";

		this.href = config.href || "javascript:void(0);";

		this.swapImg = config.swapImg || "";

		this.id = config.id || this.getId();

		this.displayText = config.displayText || true;

		this.accesskey = config.accesskey || "";

		this.isImgButton = config.isImgButton || "false";

		this.addEvents("mouseenter", "mouseleave", "keydown", "click");

		this.supportEvents = config.supportEvents || [ "click" ];

		this.circle = config.circle;

	},

	

	render : function(){

		this.createNewStyleButton();

	},

	

    getOuterHTML : function(data) {

        var initData = data || {};

        var id = initData.id || this.id;

        var name = initData.name || id;

        var disabled = initData.disabled || this.disabled;

        var className = initData.className || this.className;

        var title = initData.title || this.title;

        var accesskey = initData.accesskey || this.accesskey;

        var style = initData.style || this.style;

        var tabIndex = initData.tabIndex || this.tabIndex;

        var eventMap = initData.eventMap || this.eventMap;

        var supportEvents = initData.supportEvents || this.supportEvents;

        var value = initData.value || this.value;


        var content = new Array();

        var leftDiv = document.createElement("DIV");

        leftDiv.id = this.getId();

    

        var rightDiv = document.createElement("DIV");

        rightDiv.id = this.getId();


        var midDiv = document.createElement("DIV");

        midDiv.id = this.getId();

        midDiv.innerHTML = "<font class='portlet-menu-item'>" + value + "</font>";

    

        rightDiv.appendChild(midDiv);

        leftDiv.appendChild(rightDiv);


        this.left = leftDiv;

        this.right = rightDiv;

        this.mid = midDiv;


        leftDiv.className = "menu-left-normal-button";

        midDiv.className = "menu-middle-normal-button";

        rightDiv.className = "menu-right-normal-button";

        content.push('<A style="CURSOR: hand; TEXT-DECORATION: none" id=');

        content.push(id);

        content.push(' href="#" ');

        content.push(this.eventsToHTML(eventMap, supportEvents));

        content.push(' onmouseenter=enterNewStyleButton();');

        content.push(' onmouseleave=leaveNewStyleButton();');

        content.push('>');

        content.push(leftDiv.outerHTML);

        content.push('</A>');

         

         return content.join("");

    },

	

	//3

	addDefaultEvent : function(menuButton)

	{

		Ac360.attachEvent(this.aHref,"onmouseenter", this.onmouseEnter.bind(this));

		Ac360.attachEvent(this.aHref,"onmouseleave", this.onmouseLeave.bind(this));

		Ac360.attachEvent(this.aHref,"onclick", this.onclick.bind(this));

		Ac360.attachEvent(this.aHref,"onkeydown", this.onkeydown.bind(this));

	}, 

	

	onmouseEnter : function()

	{

		this.event = Ac360.getEvent();

		this.mouseEnter();

		this.fireEvent("mouseenter", this.event);

		this.event = null;

	},

	

	onmouseLeave : function()

	{

		this.event = Ac360.getEvent();

		this.mouseLeave();
		
		this.fireEvent("mouseLeave", this.event);

		this.event = null;

	},

	

	mouseEnter : function()

	{

		//handle menu bar copy

		var event = this.event;

		if (event)

			var src = event.srcElement;

		

		if (src && src.tagName && src.tagName.toLowerCase() == "a")

		{

			if (src.firstChild.tagName.toLowerCase() == "input")

			{

				src.childNodes[1].className += " menu-left-hover-button";

				src.childNodes[1].firstChild.className += " menu-right-hover-button";

				src.childNodes[1].firstChild.firstChild.className += " menu-middle-hover-button";

				src.childNodes[1].firstChild.firstChild.firstChild.className += " portlet-menu-item-hover";					

			}

			else

			{

				src.firstChild.className += " menu-left-hover-button";

				src.firstChild.firstChild.className += " menu-right-hover-button";

				src.firstChild.firstChild.firstChild.className += " menu-middle-hover-button";

				src.firstChild.firstChild.firstChild.firstChild.className += " portlet-menu-item-hover";					

			}

		}

		else

		{

			this.left.className += " menu-left-hover-button";

			this.mid.className += " menu-middle-hover-button";

			this.right.className += " menu-right-hover-button";

			this.mid.firstChild.className= "portlet-menu-item-hover";

		}

		

		this.aHref.style.cursor = "hand";

		

		return false;

    },

    

    onclick : function()

    {   

    	//destroy body event

    	UI.positionMgr.destroyEven2Body();

    	if (this.disabled)

    		return;

    	return this.fireEvent("click");

    },

    

    onkeydown : function()

    {

    	this.fireEvent("keydown");

    },

    

    resetButtonStyle : function()

    {

		//handle menu bar copy    		

		var event = this.event;

		if (event)

			var src = event.srcElement;

		

		if (src && src.tagName && src.tagName.toLowerCase() == "a")

		{

			var src = event.srcElement;

			if (src.firstChild.tagName.toLowerCase() == "input")

			{

				src.childNodes[1].className = "menu-left-normal-button";

				src.childNodes[1].firstChild.className = "menu-right-normal-button";

				src.childNodes[1].firstChild.firstChild.className = "menu-middle-normal-button";

				src.childNodes[1].firstChild.firstChild.firstChild.className = "portlet-menu-item";

			}

			else

			{

				src.firstChild.className = "menu-left-normal-button";

				src.firstChild.firstChild.className = "menu-right-normal-button";

				src.firstChild.firstChild.firstChild.className = "menu-middle-normal-button";

				src.firstChild.firstChild.firstChild.firstChild.className = "portlet-menu-item";

			}

			

		}

		else

		{

			this.left.className = "menu-left-normal-button";

			this.mid.className = "menu-middle-normal-button";

			this.right.className = "menu-right-normal-button";

			this.mid.firstChild.className= "portlet-menu-item";

		}

    },

    

    mouseLeave : function ()

    {

    	this.resetButtonStyle();

    },

	

	setImg : function(img)

	{

		this.img = img;

	},

	

	setHref : function(href)

	{

		this.href = href;

	},

	

	setSwapImg : function(swapImg)

	{

		this.swapImg = swapImg;

	},

	

	enable : function(){

		this.disabled = false;

		this.aHref.disabled = false;

	},

	

	disable : function(){

		this.disabled = true;

		this.aHref.disabled = true;

	}

});


WidgetManager.registerWidget("button", UI.V360Button);




function enterNewStyleButton()

{

    //handle menu bar copy

    var event = this.event;

    if (event)

        var src = event.srcElement;

    

    if (src && src.tagName && src.tagName.toLowerCase() == "a")

    {

        if (src.firstChild.tagName.toLowerCase() == "input")

        {

            src.childNodes[1].className += " menu-left-hover-button";

            src.childNodes[1].firstChild.className += " menu-right-hover-button";

            src.childNodes[1].firstChild.firstChild.className += " menu-middle-hover-button";

            src.childNodes[1].firstChild.firstChild.firstChild.className += " portlet-menu-item-hover";                 

        }

        else

        {

            src.firstChild.className += " menu-left-hover-button";

            src.firstChild.firstChild.className += " menu-right-hover-button";

            src.firstChild.firstChild.firstChild.className += " menu-middle-hover-button";

            src.firstChild.firstChild.firstChild.firstChild.className += " portlet-menu-item-hover";                    

        }

    }

};


function leaveNewStyleButton()

{

    //handle menu bar copy          

    var event = this.event;

    if (event)

        var src = event.srcElement;

    

    if (src && src.tagName && src.tagName.toLowerCase() == "a")

    {

        var src = event.srcElement;

        if (src.firstChild.tagName.toLowerCase() == "input")

        {

            src.childNodes[1].className = "menu-left-normal-button";

            src.childNodes[1].firstChild.className = "menu-right-normal-button";

            src.childNodes[1].firstChild.firstChild.className = "menu-middle-normal-button";

            src.childNodes[1].firstChild.firstChild.firstChild.className = "portlet-menu-item";

        }

        else

        {

            src.firstChild.className = "menu-left-normal-button";

            src.firstChild.firstChild.className = "menu-right-normal-button";

            src.firstChild.firstChild.firstChild.className = "menu-middle-normal-button";

            src.firstChild.firstChild.firstChild.firstChild.className = "portlet-menu-item";

        }

    }

}


/**

 * 

 * V360	 

 * File: Checkbox.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 * Revision History:

 * <<Date>>, <<Who>>, <<What>>

 * 25/4/2012, Ray Zhang, Initial version

 *

 */


UI.Checkbox = new UI.Component();


Util.extend(UI.Checkbox, UI.BaseInput, {

	

	idPrevious : "checkbox-",

	

	initInput : function(config){

		this.value = config.value || "";

		this.checked = config.checked || false;

	},

	

	customizeInput : function(){

		input.type = 'checkbox';

		if(this.value){

			input.value = this.value;

		}

		if(this.checked){

			input.checked = this.checked;

		}

		return input;

	},

	

    customizeHTML : function(data) {

        var initData = data || {};

        var checked = initData.checked || initData.value == 'Y' || this.checked ||  this.value == 'Y' ;

        var value = initData.value || this.value;

        var id = initData.id || this.id;

        var name = initData.name || id;

        var content = new Array();

        content.push(" type='checkbox'");

        if (checked) {

            content.push(" checked='checked'");

            if (!value) {

                content.push(" value='Y'");

            } else {

                content.push(" value='");

                content.push(value);

                content.push("'");

            }

        } else {

            if (!value) {

                content.push(" value='N'");

            } else {

                content.push(" value='");

                content.push(value);

                content.push("'");

            }

        }

        

        return content.join("");

    },

	

	extraHTML : function(data){

	    var initData = data || {};

	    var id = initData.id || this.id;

        var name = initData.name || id;

        var value = initData.value || this.value;

        return '<input type="hidden" value="'+value+'"  name="'+name+'_hiddenCheckbox" id="'+id+'_hiddenCheckbox" />';

	},

	

	parseSiblingValue : function(sibling){

		return sibling.value;

	},

	

	addDefaultEvent : function(){

		

	}

	

});



UI.Checkbox.updateCheckboxHiddenValue= function()

{

    var target = event.target || event.srcElement; 

    Ac360.query(target.id+'_hiddenCheckbox').value=target.checked?'Y':'N';

};



WidgetManager.registerWidget("checkbox",UI.Checkbox);

WidgetManager.registerWidget("multiple_select",UI.Checkbox);

/**

 * 

 * V360 File: Label.js

 * 

 * Accela, Inc. Copyright (C): 2012-2014

 * 

 * Description: <<General description of the class>>

 * 

 * Notes: <<Specific programming notes>>

 * 

 * 

 */


UI.Label = new UI.Component();


UI.Label.extend( {


	idPrevious : "label-",


	init : function(config) {

		this.id = config.id || this.getId();

		this.name = config.name || this.getId();

		this.text = config.text || "";

		this.accessKey = config.accessKey || "";

		this.className = config.className || "";

		this.htmlFor = config.htmlFor || "";

		this.style = config.style || "";

		this.tabIndex = config.tabIndex || "";

		this.title = config.title || "";

		this.containId = config.containId;

	},


	render : function() {

		var label = document.createElement('label');

		label.name = this.name;

		label.id = this.id;

		if (this.htmlFor) {

			label.htmlFor = this.htmlFor;

		}

		if (this.style) {

			label.style = this.style;

		}

		if (this.tabIndex) {

			label.tabIndex = this.tabIndex;

		}

		if (this.title) {

			label.title = this.title;

		}

		if (this.className) {

			label.className = this.className;

		}

		if (this.accessKey) {

			label.accessKey = this.accessKey;

		}

		if (this.text) {

			label.innerHTML = this.text;

		}

		var container = document.getElementById(this.containId);

		container.appendChild(label);

	},


	getOuterHTML : function(data) {

		var initData = data || {};

		var text = initData.text || "";

		var id = initData.id || this.id;

		var name = initData.name || id;

		var htmlFor = initData.htmlFor || this.htmlFor;

		var accessKey = initData.accessKey || this.accessKey;

		var title = initData.title || this.title;

		var tabIndex = initData.tabIndex || this.tabIndex;

		var className = initData.className || this.className;

		var style = initData.style || this.style;

		var content = new Array();

		content.push("<label id='");

		content.push(id);

		content.push("' name='");

		content.push(name);

		if (htmlFor) {

			content.push("' for='");

			content.push(htmlFor);

		}

		if (accessKey) {

			content.push("' accessKey='");

			content.push(accessKey);

		}

		if (title) {

			content.push("' title='");

			content.push(title);

		}

		if (tabIndex) {

			content.push("' tabIndex='");

			content.push(tabIndex);

		}

		if (className) {

			content.push("' class='");

			content.push(className);

		}

		if (style) {

			content.push("' style='");

			content.push(style);

		}

		content.push("'>");

		content.push(text);

		content.push("</label>");

		return content.join("");

	},


	parseSiblingValue : function(sibling) {

		return sibling.innerHTML;

	},


	addDefaultEvent : function() {


	}


});

WidgetManager.registerWidget("label",UI.Label);

/**

 * 

 * V360	 

 * File: Table.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<Common table for Ac360>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.Table = new UI.Component();

UI.Table.extend(UI.ElementSupport.prototype);

UI.Table.extend({

	


	idPrevious : "table-",

	

	init : function(config){

		/*

		 * The following are configuration parameters for table.

		 */


		this.id = config.id || this.getId();

		this.name = config.name || this.getId();

		this.className = config.className || "AccelaMainTable";

		this.headerData = config.tableHead || {};//Column definition data.

		this.bodyData = config.tableBody || {};//Cell data. 

		this.environment.webPath = "/"+config.webPath || "";

		this.pageInfo = config.page;//Paging information for table.

		this.readOnly = typeof config.readOnly=="undefined"?true:config.readOnly;//Table can be edit or not.

		this.messages = config.messages || {};

		this.onSelect = config.onSelect || "";

		/*

		 * The following are instance parameters.

		 */

		this.selectedRows = new Array();//Collection of IDs for those rows which are selected.

		this.highLightedRow = null;

		this.deletedRowData = new Array();//Collection to store the deleted data which should be committed later.

		this.width=0; //Table width.

		this.selectColWidth = 22;//Width for select column.

		this.toolBarId = this.idPrevious +"toolBar-"+Ac360.increase();

		this.hasSelectCol = this.existSelectCol();

		this.selectAllFunc = null;//Function to be invoked while click on table header's check box.

		/*

		 * Initializing method. 

		 */

		this.adjustColWidth();

	},

	

	existSelectCol : function(){

		if(this.headerData && this.headerData.length

				&& this.headerData[0].htmlElementHeads.length

				&& (this.headerData[0].htmlElementHeads[0].elementType == "multiple_select" 

					|| this.headerData[0].htmlElementHeads[0].elementType == "single_select"))

			return true;

		return false;

	},

	

	selectAllHandle : function(srcObj){

		try{

			if(!this.selectAllFunc){

				this.selectAllFunc = new Function(this.onSelect).bind(srcObj);

			}

			this.selectAllFunc();

		}catch(e){

			

		}

	},

	

	getToolBar : function(){

		var newBtnId = this.idPrevious+"new-"+Ac360.increase();

		var delBtnId = this.idPrevious+"del-"+Ac360.increase();

		var toolBarBuilder = new Array();

		toolBarBuilder.push("<div class=\"ui-table-toolbar\" vAlign=center id=\"");

		toolBarBuilder.push(this.toolBarId);

		toolBarBuilder.push("\"><img onclick=\"UI.Table.insert()\" alt=Add src=\"/portlets/images/sky_blue/menu/edit_button.gif\" id=\"");

		toolBarBuilder.push(newBtnId);

		toolBarBuilder.push("\"><FONT class=\"portlet-menu-item\">&nbsp;Add&nbsp;&nbsp;</FONT>");

		toolBarBuilder.push("<img onclick=\"UI.Table.remove()\" alt=Delete src=\"/portlets/images/sky_blue/menu/delete_button.gif\" id=\"");

		toolBarBuilder.push(delBtnId);

		toolBarBuilder.push("\"><FONT class=\"portlet-menu-item\">&nbsp;Delete&nbsp;&nbsp;</FONT></div>");

		return toolBarBuilder.join("");

	},

	

	adjustColWidth : function(){

		if(this.hasSelectCol){

			this.headerData[0].width = this.selectColWidth;

		}

		for(var i=this.hasSelectCol?1:0;i<this.headerData.length;i++){

			var colWidth = this.headerData[i].width || 100;

			this.headerData[i].width = colWidth;

			this.width+=colWidth;

		}

		if(this.width<600 && this.headerData.length>0){

			var toAdjustHeader = this.headerData[this.headerData.length-1];

			toAdjustHeader.width = 600-this.width+toAdjustHeader.width;

		}

	},

	

	getRowId : function(){

       return this.idPrevious+"row-"+this.increase();

    },

    

    increase : (function(){

       var id = 1;

       return function(){return id++;};

    })(),


	

	/*

	 * Build the table header for select column if it exists.

	 */

	getSelectColHeader : function(){

		var colHeaderBuilder = new Array();

		if(this.hasSelectCol){

			colHeaderBuilder.push("<th width=\"");

			colHeaderBuilder.push(this.headerData[0].width);

			colHeaderBuilder.push("\" class=\"portlet-section-subheader-checkbox AlignL\" title=\"");

			colHeaderBuilder.push(this.headerData[0].tip);

			colHeaderBuilder.push("\" nowrap vAlign=\"top\">");

			if(this.headerData[0].htmlElementHeads[0].elementType == "multiple_select"){

				var eventMap = new Object();

				eventMap.click = "UI.Table.selectAll();"; 

				var selectConfig = {id:"ac360_list_id",

						eventMap: eventMap,

						title:this.messages['document.role.list.all']};

				colHeaderBuilder.push(this.getWidget(this.headerData[0].htmlElementHeads[0].elementType).getOuterHTMLWrapper(selectConfig));

			}

			colHeaderBuilder.push("</th>");

		}else if(this.hasSelectCol){

			colHeaderBuilder.push("<th width=\"22\" class=\"portlet-section-subheader-checkbox\"></th>");

		}

		return colHeaderBuilder.join("");

	},

	

	/*

	 * Build the cells contained in select column.

	 */

	getSelectColCell : function(cells){

		var cellBuilder = new Array();

		if(this.hasSelectCol){

			cellBuilder.push("<td class='AlignL-td-border'>");

			var htmlElementHeads = this.headerData[0].htmlElementHeads;

			for(var i=0; i< htmlElementHeads.length; i++){

				if(htmlElementHeads[i].elementType=="multiple_select" || htmlElementHeads[i].elementType =="single_select"){

					var eventMap = cells[0].htmlElements[i].eventDefine || {};

					var disabled = cells[0].htmlElements[i].disabled;

					var clickFunStr = eventMap.click||"";

					eventMap.click = "UI.Table.select();"+clickFunStr;

					var config = cells[0].htmlElements[0];

					var selectConfig = {id : "ac360_list_id",

							title : this.messages['menubar.common.select.label'],

							disabled : disabled,

							eventMap : eventMap,

							name : cells[0].htmlElements[0].name,

							value : BaseJS.htmlEncode(cells[0].htmlElements[0].value)||""};

							

					selectConfig = Util.applyIf(selectConfig, config);

						

					cellBuilder.push(this.getWidget(htmlElementHeads[i].elementType).getOuterHTMLWrapper(selectConfig));

				}

			}

			cellBuilder.push("</td>");

		}

		return cellBuilder.join("");

	},

	

	generateHeadLink : function(sortLink)

	{

	    return sortLink;

	},


    getOrderMessage : function(messages)

    {

        return messages['error.js.pageHeader.sort'];

    },

	

	getDescOrderMessage : function(messages)

    {

        return messages['error.js.pageHeader.sortAscending'];

    },

    

	

	getOrderStyle : function(sortLink)

	{

	    if (sortLink.indexOf("order=true")>0)

	    {

	        return "order_down";

	    }

	    else

	    {

	        return "order_up";

	    }

	},

	

	getTableHeader : function(){

		var headerBuilder = new Array();

		headerBuilder.push("<table class=\"");

		headerBuilder.push(this.className);

		headerBuilder.push("\" id=\"");

		headerBuilder.push(this.id);

		headerBuilder.push("\" name=\"");

		headerBuilder.push(this.name);

		headerBuilder.push("\"><thead><tr width=\"600\">");

		headerBuilder.push(this.getSelectColHeader());

		for(var i=this.hasSelectCol?1:0;i<this.headerData.length;i++){

			var sortLink = this.headerData[i].sortLink;

			headerBuilder.push("<th width=\"");

			headerBuilder.push(this.headerData[i].width);

			if (this.headerData[i].id)

			{

				headerBuilder.push("\" id=\"");

				headerBuilder.push(this.headerData[i].id);

			}

			headerBuilder.push("\" class=\"");

			headerBuilder.push(this.getTableHeaderCss());

			headerBuilder.push("\" title=\"");

			headerBuilder.push(this.headerData[i].tip);

			headerBuilder.push("\" nowrap vAlign=\"top\">");

			if(sortLink){

				headerBuilder.push("<a href=\"");

				headerBuilder.push(this.generateHeadLink(sortLink));

				if(sortLink.indexOf("order=true")>0){

					headerBuilder.push("\" class=\"");

				    headerBuilder.push(this.getOrderStyle(this.generateHeadLink(sortLink)));

				    headerBuilder.push("\" title=\"");

					headerBuilder.push(this.getOrderMessage(this.messages));

				}

				else if(sortLink.indexOf("order=false")>0){

                    headerBuilder.push("\" class=\"");

                    headerBuilder.push(this.getOrderStyle(this.generateHeadLink(sortLink)));

                    headerBuilder.push("\" title=\"");

					headerBuilder.push(this.getDescOrderMessage(this.messages));

				}

				headerBuilder.push("\" target=\"_self\">");

				headerBuilder.push(this.headerData[i].label);

				headerBuilder.push("</a>");

			}else{

				headerBuilder.push(this.getTableHeaderLabel(this.headerData[i].label));

			}

			headerBuilder.push("</th>");

		}

		headerBuilder.push("<th class=\"" + this.getTableHeaderCss() + "\" width=\"100%\"></th></tr></thead>");//Add a blank cell to expand table size.

		return headerBuilder.join("");

	},

	

	getTableBody : function(){

		var bodyBuilder = new Array();

		bodyBuilder.push("<tbody>");

		for(var i=0;i<this.bodyData.length;i++){

			var rowBuilder = new Array();

			rowBuilder.push(this.getRowHead(i,this.bodyData[i]));

			rowBuilder.push(this.getSelectColCell(this.bodyData[i].cells));

			var rowData = this.bodyData[i].cells || [];


            for(var j=this.hasSelectCol?1:0;j<rowData.length;j++){

                rowBuilder.push("<td class='");

                rowBuilder.push(this.getTableBodyCss());

                rowBuilder.push(this.getTableBodyCellHeaders(rowData[j].htmlElements));

                rowBuilder.push("'>");

                var htmlElementHeads = this.headerData[j].htmlElementHeads || [];

                rowBuilder.push(this.generateCell(htmlElementHeads,rowData[j].htmlElements));

                rowBuilder.push("</td>");

            }			


			rowBuilder.push("<td></td></tr>");//Add a blank cell to expand table size.

			bodyBuilder.push(rowBuilder.join(""));

		}

		if(this.bodyData.length==0){

			bodyBuilder.push(this.getNoRecordStr());

		}

		bodyBuilder.push("</tbody></table>");

		return bodyBuilder.join("");

	},


	generateCell : function(cellElementHeads,cellElementDatas){


        var cellBuilder = new Array();


        cellBuilder.push("<table><tr>");


        for(var i=0;i<cellElementHeads.length;i++){


            var containerId = this.idPrevious+"container-"+Ac360.increase();


            cellBuilder.push("<td style='border-bottom:0;' id='");


            cellBuilder.push(containerId);


            cellBuilder.push("'>");


            if(cellElementDatas[i] && !cellElementDatas[i].className){


                cellElementDatas[i].className = this.getGenerateCellCss();


            }


            cellBuilder.push(this.generateHTMLElement(cellElementHeads[i],cellElementDatas[i],containerId));


            cellBuilder.push("</td>");


        }


        cellBuilder.push("</tr></table>");


        return cellBuilder.join("");

	},

	

	// screen readers to speak the headers associated with each data cell.

	getTableBodyCellHeaders : function(cellElementDatas)

	{

		var rtnStr = "";

		if (cellElementDatas && cellElementDatas.length > 0)

		{

			var data = cellElementDatas[0];

			if (data)

			{

				if (data.headers)

				{

					rtnStr = "' headers='" + data.headers;

				}

				else if (data.id)

				{

					rtnStr = "' headers='" + data.id;

				}

			}

		}

		return rtnStr;

	},


	getRowHead : function(index,rowData){

		var rowClass = "singleRow";

		if(index%2==1){

			rowClass = "doubleRow";

		}

		var rowHeadBuilder = new Array();

		rowHeadBuilder.push("<tr ");

		rowHeadBuilder.push(this.getRowHeadEventStr(rowData));

		rowHeadBuilder.push(" id=\"");

		rowHeadBuilder.push(this.getRowId());

		rowHeadBuilder.push("\" class=\"");

		rowHeadBuilder.push(rowClass);

		rowHeadBuilder.push("\">");	

		return rowHeadBuilder.join("");

	},

	

	appendPagingInfo : function(outerHTML)

	{

	    if(this.pageInfo){

            var pageInfo = this.pageInfo;

            var webPath = this.environment.webPath;

            var message = this.messages;

            var pageNavigator = new UI.PageNavigator({pageInfo:pageInfo,webPath:webPath,message:message});

            var navigatorHTML = pageNavigator.getOuterHTML(true, false);
            
            var navigatorFootHTML = pageNavigator.getOuterHTML(false, true);
            
            outerHTML = navigatorHTML +outerHTML+navigatorFootHTML;
            
         

        }

        return outerHTML;

	},

	

	render : function(){

		var outerHTML = this.getTableHeader()+this.getTableBody();

		outerHTML = this.appendPagingInfo(outerHTML);

		

		if(!this.readOnly){

			outerHTML = this.getToolBar() + outerHTML;

		}

		

		document.write(outerHTML);

		this.renderDelayedElem();

		var table = document.getElementById(this.id);

		table.refJSTable = this;//Add a reference to its corresponding JS Table object.

		if(this.bodyData.length!=0){

			var rows = table.children[1].rows;

			for(var i=0;i<rows.length;i++){

				rows[i].data = this.bodyData[i].cells || [];//Bind DOM rows with json data for quick reference.

			}

			var cilckFisrtRow = function(){

				if(document.readyState=='complete' && UI.Table.selectFirstRow){

					rows[0].click();

					clearInterval(timer);

				}

			};

			if(rows && rows.length>0){

				var timer = setInterval(cilckFisrtRow,100);

			}

		}

		tableCorner.addTableListen(this.id);//Draw corners for table.

		if(!this.readOnly){

			var toolBar = document.getElementById(this.toolBarId);

			toolBar.refTable = table;//Add a reference to DOM table.

			this.preSubmit();

		}

	},

	

	createNewRow : function(){

		var row = document.createElement("tr");

		row.onclick= function(){

			UI.Table.highlight(this)

		};

		row.onmouseover = function(){

			UI.Table.rowMouseOver(this);

		};

		row.onmouseout = function(){

			UI.Table.rowMouseOut(this);

		};

		row.id = this.getRowId();

		var cell = document.createElement("td");

		if(this.hasSelectCol){

			var selectConfig = {id:"ac360_list_id",

					onClick:"UI.Table.select()",

					title:this.messages['menubar.common.select.label']};

			cell.innerHTML = this.getWidget(this.headerData[0].htmlElementHeads[0].elementType).getOuterHTMLWrapper(selectConfig);

			row.appendChild(cell);

		}

		for(var i=this.hasSelectCol?1:0;i<this.headerData.length;i++){

			cell = document.createElement("td");

			var htmlElementHeads = this.headerData[i].htmlElementHeads || [];

			for(var j=0;j<htmlElementHeads.length;j++){

				cell.innerHTML += this.getWidget(htmlElementHeads[j].elementType).getOuterHTMLWrapper();

			}

			row.appendChild(cell);

		}

		cell = document.createElement("td");//the last column to expand table width.

		row.appendChild(cell);

		return row;

	},

	

	getInitRowData : function(){

		var rowData = new Object();

		rowData.sign = "new";

		rowData.id = "";

		rowData.cells = new Array();

		for(var i=0;i<this.headerData.length;i++){

			var cell = new Object();

			cell.htmlElements=new Array();

			var htmlElementHeads = this.headerData[i].htmlElementHeads || [];

			for(var j=0;j<htmlElementHeads.length;j++){

				cell.htmlElements.push(null);

			}

			rowData.cells.push(cell);

		}

		return rowData;

	},

	

	getCommitData : function(){

		var table = document.getElementById(this.id);

		var rows = table.children[1].rows;

		var resultData = new Array();

		for(var i=0;i<rows.length;i++){

			var cols = rows[i].children;

			if(this.hasSelectCol){//select column does not contain data to submit.

				cols = cols.slice(1);

			}

			for(var j=0;j<cols.length-1;j++){//skip the last column which is used to expand table size.

				var childNodes = cols[j].childNodes;

				for(var k=0;k<childNodes.length;k++){

					var value = this.getWidget(this.headerData[j].htmlElementHeads[k].elementType).parseSibling(childNodes[k]);

					var changed = false;

					if(row[i].data.cells[j].htmlElements[k].value!=value){

						row[i].data.cells[j].htmlElements[k].value = value;

						changed = true;

					}

					if(changed && !row[i].data.sign)

						row[i].data.sign = "update";

				}

			}

			if(row[i].data.sign){

				resultData.push(row[i].data);

			}

		}

		var resultData = resultData.concat(this.deletedRowData);

		return Ac360.jsonToStr(resultData);

	},

	

	preSubmit : function(){

		if(document.forms[0]){

			BaseJS.addEventHandler(document.forms[0],"onsubmit",function(){

				document.forms[0].innerHTML = document.forms[0].innerHTML 

				+ "<input type=hidden name=\"ac360_list\" value=\""

				+this.getCommitData()

				+"\"></input>";

			});

		}

	},

	

	getTableHeaderCss : function()

	{

		return "portlet-section-subheader AlignL";

	},

	

	getTableBodyCss : function()

	{

		return "portlet-section-body";

	},

	

	getGenerateCellCss : function()

	{

		return "list-field-ellipsis";

	},

	

	getTableHeaderLabel : function(label)

	{

		return "<font class=\"ignoreSortHeader\">" + label + "</font>";

	},

	

	getNoRecordStr : function()

	{

		var rtnStr = "<tr id='popNorecord'>";

		if(this.hasSelectCol){

			rtnStr += "<td width='1%'/>";

		}

		rtnStr += "<td class='portlet-msg-alert' colspan='199'>";

		rtnStr += this.messages['page.norecord.label'];

		rtnStr += "</td></tr>";

		return rtnStr;

	},

	

	getRowHeadEventStr : function(rowData)

	{

		var rtnStr = " onclick=\"UI.Table.highlight(this);";

		if(rowData.rowClick){

			rtnStr += "UI.Table.rowClickFunc(this,'";

			rtnStr += this.jsToHtml(rowData.rowClick);

			rtnStr += "');";

		}

		rtnStr += "\" onmouseover=\"UI.Table.rowMouseOver(this)\" onmouseout=\"UI.Table.rowMouseOut(this)\" ";

		return rtnStr;

	},

	

	addDefaultEvent : function(){

		

	}

});

//Add the event handler for table component.

UI.Table.insert = function(){

	var event = Ac360.getEvent();

	var srcObj = event.srcElement || event.originalTarget;

	var tableNode = srcObj.parentNode.refTable;

	var tableBody = tableNode.children[1];

	var table = tableNode.refJSTable;

	var rowData = table.getInitRowData();

	var newNode = table.createNewRow();

	newNode.data = rowData;

	tableBody.appendChild(newNode);

	scrollBarIssue.autoAdjustForTableAddOrRemoveRows(document);

};


UI.Table.remove = function(){

	var event = Ac360.getEvent();

	var srcObj = event.srcElement || event.originalTarget;

	var tableNode = srcObj.parentNode.refTable;

	var tableBody = tableNode.children[1];

	var rows = tableBody.rows;

	var table = tableNode.refJSTable;

	var deletedElems = new Array();

	var toDeleteDatas = new Array();

	if(table.selectedRows.length==0){

		return;

	}

	for(var i=0;i<table.selectedRows.length;i++){

			var toDeleteData = table.selectedRows[i].data;

			if(toDeleteData.sign!="new"){

				toDeleteData.sign = "delete";

				table.deletedRowData.push(toDeleteData);

			}

			deletedElems.push(table.selectedRows[i]);

	}

	for(i=0;i<deletedElems.length;i++){

		tableBody.removeChild(deletedElems[i]);

	}

	table.selectedRows= new Array();

	if(rows && rows.length>0){

		rows[0].click();

	}

	scrollBarIssue.autoAdjustForTableAddOrRemoveRows(document);

	return deletedElems;

};


UI.Table.rowMouseOver = function(rowObj){

	if(rowObj){

		var rowClass = rowObj.className;

		if(rowClass && (rowClass.indexOf('rowClick') > -1 || rowClass.indexOf('rowOver') > -1)){

			return;

		}

		rowObj.className += ' rowOver';

	}	

};


UI.Table.rowMouseOut = function(rowObj){

	if(rowObj){

		var rowClass = rowObj.className;

		if(rowClass && rowClass.indexOf('rowClick') > -1){

			return;

		}

		rowObj.className = rowClass.replace(/rowOver/ig,'');

	}

};


UI.Table.highlight = function(rowObj) {

	var event = Ac360.getEvent();

	var srcObj = event.srcElement || event.originalTarget;

	if(srcObj != null && (srcObj.type == "checkbox" || srcObj.type == "radio" 

		|| srcObj.type == "text" || srcObj.tagName == "SELECT"))

		return;

	var tableNode = rowObj.parentNode.parentNode;

	var table = tableNode.refJSTable;

	var rowClass = rowObj.className;

	if(rowClass.indexOf('rowClick') < 0){

		rowObj.className += ' rowClick';

	}

	if(table.highLightedRow && table.highLightedRow!=rowObj)

		table.highLightedRow.className = table.highLightedRow.className.replace(/rowClick|rowOver/ig,'');

	table.highLightedRow = rowObj;

};


UI.Table.rowClickFunc = function(rowObj,clickFuncStr){

	var event = Ac360.getEvent();

	var srcObj = event.srcElement || event.originalTarget;

	if(srcObj != null && (srcObj.type == "checkbox" || srcObj.type == "radio" 

		|| srcObj.type == "text" || srcObj.tagName == "SELECT" || srcObj.tagName == "A"))

		return;

	try{

		var clickFunc = new Function(clickFuncStr).bind(rowObj);

		clickFunc();

	}catch(e){

		

	}

};


UI.Table.selectAll = function(){

	var event = Ac360.getEvent();

	var srcObj = event.srcElement || event.originalTarget;//check box object.

	var selectedRow = srcObj.parentNode.parentNode;//checkbox->th->tr

	var tableNode = selectedRow.parentNode.parentNode;//tr->thead->table

	var table = tableNode.refJSTable;

	var rows = tableNode.children[1].rows;

	for(var i=0;i<rows.length;i++){

		var checkBox = rows[i].children[0].children[0];//tr->td->checkbox

		if(checkBox && !checkBox.checked && !checkBox.disabled){

			checkBox.checked = true;

			table.selectedRows.push(rows[i]);

		}

	}

	table.selectAllHandle(srcObj);

	srcObj.onclick = UI.Table.unSelectAll;

};


UI.Table.unSelectAll = function(){

	var event = Ac360.getEvent();

	var srcObj = event.srcElement || event.originalTarget;//check box object.

	var selectedRow = srcObj.parentNode.parentNode;//checkbox->th->tr

	var tableNode = selectedRow.parentNode.parentNode;//tr->thead->table

	var table = tableNode.refJSTable;

	var rows = tableNode.children[1].rows;

	for(var i=0;i<rows.length;i++){

		var checkBox = rows[i].children[0].children[0];//tr->td->checkbox

		if(checkBox && checkBox.checked && !checkBox.disabled){

			checkBox.checked = false;

			var index = Ac360.indexOfArray(table.selectedRows,rows[i]);

			table.selectedRows.splice(index,1);

		}

	}

	table.selectAllHandle(srcObj);

	srcObj.onclick = UI.Table.selectAll;

};


UI.Table.select = function(){

	var event = Ac360.getEvent();

	var srcObj = event.srcElement || event.originalTarget;//checkbox or radio object.

	var selectedRow = srcObj.parentNode.parentNode;//checkbox or radio->td->tr

	var tableNode = selectedRow.parentNode.parentNode;//tr->tbody->table

	var table = tableNode.refJSTable;

	if(srcObj.checked){

		table.selectedRows.push(selectedRow);

	}else{

		var index = Ac360.indexOfArray(table.selectedRows,selectedRow);

		table.selectedRows.splice(index,1);

	}

};

/**

 * 

 * V360	 

 * File: Text.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.Text = new UI.Component();


UI.Text.extend({

	

	idPrevious : "text-",

	

	init : function(config){

		this.text = config.text || "";

		this.containerId = config.containerId;

		this.style = config.style || "";

		this.width = this.parseWidth(this.style);

        if (!Ac360.validator.isEmpty(config.lengthRestricted) && config.lengthRestricted  == "false")

        {

            this.lengthRestricted = false;

        }

        else

        {

            this.lengthRestricted = true;

        }

	},

	

	render : function(){

		var text = this.text;

		if(this.lengthRestricted && this.width)

			text = Ac360.formatToMaxLength(text,this.width,true);

		var textNode = document.createTextNode(text);

		var container = document.getElementById(this.containerId);

		container.appendChild(textNode);

	},

	

	getOuterHTML : function(data){

		var initData = data || {};

		var text = initData.text || "";

		var style = initData.style || this.style;

		var width = this.parseWidth(style);

        var lengthRestricted = true;

        

        if (!Ac360.validator.isEmpty(initData.lengthRestricted) && initData.lengthRestricted  == "false")

        {

            lengthRestricted = false;

        }


		if(lengthRestricted && width)

		{

			text = Ac360.formatToMaxLength(text,width,true);

		}

		

		return text;

	},

	

	parseSiblingValue : function(sibling){

		return sibling.innerHTML;

	},

	

	addDefaultEvent : function(){

		

	}

	

});

WidgetManager.registerWidget("text",UI.Text);

/**

 * 

 * V360 File: Radio.js

 * 

 * Accela, Inc. Copyright (C): 2012-2014

 * 

 * Description: <<General description of the class>>

 * 

 * Notes: <<Specific programming notes>>

 * 

 * Revision History: <<Date>>, <<Who>>, <<What>> 25/4/2012, Ray Zhang,

 * Initial version

 * 

 */


UI.Radio = new UI.Component();


UI.Radio.extend({


    idPrevious : "radio-",


    init : function(config){

        this.id = config.id || this.getId();

        this.name = config.name || this.getId();

        this.accessKey = config.accessKey || "";

        this.align = config.align || "";

        this.value = config.value || "";

        this.className = config.className || "";

        this.disabled = config.disabled || false;

        this.readOnly = config.readOnly || false;

        this.multiple = config.multiple || false;

        this.style = config.style;

        this.tabIndex = config.tabIndex;

        this.items = config.items || [];

        this.containerId = config.containerId;

        this.eventMap = config.eventMap||{};

        this.supportEvents = config.supportEvents || ["change","click"];

    },


    render : function(){

        for(var i=0;i<this.items.length;i++){

            var radioItems = this.items[i];

            var radio = document.createElement('input');

            radio.setAttribute('type','radio');

            radio.name = this.name;

            radio.id = this.id;

            if(radioItems.className){

                radio.className = this.className;

            }

            if(radioItems.accessKey){

                radio.accessKey = this.accessKey;

            }

            if(radioItems.align){

                radio.align = this.align;

            }

            if(radioItems.value == this.value){

                radio.checked = true;

            }

            if(radioItems.disabled){

                radio.disabled = this.disabled;

            }

            if(thisradioItems.style){

                radio.style = this.style;

            }

            if(radioItems.tabIndex){

                radio.tabIndex = this.tabIndex;

            }

            

            if(radioItems.checked){

                this.checked = true;  

            }

            

            if(this.label){

                //option.innerHTML = this.items[i].text || this.items[i].label;

            }

            

            this.bindEvents(radio,this.eventMap,this.supportEvents);

            var container = document.getElementById(this.containerId);

            container.appendChild(radio);

        }

    },


    getOuterHTML : function(config){

        var initData = config || {};

        var text = initData.value || "";

        var id = initData.id || this.id;

        var name = initData.name || id;

        var className = initData.classname || this.className;

        var disabled = initData.disabled || this.disabled;

        var readOnly = initData.readOnly || this.readOnly;

        var style = initData.style || this.style;

        var items = initData.items || this.items;

        var eventMap = initData.eventMap || this.eventMap;

        var supportEvents = initData.supportEvents || this.supportEvents;

        var alignStr = '</br>';

        var content =[];

        if(items && items.length==0)

        {

            return "<input type='radio' name='"+name+"' class='"+className+"' style='"+style+"' value='"+ text +"' />";

        }

        if(style)

        {

            var reg = /^.*horizontal\s*:\s*(\w*);*.*$/;

            var matchArray = reg.exec(style);

            if(matchArray != null)

            {

                if(matchArray[1] =='true')

                {

                    alignStr = '';

                }

            }

        }

        for(var i=0;i<items.length;i++){

            var radio = items[i];

            var radioElementStr = "<input type='radio' name='"+name+"' value='"+radio.value+"' class='"+className+"'  ";

            radioElementStr += (radio.value == text ? ' checked ':'');

            radioElementStr += this.eventsToHTML(eventMap,supportEvents)+' />';

            radioElementStr += (radio.text || radio.label);  

            radioElementStr += ('&nbsp;'+alignStr); 

            content.push(radioElementStr);

        }  

        return content.join("");

    },




    customizeHTML : function(data) {

                

    },



    parseSiblingValue : function(sibling) {


        return sibling.value;


    },



    addDefaultEvent : function() {

        

    }


});


WidgetManager.registerWidget("radio",UI.Radio);


WidgetManager.registerWidget("single_select",UI.Radio);

/**

 * 

 * V360 File: Link.js

 * 

 * Accela, Inc. Copyright (C): 2012-2014

 * 

 * Description: <<General description of the class>>

 * 

 * Notes: <<Specific programming notes>>

 * 

 */


UI.Link = new UI.Component();


UI.Link.extend( {


	idPrevious : "link-",


	init : function(config) {

		this.id = config.id || this.getId();

		this.name = config.name || this.getId();

		this.text = config.text || "";

		this.accessKey = config.accessKey || "";

		this.disabled = config.disabled || false;

		this.href = config.href || "";

		this.style = config.style || "";

		this.target = config.target || "";

		this.tabIndex = config.tabIndex;

		this.title = config.title || "";

		this.containId = config.containId;

		this.width = this.parseWidth(this.style);

		

        if (!Ac360.validator.isEmpty(config.lengthRestricted) && config.lengthRestricted  == "false")

        {

            this.lengthRestricted = false;

        }

        else

        {

            this.lengthRestricted = true;

        }


		this.eventMap = config.eventMap || {};

		this.supportEvents = config.supportEvents || [ "change", "click" ];

		this.className = config.className;

	},


	render : function() {

		var link = document.createElement('a');

		link.id = this.id;

		link.name = this.name;

		if (this.href) {

			link.href = this.href;

		}

		if (this.text) {

			link.innerHTML = this.text;

			if(this.lengthRestricted && this.width)

			link.innerHTML = Ac360.formatToMaxLength(link.innerHTML,this.width,true);

		}

		if (this.title) {

			link.title = this.title;

		}

		if (this.accessKey) {

			link.accessKey = this.accessKey;

		}

		if (this.disabled) {

			link.disabled = this.disabled;

		}

		if (this.style) {

			link.style = this.style;

		}

		if (this.target) {

			link.target = this.target;

		}

		if (this.tabIndex) {

			link.tabIndex = this.tabIndex;

		}

		if (this.className) {

			link.className = this.className;

		}

		this.bindEvents(input, this.eventMap, this.supportEvents);

		var contain = document.getElementById(this.containId);

		contain.appendChild(link);

	},


	getOuterHTML : function(data) {

		var initData = data || {};

		var text = initData.text || this.text;

		if (Ac360.validator.isEmpty(text))

		{

		    return "";

		}

		

		var id = initData.id || this.id;

		var name = initData.name || id;

		var title = initData.title || this.title;

		var href = initData.href || this.href;

		var accessKey = initData.accessKey || this.accessKey;

		var tabIndex = initData.tabIndex || this.tabIndex;

		var disabled = initData.disabled || this.disabled;

		var target = initData.target || this.target;

		var style = initData.style || this.style;

		var eventMap = initData.eventMap || this.eventMap;

		var supportEvents = initData.supportEvents || this.supportEvents;

		var width = this.parseWidth(style);

		

        var lengthRestricted = true;

        if (!Ac360.validator.isEmpty(initData.lengthRestricted) && initData.lengthRestricted  == "false")

        {

            lengthRestricted = false;

        }


		var className = initData.className || this.className;

		var content = new Array();

		// clear link width, avoid blank area link 

		if (width)

		{

			var spanWidthPtn = /width\s*:\s*(\d+)[; ]*/gi;

			style = style.replace(spanWidthPtn, "");

			content.push("<span style='width:");

			content.push(width);

			content.push("' id='");

			content.push(this.idPrevious + Util.increase());

			content.push("'>");	

		}

		

		content.push("<a id='");

		content.push(id);

		content.push("' name='");

		content.push(name);

		if (href) {

			content.push("' href='");

			content.push(href);

		}

		if (title) {

			content.push("' title='");

			content.push(title);

		}

		if (accessKey) {

			content.push("' accessKey='");

			content.push(accessKey);

		}

		if (tabIndex) {

			content.push("' tabIndex='");

			content.push(tabIndex);

		}

		if (target) {

			content.push("' target='");

			content.push(target);

		}

		if (style) {

			content.push("' style='");

			content.push(style);

		}

		content.push("'");

		if (disabled) {

			content.push(" disabled='disabled'");

		}

		if(lengthRestricted && width)

		{

			content.push(UI.Tip.appendTip(text));

			text = Ac360.formatToMaxLength(text,width,true);

		}

		if(className){

			content.push(" class='");

			content.push(className);

			content.push("'");

		}

		content.push(this.eventsToHTML(eventMap,supportEvents));

		content.push(">");

		

		content.push(text);

		

		content.push("</a>");

		if (width)

		{

			content.push("</span>");

		}

		return content.join("");

	},


	addDefaultEvent : function() {


	}


});

WidgetManager.registerWidget("link",UI.Link);

/**

 * 

 * V360	 

 * File: Hidden.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.Hidden = new UI.Component();


UI.Hidden.extend({

	

	idPrevious : "hidden-",

	

	init : function(config){

		this.id = config.id || this.getId();

		this.name = config.name || this.id;

		this.value = config.value || "";

		this.className = config.className || "";

		this.style = config.style;

		this.containId = config.containId;

	},

	

	render : function(){

		var hidden = document.createElement("input");

		hidden.type = "hidden";

		hidden.id = this.id;

		hidden.name = this.name;

		if(this.value){

			hidden.value = this.value;

		}

		if(this.className){

			hidden.className = this.className;

		}

		if(this.style){

			hidden.style = this.style;

		}

		var container = document.getElementById(this.containId);

		container.appendChild(hidden);

	},

	

	getOuterHTML : function(data){

		var initData = data || {};

		var value = initData.value || "";

		var name = initData.name || this.name;

		var id = initData.id || this.id;

		var className = initData.className || this.className;

		var style = initData.style || this.style;

		var content = new Array();

		content.push("<input type=hidden id='");

		content.push(id);

		content.push("' name='")

		content.push(name);

		if(value){

			content.push("' value='");

			content.push(value);

		}

		if(className){

			content.push("' className='");

			content.push(className);

		}

		if(style){

			content.push("' style='");

			content.push(style);

		}

		content.push("'/>");

		return content.join("");

	},

	

	parseSiblingValue : function(sibling){

		return sibling.value;

	},

	

	addDefaultEvent : function(){

		

	}

	

});

WidgetManager.registerWidget("hidden",UI.Hidden);

/**

 * 

 * V360	 

 * File: Font.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.Font = new UI.Component();


UI.Font.extend({

	

	idPrevious : "font-",

	

	init : function(config){

		this.id = config.id || this.getId();

		this.name = config.name || this.getId();

		this.text = config.text || "";

		this.accessKey = config.accessKey || "";

		this.className = config.className || "";

		this.style = config.style || "";

		this.tabIndex = config.tabIndex || "";

		this.disabled = config.disabled || false;

		this.color = config.color || "";

		this.containerId = config.containerId;

		this.width = this.parseWidth(this.style);

		

        if (!Ac360.validator.isEmpty(config.lengthRestricted) && config.lengthRestricted  == "false")

        {

            this.lengthRestricted = false;

        }

        else

        {

            this.lengthRestricted = true;

        }


		this.eventMap = config.eventMap || {};

		this.supportEvents = config.supportEvents || ["mouseenter", "mouseout", "onmouseover"];

	},

	

	render : function(){

		var font = document.createElement('font');

		font.name = this.name;

		font.id = this.id;

		if(this.text){

			font.innerHTML = this.text;

			if(this.lengthRestricted && this.width)

			font.innerHTML = Ac360.formatToMaxLength(font.innerHTML,this.width,true);

		}

		if(this.accessKey){

			font.accessKey = this.accessKey;

		}

		if(this.className){

			font.className = this.className;

		}

		if(this.style){

			font.style = this.style;

		}

		if(this.tabIndex){

			font.tabIndex = this.tabIndex;

		}

		if(this.disabled){

			font.disabled = this.disabled;

		}

		if(this.color){

			font.color = this.color;

		}

		var container = document.getElementById(this.containerId);

		container.appendChild(font);

	},


	getOuterHTML : function(data){

		var initData = data || {};

		var text = initData.text || "";

		var id = initData.id || this.id;

		var name = initData.name || id;

		var className = initData.className || this.className;

		var tabIndex = initData.tabIndex || this.tabIndex;

		var accesskey = initData.accesskey || this.accesskey;

		var style = initData.style || this.style;

		var disabled = initData.disabled || this.disabled;

		var color = initData.color || this.color;

		var width = this.parseWidth(style);

		var eventMap = initData.eventMap || this.eventMap;

		var supportEvents = initData.supportEvents || this.supportEvents;

		

		var lengthRestricted = true;

        if (!Ac360.validator.isEmpty(initData.lengthRestricted) && initData.lengthRestricted  == "false")

        {

            lengthRestricted = false;

        }


		

		var content = new Array();

		content.push("<font id='");

		content.push(id);

		content.push("' name='");

		content.push(name);

		if(className){

			content.push("' class='");

			content.push(className);

		}

		if(tabIndex){

			content.push("' tabIndex='");

			content.push(tabIndex);

		}

		if(accesskey){

			content.push("' accessKey='");

			content.push(accessKey);

		}

		if(style){

			content.push("' style='");

			content.push(style);

		}

		if(color){

			content.push("' color='");

			content.push(color);

		}

		content.push("'");

		if(disabled){

			content.push(" disabled='disabled'");

		}

		if(lengthRestricted && width)

		{

			content.push(UI.Tip.appendTip(text));

			text = Ac360.formatToMaxLength(text,width,true);

		}

		

		content.push(this.eventsToHTML(eventMap,supportEvents));

		content.push(">");

		content.push(text);

		content.push("</font>");

		return content.join("");

	},

	

	parseSiblingValue : function(sibling){

		return sibling.innerHTML;

	},

	

	addDefaultEvent : function(){

		

	}

	

});

WidgetManager.registerWidget("font",UI.Font);

/**

 * 

 * V360 File: File.js

 * 

 * Accela, Inc. Copyright (C): 2012-2014

 * 

 * Description: <<General description of the class>>

 * 

 * Notes: <<Specific programming notes>>

 * 

 * 

 */


UI.File = new UI.Component();


Util.extend(UI.File,UI.BaseInput, {


	idPrevious : "file-",


	customizeInput : function(input) {

		input.type = 'file';

		return input;

	},


	customizeHTML : function(data) {

		return "type='file'";

	},


	parseSiblingValue : function(sibling) {

		return sibling.value;

	},


	addDefaultEvent : function() {


	}


});

WidgetManager.registerWidget("file",UI.File);

/**

 * 

 * V360	 

 * File: Image.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.Image = new UI.Component();


UI.Image.extend({

	

	idPrevious : "image-",

	

	init : function(config){

		this.name = config.name || "";

		this.id = config.id || this.getId();

		this.containerId = config.containerId;

		this.className = config.className || "";

		this.accessKey = config.accessKey || "";

		this.alt = config.alt || "";

		this.style = config.style || "";

		this.tabIndex = config.tabIndex;

		this.title = config.title || "";

		this.vspace = config.vspace;

		this.hspace = config.hspace;

		this.src = config.src || "";

		this.eventMap = config.eventMap || {};

		this.supportEvents = config.supportEvents || ["click", "mouseover", "mouseout", "mousemove"];

	},

	

	render : function(){

		var imgNode = document.createElement("img");

		imgNode.id = this.id;

		imgNode.name = this.name;

		if(this.src){

			imgNode.src = (this.src.indexOf(this.environment.webPath)>=0)?this.src:(this.environment.webPath+this.src);

		}

		if(this.className){

			imgNode.className = this.className;

		}

		if(this.alt){

			imgNode.alt = this.alt;

		}

		if(this.style){

			imgNode.style = this.style;

		}

		if(this.tabIndex){

			imgNode.tabIndex = this.tabIndex;

		}

		if(this.title){

			imgNode.title = this.title;

		}

		if(this.vspace){

			imgNode.vspace = this.vspace;

		}

		if(this.hspace){

			imgNode.hspace = this.hspace;

		}

		this.bindEvents(imgNode,this.eventMap,this.supportEvents);

		var container = document.getElementById(this.containerId);

		container.appendChild(imgNode);

	},

	

	getOuterHTML : function(data){

		var initData = data || {};

		var id = initData.id || this.id;

		var className = initData.className || this.className;

		var name = initData.name || id;

		var src = initData.src || this.src;

		src = (src.indexOf(this.environment.webPath)>=0)?src:(this.environment.webPath+src);

		var tabIndex = initData.tabIndex || this.tabIndex;

		var title = initData.title || this.title;

		var hspace = initData.hspace || this.hspace;

		var vspace = initData.vspace || this.vspace;

		var alt = initData.alt || this.alt;

		var style = initData.style || this.style;

		var eventMap = initData.eventMap || this.eventMap;

		var supportEvents = initData.supportEvents || this.supportEvents;

		var eventToHtml = this.eventsToHTML(eventMap,supportEvents);

		var clickEventToHtml = this.eventsToHTML(eventMap,["click"]);

		

		var imgBuilder = new Array();

        imgBuilder.push("<a href='javascript:void(0);'");

        imgBuilder.push(clickEventToHtml);

        imgBuilder.push(">");


		imgBuilder.push("<img id='");

		imgBuilder.push(id);

		imgBuilder.push("' name='");

		imgBuilder.push(name);

		if(className){

			imgBuilder.push("' class='");

			imgBuilder.push(className);

		}

		if(src){

			imgBuilder.push("' src='");

			imgBuilder.push(src);

		}

		if(tabIndex){

			imgBuilder.push("' tabIndex='");

			imgBuilder.push(tabIndex);

		}

		if(hspace){

			imgBuilder.push("' hspace='");

			imgBuilder.push(hspace);

		}

		if(vspace){

			imgBuilder.push("' vspace='");

			imgBuilder.push(vspace);

		}

		if(title){

			imgBuilder.push("' title='");

			imgBuilder.push(title);

		}

		if(alt){

			imgBuilder.push("' alt='");

			imgBuilder.push(alt);

		}

		if(style){

			imgBuilder.push("' style='");

			imgBuilder.push(style);

			imgBuilder.push(";border:none;");

		} else {

            imgBuilder.push("' style='border:none;");

        }

		imgBuilder.push("'");

		imgBuilder.push(this.eventsToHTML(eventMap,supportEvents));

		imgBuilder.push("/>");

        imgBuilder.push("</a>");		

		return imgBuilder.join("");

	},

	

	parseSiblingValue : function(sibling){

		return sibling.src;

	},

	

	addDefaultEvent : function(){

		

	}

	

});

WidgetManager.registerWidget("image",UI.Image);

/**

 * 

 * V360	 

 * File: ImageInput.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.ImageInput = new UI.Component();


Util.extend(UI.ImageInput,UI.BaseInput,{

	

	idPrevious : "imageinput-",

	

	initInput : function(config){

		this.alt = config.alt || "";

		this.vspace = config.vspace;

		this.hspace = config.hspace;

		this.src = config.src || "";

	},

	

	customizeInput : function(input){

		input.type = "image";

		if(this.src){

			input.src = this.src;

		}

		if(this.alt){

			input.alt = this.alt;

		}

		if(this.vspace){

			input.vspace = this.vspace;

		}

		if(this.hspace){

			input.hspace = this.hspace;

		}

		return input;

	},

	

	customizeHTML : function(data){

		var initData = data || {};

		var src = initData.src || this.src;

        src = (src.indexOf(this.environment.webPath)>=0)?src:(this.environment.webPath+src);

		var hspace = initData.hspace || this.hspace;

		var vspace = initData.vspace || this.vspace;

		var alt = initData.alt || this.alt;

		var content = new Array();

		content.push("type='image'");

		if(src){

			content.push(" src='");

			content.push(src);

			content.push("'");

		}

		if(hspace){

			content.push(" hspace='");

			content.push(hspace);

			content.push("'");

		}

		if(vspace){

			content.push(" vspace='");

			content.push(vspace);

			content.push("'");

		}

		if(alt){

			content.push(" alt='");

			content.push(alt);

			content.push("'");

		}

		return content.join("");

	},

	

	parseSiblingValue : function(sibling){

		return sibling.src;

	},

	

	addDefaultEvent : function(){

		

	}

	

});

WidgetManager.registerWidget("image_input",UI.ImageInput);

/**

 * 

 * V360 File: Password.js

 * 

 * Accela, Inc. Copyright (C): 2012-2014

 * 

 * Description: <<General description of the class>>

 * 

 * Notes: <<Specific programming notes>>

 * 

 * 

 */


UI.Password = new UI.Component();


Util.extend(UI.Password,UI.BaseInput, {


	idPrevious : "password-",


	initInput : function(config) {

		this.value = config.value || "";

	},


	customizeInput : function(input) {

		input.type = 'password';

		if (this.value) {

			input.value = this.value;

		}

		return input;

	},


	customizeHTML : function(data) {

		var initData = data || {};

		var value = initData.value || this.value;

		var content = new Array();

		content.push("type='password'");

		if (value) {

			content.push(" value='");

			content.push(value);

			content.push("'");

		}

		return content.join("");

	},


	parseSiblingValue : function(sibling) {

		return sibling.value;

	},


	addDefaultEvent : function() {


	}


});

WidgetManager.registerWidget("password",UI.Password);

/**

 * 

 * V360 File: Reset.js

 * 

 * Accela, Inc. Copyright (C): 2012-2014

 * 

 * Description: <<General description of the class>>

 * 

 * Notes: <<Specific programming notes>>

 * 

 * 

 */


UI.Reset = new UI.Component();


Util.extend(UI.Reset,UI.BaseInput, {


	idPrevious : "reset-",


	initInput : function(config) {

		this.value = config.value || "";

		this.supportEvents = config.supportEvents || [ "click" ];

	},


	customizeInput : function(input) {

		input.type = 'reset';

		if (this.value) {

			input.value = this.value;

		}

		return input;

	},


	customizeHTML : function(data) {

		var initData = data || {};

		var value = initData.value || this.value;

		var content = new Array();

		content.push("type='reset'");

		if (value) {

			content.push(" value='");

			content.push(value);

			content.push("'");

		}

		return content.join("");

	},


	parseSiblingValue : function(sibling) {

		return sibling.value;

	},


	addDefaultEvent : function() {


	}


});

WidgetManager.registerWidget("reset",UI.Reset);

/**

 * 

 * V360 File: Submit.js

 * 

 * Accela, Inc. Copyright (C): 2012-2014

 * 

 * Description: <<General description of the class>>

 * 

 * Notes: <<Specific programming notes>>

 * 

 * 

 */


UI.Submit = new UI.Component();


Util.extend(UI.Submit,UI.BaseInput, {


	idPrevious : "submit-",


	initInput : function(config) {

		this.value = config.value || "";

		this.supportEvents = config.supportEvents || [ "click" ];

	},

	

	customizeInput : function(input) {

		input.type = 'submit';

		input.value = this.value;

		return input;

	},


	customizeHTML : function(data) {

		var initData = data || {};

		var value = initData.value || this.value;

		var content = new Array();

		content.put("type='submit'");

		if (value) {

			content.push(" value='");

			content.push(value);

			content.push("'");

		}

		return content.join("");

	},


	parseSiblingValue : function(sibling) {

		return sibling.value;

	},


	addDefaultEvent : function() {


	}


});

WidgetManager.registerWidget("submit",UI.Submit);

/**

 * 

 * V360	 

 * File: TextArea.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.TextArea = new UI.Component();


UI.TextArea.extend({

	

	idPrevious : "textarea-",

	

	init : function(config){

		this.id = config.id || this.getId();

		this.name = config.name || this.getId();

		this.accessKey = config.accessKey || "";

		this.className = config.className || "";

		this.readOnly = config.readOnly || false;

		this.disabled = config.disabled || false;

		this.wrap = config.wrap;

		this.text = config.text || "";

		this.style = config.style;

		this.tabIndex = config.tabIndex;

		this.containerId = config.containerId;

		this.cols = config.cols || "";

        this.rows = config.rows || "";

		this.eventMap = config.event||{};

		this.keysMap = config.keysMap;

		this.supportEvents = config.supportEvents || ["change"];

		this.spellCheckEnabled = config.spellCheckEnabled;

		this.loadSpellCheckJS();


	},

	

	loadSpellCheckJS : function(){

		var scriptNodes = document.getElementsByTagName("script") || [];

		var scriptLoaded = false;

		var spellCheckJSPath = "/portlets/commons/spellchecker/spellchecker-caller.js";

		for(var i=0;i<scriptNodes.length;i++){

			if(spellCheckJSPath==scriptNodes[i].src){

				scriptLoaded = true;

				break;

			}

		}

		if(!scriptLoaded){

			document.write("<script src='"+spellCheckJSPath+"'></script>");

		}

	},

	

	render : function(){

		var textArea = document.createElement('textarea');

		textArea.name = this.name;

		textArea.id = this.id;

		if(this.className){

			textArea.className = this.className;

		}

		if(this.accessKey){

			textArea.accessKey = this.accessKey;

		}

		if(this.text){

			textArea.innerHTML = this.text;

		}

		if(this.disabled){

			textArea.disabled = this.disabled;

		}

		if(this.readOnly){

			textArea.readOnly = this.readOnly;

		}

		if(this.wrap){

			textArea.wrap = this.wrap;

		}

		if(this.style){

			textArea.style = this.style;

		}

		if(this.tabIndex){

			textArea.tabIndex = this.tabIndex;

		}

		this.bindEvents(textArea,this.eventMap,this.supportEvents);


		if(this.spellCheckEnabled && !readOnly){

			var spellCheck = document.createElement("a");

			spellCheck.onclick = function(){doSpellCheck("/portlets/commons/spellchecker/", this.id)};

			spellCheck.href = "JavaScript:void(0)";

			spellCheck.innerHTML = keysMap.spellcheckerLabel;

			spellCheck.className = "ui-textarea-spellcheck";

			var spellCheckContainer = document.createElement("div");

			spellCheckContainer.style.clear="both";

			spellCheckContainer.appendChild(spellCheck);

		}

		var textAreaContainer = document.createElement("div");

		textAreaContainer.style.clear="both";

		textAreaContainer.appendChild(textArea);

		var outestContainer = document.createElement("div");

		outestContainer.appendChild(textAreaContainer);

		if(this.spellCheckEnabled){

			outestContainer.appendChild(spellCheckContainer);

		}

		var container = document.getElementById(this.containerId);

		container.appendChild(outestContainer);

	},

	

	getOuterHTML : function(config){

		var initData = config || {};

		var text = initData.text || "";

		var id = initData.id || this.id;

		var name = initData.name || id;

		var className = initData.classname || this.className;

		if (className == null)

		{

			className = "portlet-form-input-field";

		}

		else if (className.indexOf("portlet-form-input-field") < 0)

		{

			className = "portlet-form-input-field " + className;

		}

		var disabled = initData.disabled || this.disabled;

		var readOnly = initData.readOnly || this.readOnly;

		var wrap = initData.wrap || this.wrap;

		var style = initData.style || this.style;

		var cols = initData.cols || this.cols;

		var rows = initData.rows || this.rows;

		var tabIndex = initData.tabIndex || this.tabIndex;

		var accessKey = initData.accessKey || this.accessKey;

		var eventMap = initData.event || this.eventMap;

		var supportEvents = initData.supportEvents || this.supportEvents;

		var keysMap = initData.keysMap || this.keysMap;

		var spellCheckEnabled = config.spellCheckEnabled;

		

		var content = new Array();

		content.push("<div><div style='clear:both;'><textarea id='");

		content.push(id);

		content.push("' name='");

		content.push(name);

		if(className){

			content.push("' class='");

			content.push(className);

		}

		if(wrap){

			content.push("' wrap='");

			content.push(wrap);

		}

		if(style){

			content.push("' style='");

			content.push(style);

		}

		if(tabIndex){

			content.push("' tabIndex='");

			content.push(tabIndex);

		}

		if(accessKey){

			content.push("' accessKey='");

			content.push(accessKey);

		}

		content.push("'");

		if(readOnly){

			content.push(" readOnly='readOnly'");

		}

		if(disabled){

			content.push(" disabled='disabled'");

		}

        if(rows){

            content.push(" rows='");

            content.push(rows);

            content.push("'");

        }

        if(cols){

            content.push(" cols=''");

            content.push(cols);

            content.push("'");

        }

		content.push(this.eventsToHTML(eventMap,supportEvents));

		content.push(">");

		if(text){

			content.push(text);

		}

		content.push("</textarea></div>");

		if(spellCheckEnabled && !readOnly){

			content.push("<div style='clear:both;'><a onclick=\'JavaScript:doSpellCheck(\"/portlets/commons/spellchecker/\", \"");

			content.push(id);

			content.push("\");\' href=\'JavaScript:void(0)\' class='ui-textarea-spellcheck'>")

			content.push(keysMap.spellcheckerLabel);

			content.push("</a></div>");

		}

		content.push("</div>");

		return content.join("");

	},

	

	parseSiblingValue : function(sibling){

		

	},

	

	addDefaultEvent : function(){

		

	},

	

	needToEncode : 'false',

	

	encode : function(text)

	{

		return text.replace(/&/g, "&amp;");

	}

	

});

WidgetManager.registerWidget("textarea",UI.TextArea);

/**

 * 

 * V360	 

 * File: TextInput.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.TextInput = new UI.Component();


UI.TextInput.extend({

	

	idPrevious : "textinput-",

	

	init : function(config){

		this.id = config.id || this.getId();

		this.name = config.name || this.getId();

		this.value = config.value || "";

		this.containId = config.containId;

		this.accessKey = config.accessKey;

		this.className = config.className;

		this.style = config.style;

		this.tabIndex = config.tabIndex;

		this.title = config.title;

		/*

		 * rule format: "required;range(1,20)", use ";" as semicolon.

		 * Supported attributes: required,range.

		 */

		this.rule = config.rule;

		this.msgLabelPos = config.msgLabelPos;

		this.maxLength = config.maxLength;

		this.readOnly = config.readOnly;

		this.disabled = config.disabled;

		this.alt = config.alt || "";

		this.eventMap = config.eventMap || {};

		this.supportEvents = config.supportEvents || ["click", "change","keypress"];

	},

	

	render : function(){

		var input = document.createElement("input");

		input.id = this.id;

		input.name = this.name;

		if(this.value)

			input.value = this.value;

		if(this.accessKey)

			input.accessKey = this.accessKey;

		if(this.className)

			input.className = this.className;

		if(this.style)

			input.style = this.style;

		if(this.tabIndex)

			input.tabIndex = this.tabIndex;

		if(this.title)

			input.title = this.title;

		if(this.rule)

			input.rule = this.rule;

		if(this.maxLength)

			input.maxLength = this.maxLength;

		if(this.readOnly)

			input.readOnly = this.readOnly;

		if(this.disabled)

			input.disabled = this.disabled;

		input.onfocus = function(){ av.validation.attachByElement(input) };

	    var container = document.getElementById(this.containId);

	    container.appendChild(input);

	    if(this.extraRender){

			container.appendChild(this.extraRender());

		}

		if(this.msgLabelPos || this.msgLabelPos == "right"){

			var label = document.createElement("label");

			label.id = this.id+"*msg";

			container.appendChild(label);

		}

	},

	

	getOuterHTML : function(data){

		var initData = data || {};

		var id = initData.id || this.id;

		var name = initData.name || id;

		var value = initData.value || this.value;

		var accessKey = initData.accessKey || this.accessKey;

		var className = initData.className || this.className;

		if (className == null)

		{

			className = "portlet-form-input-field";

		}

		else if (className.indexOf("portlet-form-input-field") < 0)

		{

			className = "portlet-form-input-field " + className;

		}

		var style = initData.style || this.style;

		var tabIndex = initData.tabIndex || this.tabIndex;

		var title = initData.title || this.title;

		var rule = initData.rule || this.rule;

		var msgLabelPos = initData.msgLabelPos || this.msgLabelPos;

		var maxLength = initData.maxLength || this.maxLength;

		var readOnly = initData.readOnly || this.readOnly;

		var disabled = initData.disabled || this.disabled;

		var eventMap = initData.eventMap || this.eventMap;

		var supportEvents = initData.supportEvents || this.supportEvents;

		var content = ["<input type='text' id='"];

		content.push(id);

		content.push("' name='");

		content.push(name);

		content.push("' ");

		if(rule)

			rule = (this.inputType ? (this.inputType + ";"):"") + rule;

		else

			rule = this.inputType;

		

		content.push("data-rule='")

		content.push(rule);

		content.push("'");

		

		if(maxLength){

			content.push(" maxLength='");

			content.push(maxLength);

			content.push("'");

		}

		

		if(style){

			content.push(" style='");

			content.push(style);

			content.push("'");

		}

		

		if(className){

			content.push(" class='");

			content.push(className);

			content.push("'");

		}

		

		if(tabIndex){

			content.push(" tabIndex='");

			content.push(tabIndex);

			content.push("'");

		}

		

		if(title){

			content.push(" title='");

			content.push(title);

			content.push("'");

		}

		

		if(readOnly){

			content.push(" readOnly='true'");

		}

		

		if(disabled){

			content.push(" disabled='true'");

		}

		

		if(accessKey){

			content.push(" accessKey='");

			content.push(accessKey);

			content.push("'");

		}

		

		if(value){

			content.push(" value='");

			content.push(value);

			content.push("'");

		}

		content.push(this.eventsToHTML(eventMap,supportEvents));

		content.push(" onfocus='av.validation.attachByElement(this);'");

		content.push("/>");

		

		if(this.extraRender)

			content.push(this.extraGetOuterHTML(data));

		if(msgLabelPos || msgLabelPos == "right")

			content.push("<label id='" + id + "*msg'></label>");

		return content.join('');

	}

});

WidgetManager.registerWidget("text_input",UI.TextInput);


//Integer Input

UI.IntInput = new UI.Component();

Util.extend(UI.IntInput, UI.TextInput, {

	inputType: "int"

});

WidgetManager.registerWidget("int",UI.IntInput);


//Float value Input

UI.FloatInput = new UI.Component();

Util.extend(UI.FloatInput, UI.TextInput, {

	inputType: "float"

});

WidgetManager.registerWidget("float",UI.FloatInput);


//Email value Input

UI.EmailInput = new UI.Component();

Util.extend(UI.EmailInput, UI.TextInput, {

	inputType: "email"

});

WidgetManager.registerWidget("email",UI.EmailInput);


//Time value Input

UI.TimeInput = new UI.Component();

Util.extend(UI.TimeInput, UI.TextInput, {

	inputType: "time"

});

WidgetManager.registerWidget("time",UI.TimeInput);


//Short Time value Input

UI.ShortTimeInput = new UI.Component();

Util.extend(UI.ShortTimeInput, UI.TextInput, {

	inputType: "shorttime"

});

WidgetManager.registerWidget("shorttime",UI.ShortTimeInput);


//Date value Input

UI.DateInput = new UI.Component();

Util.extend(UI.DateInput, UI.TextInput, {

	inputType: "date",

	

	extraRender : function(){

		var name = this.name || "";

		var alt = this.alt || "";

		var spanNode = document.createElement("span");

		var linkNode = document.createElement("a");

		linkNode.href = "#";

		linkNode.onkeydown = function(){

			if(event.keyCode==32) event.keyCode=13;

		};

		linkNode.onclick = function(){

			return selectDate(name);

		};

		var imageNode = document.createElement("img");

		imageNode.src = this.environment.webPath+"/images/selectDate.gif";

		iamgeNode.alt = alt;

		imageNode.border = 0;

		var textNode = document.createTextNode("&nbsp;");

		linkNode.appendChild(imageNode);

		spanNode.appendChild(linkNode);

		spanNode.appendChild(textNode);

		return spanNode;

	},

	

	extraGetOuterHTML: function(data){

		var initData = data || {};

		var name = initData.name || initData.id || this.id;

		var alt = initData.alt || this.alt;

		return "<span>&nbsp;<a href='#' onKeyDown='if(event.keyCode==32) event.keyCode=13;' onclick='return selectDate(\""+ 

		name + "\")'><img src='"+this.environment.webPath+"/images/selectDate.gif' alt='"+alt+"' border=0 ></a>&nbsp;</span>";

	}

});

WidgetManager.registerWidget("date",UI.DateInput);

/**

 * 

 * V360	 

 * File: Select.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.Select = new UI.Component();


UI.Select.extend({

	

	idPrevious : "select-",

	

	init : function(config){

		this.id = config.id || this.getId();

		this.name = config.name || this.getId();

		this.accessKey = config.accessKey || "";

		this.align = config.align || "";

		this.value = config.value || "";

		this.className = config.className || "";

		this.disabled = config.disabled || false;

		this.readOnly = config.readOnly || false;

		this.multiple = config.multiple || false;

		this.style = config.style;

		this.tabIndex = config.tabIndex;

		this.items = config.items || [];

		this.containerId = config.containerId;

		this.eventMap = config.eventMap||{};

		this.supportEvents = config.supportEvents || ["change","click"];

	},

	

	render : function(){

		var select = document.createElement('select');

		select.name = this.name;

		select.id = this.id;

		if(this.className){

			select.className = this.className;

		}

		if(this.accessKey){

			select.accessKey = this.accessKey;

		}

		if(this.align){

			select.align = this.align;

		}

		if(this.value){

			select.value = this.value;

		}

		if(this.disabled){

			select.disabled = this.disabled;

		}

		if(this.multiple){

			select.multiple = this.multiple;

		}

		if(this.style){

			select.style = this.style;

		}

		if(this.tabIndex){

			select.tabIndex = this.tabIndex;

		}

		

		for(var i=0;i<this.items.length;i++){

			var option = document.createElement('option');

			if(this.value == this.items[i].value){

				option.selected = 'selected';

			}

			

			option.value = this.items[i].value;

			

			if(this.items[i].text || this.items[i].label){

				option.innerHTML = this.items[i].text || this.items[i].label;

			}

			select.appendChild(option);

		}

		this.bindEvents(select,this.eventMap,this.supportEvents);

		var container = document.getElementById(this.containerId);

		container.appendChild(select);

	},

	

	getOuterHTML : function(config){

		var initData = config || {};

		var text = initData.value || "";

		var id = initData.id || this.id;

		var name = initData.name || id;

		var className = initData.classname || this.className;

		var disabled = initData.disabled || this.disabled;

		var readOnly = initData.readOnly || this.readOnly;

		var multiple = initData.multiple || this.multiple;

		var style = initData.style || this.style;

		var tabIndex = initData.tabIndex || this.tabIndex;

		var items = initData.items || this.items;

		var eventMap = initData.eventMap || this.eventMap;

		var supportEvents = initData.supportEvents || this.supportEvents;

		var content = new Array();

		content.push("<select id='");

		content.push(id);

		content.push("' name='");

		content.push(name);

		if(className){

			content.push("' class='");

			content.push(className);

		}

		if(style){

			content.push("' style='");

			content.push(style);

		}

		if(tabIndex){

			content.push("' tabIndex='");

			content.push(tabIndex);

		}

		content.push("'");

		if(multiple){

			content.push(" multiple='multiple'");

		}

		if(disabled || readOnly){

			content.push(" disabled='disabled'");

		}

		content.push(this.eventsToHTML(eventMap,supportEvents));

		content.push(">");

		for(var i=0;i<items.length;i++){

			content.push("<option ");

			if(items[i].selected || items[i].value==text || items[i].value == BaseJS.htmlDecode(text)){

				content.push(" selected='selected'");

			}

			if(typeof items[i].value == 'string'){

				content.push(" value='");

				content.push(items[i].value);

				content.push("'");

				content.push(" title='");

				content.push(items[i].value);

				content.push("'");

			}

			content.push(">");

			if(items[i].text){

				content.push(items[i].text || items[i].label);

			}

			content.push("</option>");

		}

		content.push("</select>");

		this.afterRender(id);

		return content.join("");

	},

	

	parseSiblingValue : function(sibling){

		

	},

	

	addDefaultEvent : function(){

		

	},

	

	afterRender : function(selectID)

	{

	    

	}

	

});

WidgetManager.registerWidget("select",UI.Select);

WidgetManager.registerWidget("user",UI.Select);

/**

 * 

 * V360	 

 * File: PageNavigator.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.PageNavigator = new UI.Component();


UI.PageNavigator.extend({

	

	idPrevious : "pagenavigator-",

	

	init : function(config){
		
		this.id = config.id || this.getId();

		this.name = config.name || this.getId();

		this.pageInfo = config.pageInfo || {};

		this.webPath = config.webPath || "";

		this.message = config.message || {};

		this.pictureType = ".gif";

		this.theme = profile.theme || "";

		this.pictureType = ".png";

	},

	

	render : function(){

		

	},


    buildUrl :  function(pageInfo, pageIndex) {
    	
        var url = pageInfo.pageUri;

        var module = pageInfo.module;

        var column = pageInfo.column;

        var order = pageInfo.order;

        var parameterString = pageInfo.parameterString;


        url += "?" + "module=" + module + "&page=" + pageIndex;

        if (column) {

            url += "&column=" + column + "&order=" + order;

        }

        if (parameterString) {

            url += "&" + parameterString;

        }
        var rValue;
        if(pageIndex=='@@##@@')
        {
	        rValue = "\" onclick=\"JavaScript: new function(){";
	        
	        rValue += "var url='";
	        
	        rValue += url;
	        
	        rValue += "'; var index = document.getElementById('page-navigator-input-id').value;";
	        
	        rValue += "var newURL=url.replace('@@##@@', index);";
	        
	        rValue += "return SimulateClick('1','accelasubmitbuttonname','','action',newURL, 'target', '_self');}\"";
        }
        else
        {
	        rValue = "\" onclick=\"JavaScript: return SimulateClick('1','accelasubmitbuttonname','','action','";
	        
	        rValue += url;               
	        
	        rValue += "', 'target', '_self');";
        }


        return rValue;

    },


    buildLastPage : function(pageInfo, pageInfo)

    {

       return this.buildUrl(pageInfo, pageInfo.maxPageIndex) 

    },


	getOuterHTML : function(headContect, footContent){
		
		var createIMGLink = function(config){

			var linkBuilder = new Array();

			linkBuilder.push("<IMG SRC=\"");

			linkBuilder.push(this.webPath);//

			linkBuilder.push("/images/");

			linkBuilder.push(this.theme);

			linkBuilder.push("/menu/");

			linkBuilder.push(config.iconName);
			if(config.pictureType)
			{
				linkBuilder.push(config.pictureType);
			}
			else
			{
				linkBuilder.push(this.pictureType);
			}
			
			if(config.iconHover)
			{
				linkBuilder.push("\" onmouseover=\"");
				
				linkBuilder.push(this.webPath);//

				linkBuilder.push("/images/");

				linkBuilder.push(this.theme);

				linkBuilder.push("/menu/");

				linkBuilder.push(config.iconHover);

				if(config.pictureType)
				{
					linkBuilder.push(config.pictureType);
				}
				else
				{
					linkBuilder.push(this.pictureType);
				}
			}
			
			if(config.style)
			{
				linkBuilder.push("\" style=\"");
				
				linkBuilder.push(config.style);
				
			}
			
			linkBuilder.push("\" ALT=\"");

			linkBuilder.push(this.message[config.tipKey]);

			linkBuilder.push("\" BORDER=0 class=\"");

			linkBuilder.push(config.className);

			linkBuilder.push("\">");

			return linkBuilder.join("");

		}.bind(this);
		
		var navigatorBuilder = new Array();

		navigatorBuilder.push("<table class=\"ui-table-navigator\" id=\"");

		navigatorBuilder.push(this.id);

		navigatorBuilder.push("\" name=\"");

		navigatorBuilder.push(this.name);

		navigatorBuilder.push("\"><tr>");
		
		navigatorBuilder.push("<td class=\"AlignL arrow-padding-left\">");

		if(headContect || (!headContect && !footContent))
		{
			navigatorBuilder.push("<span class=\"page-navigator-show\">"+this.pageInfo.showingLabel+"</span>");
		}
		if(footContent || (!headContect && !footContent))
		{
			navigatorBuilder.push("<span class=\"page-navigator-show\"><label for='page-navigator-input-id'>"+this.pageInfo.pageLabel+"</label> &nbsp;</span>");
			
			navigatorBuilder.push("<input id=\"page-navigator-input-id\" type=\"text\" class=\"page-navigator-input\" value=\"");
	
			navigatorBuilder.push(this.pageInfo.curPageIndex);
			
			navigatorBuilder.push("\" onkeydown=\"onlyNum();\" style=\"ime-mode:Disabled;width: 35px\"");
			
			navigatorBuilder.push(" onkeypress=\"if(event.keyCode==13){skipToPages(this,");
			
			navigatorBuilder.push(Math.ceil(this.pageInfo.totalNumber/this.pageInfo.pageSize));
			
			navigatorBuilder.push(");}\"></input>");
			
			navigatorBuilder.push("<a href=\"javascript:void(0)");

			navigatorBuilder.push(this.buildUrl(this.pageInfo, '@@##@@'));

			navigatorBuilder.push("\" target=\"_self\" id=\"page-navigation\" style=\"display:none;\">")
			
			navigatorBuilder.push("</a><span class=\"page-navigator-of\" style=\"padding-left:6px;margin-right:20px;\">"+this.pageInfo.ofLabel+"&nbsp;");
			navigatorBuilder.push("<input id=\"pagenavigatorsize\" type=\"hidden\" value=\""+Math.ceil(this.pageInfo.totalNumber/this.pageInfo.pageSize)+"\"/>");
			navigatorBuilder.push(Math.ceil(this.pageInfo.totalNumber/this.pageInfo.pageSize));
			
			navigatorBuilder.push("</span>");
			
			if(this.pageInfo.curPageIndex>1){
	
				navigatorBuilder.push("<a id=\"PreviousPage\" href=\"");
	
				navigatorBuilder.push(this.buildUrl(this.pageInfo, this.pageInfo.curPageIndex-1));
	
				navigatorBuilder.push("\" target=\"_self\"");
	
				navigatorBuilder.push(">");
	
				//navigatorBuilder.push(createIMGLink({iconName:"resultset_back",tipKey:"page.prev.label",className:"alignBottom"}));
				navigatorBuilder.push(createIMGLink({iconName:"Previous_Button_Default",tipKey:"page.prev.label",className:"alignBottom",iconHover:"Previous_Button_Hover",pictureType:".jpg",style:"margin-right:0px;"}));
	
				navigatorBuilder.push("</a>&nbsp;&nbsp;&nbsp;");
	
			}else{
	
				//navigatorBuilder.push(createIMGLink({iconName:"resultset_back_disabled",tipKey:"page.prev.label",className:"alignBottom secondArrow"}));
				navigatorBuilder.push(createIMGLink({iconName:"Previous_Button_Grayed_Out",tipKey:"page.prev.label",className:"alignBottom secondArrow",pictureType:".jpg",style:"margin-right:0px;"}));
	
				navigatorBuilder.push("&nbsp;&nbsp;&nbsp;");
	
			}
	
			var startPageIndex = Math.ceil(this.pageInfo.curPageIndex/10)*10-9;
	
			var endIndex = Math.min(startPageIndex+9,this.pageInfo.maxPageIndex);
	
			
	
			if (this.pageInfo.curPageIndex < Math.ceil(this.pageInfo.totalNumber/this.pageInfo.pageSize))
	
			{
	
				navigatorBuilder.push("<a id=\"NextPage\" href=\"");
	
				navigatorBuilder.push(this.buildUrl(this.pageInfo,this.pageInfo.curPageIndex+1));
	
				navigatorBuilder.push("\" target=\"_self\"");
	
				navigatorBuilder.push(">");
	
				//navigatorBuilder.push(createIMGLink({iconName:"resultset_forward",tipKey:"page.next.label",className:"alignBottom"}));
				navigatorBuilder.push(createIMGLink({iconName:"Next_Button_Default",tipKey:"page.next.label",className:"alignBottom",iconHover:"Next_Button_Hover",pictureType:".jpg"}));
	
				navigatorBuilder.push("</a>&nbsp;");
	
			}
	
			else
	
			{
	
				//navigatorBuilder.push(createIMGLink({iconName:"resultset_forward_disabled",tipKey:"page.next.label",className:"alignBottom secondArrow"}));
				navigatorBuilder.push(createIMGLink({iconName:"Next_Button_Grayed_Out",tipKey:"page.next.label",className:"alignBottom secondArrow",pictureType:".jpg",style:"margin-right:0px;margin-left:0px"}));
	
				navigatorBuilder.push("&nbsp;");
	
			}
		}
		navigatorBuilder.push("</td></tr></table>");

		return navigatorBuilder.join("");

	},

	

	addDefaultEvent : function(){

		

	}

	

});

/**

 * 

 * V360	 

 * File: MenuAction.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.MenuAction = new UI.Component();


UI.MenuAction.extend({

	

	idPrevious : "menuaction-",

	

	init : function(config){

		this.id = config.id || this.getId();

		this.name = config.name || this.getId();

		this.className = config.className || "cursor_hand";

		this.value = config.value || "";

		this.containId = config.containId;

		this.items = config.items || {};

		this.dropMenu = null;

		//only super those event

		this.addEvents("keydown", "down");

	},

	

	render : function(){

		var link = document.createElement("a");

		link.id = this.id;

		link.href = "javascript:void(0)";

		link.className = this.className;

		link.innerHTML = BaseJS.htmlDecode(this.value);

		link.onclick = this.showDropMenu.bind(this);

		link.onkeydown = this.onkeyDown.bind(this);

		var container = document.getElementById(this.containId);

		container.appendChild(link);

	},

	

	showDropMenu : function(){

		if (!this.dropMenu)

		{

			this.dropMenu = new UI.DropMenu(this.items); 

		}	

		

		this.dropMenu.show(this.id);

	},

	

	onkeyDown : function()

	{

		switch(event.keyCode)

		{

			case this.keyCode.down:

				if (this.dropMenu)

		    	{

					if (!this.dropMenu.getShow())

					{

						this.dropMenu.show(this.id);

					}

		    	}

				else

				{

					this.showDropMenu();

				}

				this.dropMenu.onkeyDown();

				break;

		}

		this.fireEvent("keydown");

	},

	

	addDefaultEvent : function(){


	}

});

WidgetManager.registerWidget("menuaction",UI.MenuAction);

/**

 * 

 * V360  

 * File: FormLayout.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<Common form layout for Ac360>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.FormLayout = new UI.Component();

UI.FormLayout.extend(UI.ElementSupport.prototype);

UI.FormLayout.extend({

    

    

    idPrevious : "formlayout-",

    

    init : function(config){

        this.id = config.id || this.getId();

        this.name = config.name || this.getId();

        this.className = config.className || "ui-formlayout";

        this.layoutArray = config.layout || [];

        this.colNum = config.colNum || 3;

        this.formElements = config.htmlElements || [];

        this.hiddenHtmlElements = config.hiddenHtmlElements || [];

        this.environment.webPath = "/"+config.webPath || "";

    },

    

    getElementHead : function(formElement){

        var headBuilder = new Array();

        headBuilder.push("<div class='ui-formlayout-label'>");

        headBuilder.push(this.getWidget('label').getOuterHTMLWrapper({text:formElement.label,htmlFor:formElement.elementId}));

        if(formElement.errorHTML){

            headBuilder.push(formElement.errorHTML);

        }

        if(formElement.i18nSupportive){

            headBuilder.push("&nbsp");

            headBuilder.push(this.getWidget('font').getOuterHTMLWrapper({className:"ui-formlayout-label-i18n",

                text: "&#9830;", htmlEncode:"true"}));

        }

        headBuilder.push("</div>");

        return headBuilder.join("");

    },

    

    getElementDefaultLayout : function(formElement){

        var compositeElems = formElement.compositeElements || [];

        var elemLayoutBuilder = new Array();

        

        elemLayoutBuilder.push("<table")

        //if the first element is hidden, then we will set hidden style to the element.

        if (!Ac360.validator.isEmpty(compositeElems[0]) && 'hidden' == compositeElems[0].htmlElementHead.elementType)

        {

            elemLayoutBuilder.push(" style='display:none;'");

        }

        elemLayoutBuilder.push(">");

        

        if(formElement.label){

            elemLayoutBuilder.push("<tr><td vAlign='bottom'");

            //for multiple input boxes

            if (compositeElems.length > 1)

            {

            	elemLayoutBuilder.push(" colspan='" + compositeElems.length + "' ");

            }

            elemLayoutBuilder.push(">");

            elemLayoutBuilder.push(this.getElementHead(formElement));

            elemLayoutBuilder.push("</td></tr>");

        }

        elemLayoutBuilder.push("<tr>");

        for(var i=0;i<compositeElems.length;i++){

            var htmlElemHead = compositeElems[i].htmlElementHead;

            var htmlElem = compositeElems[i].htmlElement;

            var containerId = this.idPrevious+"container-"+Ac360.increase();

            elemLayoutBuilder.push("<td id='");

            elemLayoutBuilder.push(containerId);

            elemLayoutBuilder.push("'>");

            var elemContent = this.generateHTMLElement(htmlElemHead,htmlElem,containerId);

            elemLayoutBuilder.push(elemContent);

            elemLayoutBuilder.push("</td>");

        }

        elemLayoutBuilder.push("</tr>");

        elemLayoutBuilder.push("</table>");

        return elemLayoutBuilder.join("");

    },

    

    getElementCustomLayout : function(formElement,layoutExp){

        var compositeElems = formElement.compositeElements || [];

        var layoutMap = new Object();

        if(formElement.label){

            layoutMap.label = this.getElementHead(formElement);

        }

        for(var i=0;i<compositeElems.length;i++){

            var htmlElemHead = compositeElems[i].htmlElementHead;

            var htmlElem = compositeElems[i].htmlElement;

            var mapItem = {elemHead:htmlElemHead,elemContent:htmlElem};

            layoutMap[htmlElem.id]= mapItem;

        }

        layoutExp = this.rebuildLayoutExp(layoutExp);

        return this.customLayout(layoutExp, layoutMap);

    },

    

    formElementToHTML : function(formElement){

        var formElemBuilder = new Array();

        var layoutExp = BaseJS.strToJson(formElement.layoutExp);

        if(formElement.layoutExp){

            formElemBuilder.push(this.getElementCustomLayout(formElement,layoutExp));

        }else{

            formElemBuilder.push(this.getElementDefaultLayout(formElement));

        }

        return formElemBuilder.join("");

    },

    

    buildDefaultLayout : function(formElements){

        var bodyBuilder = new Array();

        var curColNum = 1;

        if (Ac360.validator.isEmpty(formElements))

        {

            formElements = this.formElements;

        }

        for(var i=0;i<formElements.length;i++){

            if(curColNum==1){

                bodyBuilder.push("<tr>");

            }

            bodyBuilder.push("<td vAlign='top'>");

            bodyBuilder.push(this.formElementToHTML(formElements[i]));

            bodyBuilder.push("</td>");

            if(curColNum==this.colNum){

                bodyBuilder.push("</tr>");

            }

            curColNum=curColNum%this.colNum+1;

        }

        return bodyBuilder.join("");

    },

    

    buildHiddenLayout : function(){

        var bodyBuilder = new Array();

        bodyBuilder.push("<table id='ui_formlayout_hidden_id' class='ui-formlayout' style='display:none;'>");

        

        bodyBuilder.push(this.buildDefaultLayout(this.hiddenHtmlElements));


        bodyBuilder.push("</table>");

        return bodyBuilder.join("");

    },

    

    buildCustomizedLayout : function(){

        var bodyBuilder = new Array();

        for(var i=0;i<this.formElements.length;i++){

            var layout = this.layoutArray[i];

            /*

             * we will render the hidden field alone if it don't custom in edit view. 

             * 

            */

            if (Ac360.validator.isEmpty(layout))

            {

                bodyBuilder.push(this.formElementToHTML(this.formElements[i]));                

            }

            else

            {

                layout = layout.substring(0,layout.length-1)+" vAlign='top'>";//set form element's vertical align.

                bodyBuilder.push(layout);

                bodyBuilder.push(this.formElementToHTML(this.formElements[i]));

                if(i+1==this.formElements.length){

                    bodyBuilder.push(this.layoutArray[i + 1]);

                }

            }

        }

        return bodyBuilder.join("");

    },

    

    buildBody : function(){

        if(this.layoutArray.length==0)

            return this.buildDefaultLayout();

        return this.buildCustomizedLayout();

    },

    

    render : function(){

        var formLayoutBuilder = new Array();

        formLayoutBuilder.push("<table id=\"");

        formLayoutBuilder.push(this.id);

        formLayoutBuilder.push("\" class=\"");

        formLayoutBuilder.push(this.className);

        formLayoutBuilder.push("\" name=\"");

        formLayoutBuilder.push(this.name);

        formLayoutBuilder.push("\">");

        formLayoutBuilder.push(this.buildBody());

        formLayoutBuilder.push("</table>");

        

        if (this.hiddenHtmlElements.length > 0)

        {

            formLayoutBuilder.push(this.buildHiddenLayout());

        }

        

        document.write(formLayoutBuilder.join(""));

        this.renderDelayedElem();

        this.widgetCache = null;

    },

    

    //check whether the layout has defined label, if it doesn't, we will add it by default.

    rebuildLayoutExp : function(layoutExp){

        var hasValue = function(obj,value){

            if(!obj || !value)

                return false;

            if(obj==value)

                return true;

            var result = false;

            if(obj instanceof Array){

                for(var i=0;i<obj.length;i++){

                    result = arguments.callee(obj[i],value);

                    if(result)

                        break;

                }

            }else if(typeof obj == "object"){

                for(var item in obj){

                    result = arguments.callee(obj[item],value);

                    if(result)

                        break;

                }

            }

            return result;

        };

        if(!hasValue(layoutExp,"label")){

            var newLayoutExp = new Object();

            var verticalArray = new Array();

            verticalArray.push("label");

            verticalArray.push(layoutExp);

            newLayoutExp.v = verticalArray;

            return newLayoutExp;

        }

        return layoutExp;

    },

    

    customLayout : function(layoutExp,layoutMap,containerId){

        if(!layoutExp 

                || (layoutExp.h && layoutExp.v) 

                ||(!layoutExp.h && !layoutExp.v && typeof layoutExp!="string")

                || !layoutMap){

            return "";

        }

        var result = new Array();

        if(typeof layoutExp == "string" && layoutMap[layoutExp]){

            var element = layoutMap[layoutExp]||{};

            var elemContent = element;

            if(layoutExp!="label")

               elemContent = this.generateHTMLElement(element.elemHead,element.elemContent,containerId);

            result.push(elemContent);

        }else if(layoutExp.h instanceof Array){

            result.push("<table><tr>");

            for(var i=0;i<layoutExp.h.length;i++){

              var containerId = this.idPrevious+"container-"+Ac360.increase();

              result.push("<td id='");

              result.push(containerId);

              result.push("'")

              if (layoutExp.h[i] == "label")

              {

            	  result.push(" vAlign='bottom'");

              }

              result.push(">");

              result.push(arguments.callee.call(this,layoutExp.h[i],layoutMap,containerId));

              result.push("</td>");

            }

            result.push("</tr></table>");

        }else if(layoutExp.v instanceof Array){

            result.push("<table>");

            for(var i=0;i<layoutExp.v.length;i++){

                var containerId = this.idPrevious+"container-"+Ac360.increase();

                result.push("<tr><td vAlign='top' id='");

                result.push(containerId);

                result.push("'>");

                result.push(arguments.callee.call(this,layoutExp.v[i],layoutMap,containerId));

                result.push("</td></tr>");

            }

            result.push("</table>");

        }

        return result.join("");     

    },

    

    addDefaultEvent : function(){

        

    }

});

/**

 * 

 * V360	 

 * File: GroupTable.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 * 

 * */


/*

 * function for override. Implement your customized header cell definition here.

 * @return the cell of table in HTML format.

 */

function customizeHandler(valueWrapBean){

	return "";

}


UI.GroupTable = new UI.Component();

UI.GroupTable.extend(UI.ElementSupport.prototype);

UI.GroupTable.extend({

	

	

	idPrevious : "grouptable-",

	

	init : function(config){

		this.id = config.id || this.getId();

		this.nextRowClass = "even";

		/*

		 * all necessary data for group table. Data format in json: {["tableHeaders":{}],["colSpan":"..."],["groupBeans":{}]}

		 * Type for elements contained in "groupBeans" should be "com.accela.av360.framework.taglib.tag.bean.GroupBean";

		 * Type for elements contained in "tableHeaders" should be "com.accela.av360.framework.taglib.tag.bean.ValueWrapBean";

		 * Type for "colSpan" is a general string to indicate the number of columns used to render a cell of a group's header. 

		 */

		this.tableHeaders = config.extendsFn || [];

		this.groupBeans = config.groupBeans || [];

		this.groupColumnNum = config.groupColumnNum || 3;

		this.message = config.message || {};

		this.tableHTMLArray = new Array();

	},

	

	buildHeader : function(){

		this.tableHTMLArray.push("<style type=\"text/css\">.highBright{color:#FF0000;}hr{height:1px;}</style>");

		var headers = this.tableHeaders;

		if(headers.length>0){

			this.tableHTMLArray.push("<table width=\"70%\" border=\"0\" cellspacing=\"5\" cellpadding=\"0\"><tr>");

			for(var i=0;i<headers.length;i++){

				if(i!=0 && i%3==0){

					this.tableHTMLArray.push("</tr><tr>");

				}

				if(i!=0 && i%3==1){

					this.tableHTMLArray.push("<td noWrap=\"nowrap\" class=\"Padding20\">");//Padding right attribute is set for leaving space between search field and sort field when window be resized. 

				}else{

					// fix bug 54207, hard code to limit the <TD> width, make it show normally in Ar environment for water mark

					if ("watermarker"==headers[i].htmlElementHead.elementType)

					{

						this.tableHTMLArray.push("<td noWrap=\"nowrap\" style=\"width:146px\">");

					}

					else

					{

						this.tableHTMLArray.push("<td noWrap=\"nowrap\">");

					}

				}

				if(null==headers[i].htmlElementHead.elementType){//Default case is considered as label case.

					this.tableHTMLArray.push(headers[i].htmlElement.value);

				}else if("watermarker"==headers[i].htmlElementHead.elementType){

					this.tableHTMLArray.push("<input type=\"text\" id=\"_hightLight\" title='"+headers[i].htmlElement.title+"' />");

					this.tableHTMLArray.push("<script language=\"javascript\">");

					this.tableHTMLArray.push("var waterMarkObj = new AV360Watermark(\"");

					this.tableHTMLArray.push(headers[i].htmlElement.value);

					this.tableHTMLArray.push("\");");

					this.tableHTMLArray.push("waterMarkObj.attach(\"_hightLight\");");

					this.tableHTMLArray.push("</script>");

				}else{

					this.tableHTMLArray.push(customizeHandler(headers[i]));

				}

				this.tableHTMLArray.push("</td>");

			}

			this.tableHTMLArray.push("</tr></table><hr/><br/>");

		}

	},

	

	buildGroups : function(){

		var groups = this.groupBeans;

		var colSpan = this.groupColumnNum;

		if(groups!=null){

			this.tableHTMLArray.push("<table width=\"100%\" id=\"");

			this.tableHTMLArray.push(this.id);

			this.tableHTMLArray.push("\">");

			this.extractGroups(groups, colSpan + 1);

			this.tableHTMLArray.push("</table>");

		}

	},

	

	dealHighLight : function(){

		var _hightLight = document.getElementById("_hightLight");

		if (_hightLight)

		{
			if (document.addEventListener)
		    {
				Ac360.attachEvent(_hightLight,'input', function(e){
					    
					    var elem = e.srcElement || e.target;
						var value = elem.value;
						var scopeObj = document.getElementById(this.id);
		
						Util.highLight(value, 'td', 'highBright',scopeObj, /id=menuaction-[^\s]*/);		
				}.bind(this));
				
		     }
		    else
		    {
				Ac360.attachEvent(_hightLight,'onpropertychange', function(e){
				if (e.propertyName == "value")
				{
					var elem = e.srcElement || e.target;
					var value = elem.value;
	
					var scopeObj = document.getElementById(this.id);
	
					Util.highLight(value, 'td', 'highBright',scopeObj, /id=menuaction-[^\s]*/);
				}
	
				}.bind(this));
			}
		}

	},

	

	extractGroups : function(groups,colSpan){

		if(groups.length>0){

			for(var i=0;i<groups.length;i++){

				var groupBean = groups[i];

				this.tableHTMLArray.push("<tr style=\"height:20px;\"><td colspan=\"");

				this.tableHTMLArray.push(colSpan);

				this.tableHTMLArray.push("\" style=\"font-weight: bold;\"><span>");

				var keys = groupBean.groupKey.split("&:&");

				this.tableHTMLArray.push(keys[keys.length-1]);

				this.tableHTMLArray.push("</span></td></tr>");

				var groupTableRows = groupBean.datas;

				for(var j=0;j<groupTableRows.length;j++){

					var groupTableRow = groupTableRows[j];

					var classic = "class=\"oddrow-class\"";

					if(this.nextRowClass == "even")

					{

						classic = "class=\"evenrow-class\"";

						this.nextRowClass = "odd"

					} 

					else

					{

						this.nextRowClass = "even";

					}


					this.tableHTMLArray.push("<tr style=\"height:28px;\" " + classic + " onclick=\"UI.GroupTable.rowSelect(this);\">");

					for(var k=0;k<groupTableRow.length;k++){

						var containerId = this.idPrevious +"container-"+Ac360.increase();

						var htmlElement = groupTableRow[k].htmlElement || {};

						htmlElement.lengthRestricted = false; 

						this.tableHTMLArray.push("<td id='");

						this.tableHTMLArray.push(containerId);

						this.tableHTMLArray.push("'>");

						this.tableHTMLArray.push(this.generateHTMLElement(groupTableRow[k].htmlElementHead,htmlElement,containerId));

						this.tableHTMLArray.push("</td>");

					}

					this.tableHTMLArray.push("<td width=\"30%\"></td>");

					this.tableHTMLArray.push("</tr>");

				}

				

				this.tableHTMLArray.push("<tr style=\"height:28px;\"><td  colspan=\"");

				this.tableHTMLArray.push(colSpan);

				this.tableHTMLArray.push("\"><hr width=\"50%\" size=\"1\"  style=\"color:#DFDFDF\" /></td></tr>");

				if(groupBean.groupBean!=null && groupBean.groupBean.length>0){

					arguments.callee.call(this, groupBean.groupBean, colSpan);

				}

			}

		}else {

			this.tableHTMLArray.push("<tr><td class=\"portlet-msg-alert\">");

			this.tableHTMLArray.push(this.message['page.norecord.label']);

			this.tableHTMLArray.push("</td></tr>");

		}

	},

	

	render : function(){

		this.buildHeader();

		this.buildGroups();

		document.write(this.tableHTMLArray.join(""));

		this.renderDelayedElem();

		this.dealHighLight();

		this.data = null;

		this.widgetCache = null;

	},

	

	addDefaultEvent : function(){

		

	}

	

});


UI.GroupTable.rowSelect = function(rowObject)

{

	var checkbox = null;

	var tmp = rowObject.className;

	var td = rowObject.firstChild;

	var inputs = td.getElementsByTagName("input");

	for (var i in inputs)

	{

		if (inputs[i].type=="checkbox"){

			checkbox = inputs[i];

			break;

		}

	}

	if (rowObject.className == 'rowClick'){

		rowObject.className = rowObject.lastClass;

		rowObject.lastClass = tmp;

		if (checkbox)

			checkbox.checked = false;

		return;

	}

	rowObject.lastClass = rowObject.className;

	rowObject.className = 'rowClick';

	if (checkbox)

		checkbox.checked = true;

}

/**

 * 

 * V360  

 * File: QueryEngineTable.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<Common table for Ac360>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 04/01/2013, Ray Zhang, Initial version

 *

 */

UI.QueryEngineTable = new UI.Component();

Util.extend(UI.QueryEngineTable, UI.Table, {

    idPrevious : "table-",

    

    appendPagingInfo : function(outerHTML)

    {

        if(this.pageInfo){

            var pageInfo = this.pageInfo;

            var webPath = this.environment.webPath;

            var message = this.messages;

            var queryFlag = "<input type=\"hidden\" name=\"isDynaPaging\" value=\"true\"/>";

            var pageNavigator = new UI.QueryEnginePageNavigator({pageInfo:pageInfo,webPath:webPath,message:message});

            var navigatorHeadHTML = pageNavigator.getOuterHTML(true, false);
            
            var navigatorFootHTML = pageNavigator.getOuterHTML(false, true);

            outerHTML = navigatorHeadHTML +outerHTML+navigatorFootHTML + queryFlag;

        }

        return outerHTML;

    },

    

    getOrderMessage : function(messages)

    {

        return messages['error.js.pageHeader.sortAscending'];

    },

    

    getDescOrderMessage : function(messages)

    {

        return messages['error.js.pageHeader.sort'];

    },    

    

    generateHeadLink : function(sortLink)

    {

        var rValue = "#\" onclick=\"JavaScript: return SimulateClick('1','accelasubmitbuttonname','','action','";

        rValue += sortLink;               

        rValue += "', 'target', '_self');";

        return rValue;

    },

    

        getOrderStyle : function(sortLink)

    {

        if (sortLink.indexOf("order=true")>0)

        {

            return "order_up";

        }

        else

        {

            return "order_down";

        }

    }

    

});

/**

 * 

 * V360  

 * File: DynamicPageNavigator.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * * 04/01/2013, Ray Zhang, Initial version

 *

 */


UI.QueryEnginePageNavigator = new UI.Component();

Util.extend(UI.QueryEnginePageNavigator, UI.PageNavigator, {

    

    idPrevious : "queryEnginePagenavigator-",

       

    buildUrl :  function(pageInfo, pageIndex) {

        var url = pageInfo.pageUri;

        var module = pageInfo.module;

        var column = pageInfo.column;

        var order = pageInfo.order;

        var parameterString = pageInfo.parameterString;

        var pageSize = pageInfo.pageSize;

        var maxPageIndex = Math.ceil(this.pageInfo.totalNumber/this.pageInfo.pageSize);

        

        url += "?" + "module=" + module + "&pageNo=" + pageIndex+"&pageSize="+pageSize+"&totalPages="+maxPageIndex;

        if (column) {

            url += "&column=" + column + "&order=" + order;

        }

        if (parameterString) {

            url += "&" +parameterString;

        }

        var rValue;
        if(pageIndex=='@@##@@')
        {
	        rValue = "\" onclick=\"JavaScript: new function(){";
	        
	        rValue += "var url='";
	        
	        rValue += url;
	        
	        rValue += "'; var index = document.getElementById('page-navigator-input-id').value;";
	        rValue += " var pageCount = document.getElementById('pagenavigatorsize').value;"; 
	        rValue += " if(index-pageCount>0){index = pageCount; };";
	        rValue += "var newURL=url.replace('@@##@@', index);";
	        
	        rValue += "return SimulateClick('1','accelasubmitbuttonname','','action',newURL, 'target', '_self');}\"";
        }
        else
        {
	        rValue = "\" onclick=\"JavaScript: return SimulateClick('1','accelasubmitbuttonname','','action','";
	        
	        rValue += url;               
	        
	        rValue += "', 'target', '_self');";
        }

        

        return rValue;

    },

    

    buildLastPage : function(pageInfo, pageInfo)

    {

        return this.buildUrl(pageInfo, -1); 

    }


});/**

 * 

 * V360 File: Label.js

 * 

 * Accela, Inc. Copyright (C): 2012-2014

 * 

 * Description: <<General description of the class>>

 * 

 * Notes: <<Specific programming notes>>

 * 

 * 

 */


UI.Tip = new UI.Component();


UI.Tip.extend( {

    idPrevious : "tip-",

    

    init : function(config) {

    },

    

    render : function() {

        var tip = document.createElement("DIV");

        tip.className = "tip-div";

        this.id = tip.id = this.getId();

        var firstChild = document.body.firstChild;

        document.body.insertBefore(tip, firstChild);

    },

    

    getOuterHTML : function(data) {

    },

    

    show: function(srcId, content)

    {

        if (Ac360.validator.isEmpty(content))

        {

            return;

        }

        

        if (Ac360.validator.isEmpty(this.id))

        {

            this.render();   

        }

        

        var tipDiv = document.getElementById(this.id);

        var srcElement = document.getElementById(srcId); 

        tipDiv.innerHTML = content;

        tipDiv.style.width = srcElement.offsetWidth+"px";

        UI.positionMgr.show(srcId, this.id);

    },

    

    hidden : function()

    {

         if (Ac360.validator.isEmpty(this.id))

            return;

        var tipDiv = document.getElementById(this.id);

        tipDiv.style.display = "none";

    }

    

});


UI.Tip.showTip = function(content)

{

	if (!content)

	{

		return;

	}

	
	var event_ = Ac360.getEvent();
	
	
    var srcElement = event_.srcElement || event_.target;

    

    var contentText = content;

    try

    {

	    // HTML decode for content

	    var textareaObj = document.createElement("textarea");

	    textareaObj.innerHTML = content;

	    contentText = textareaObj.innerText;

	    textareaObj = null;

    } 

    catch(e)

    {}

    

    if (contentText == srcElement.innerText)

        return;

    

    var parentNode = srcElement.parentNode;

    if (Ac360.validator.isEmpty(this.tip))

        this.tip = new UI.Tip();

    this.tip.show(parentNode.id, content);

};

    

UI.Tip.hiddenip = function()

{

    if (Ac360.validator.isEmpty(this.tip))

        return;

    this.tip.hidden();

};



UI.Tip.appendTip = function(text)

{

	text = text.replace(/\'/g, "\\'");

	return " onmouseenter = 'UI.Tip.showTip(&#39;"+BaseJS.htmlEncode(text)+"&#39;);' onmouseout='UI.Tip.hiddenip();' ";

};


WidgetManager.registerWidget("tip", UI.Tip);/**

 *

 * V360

 * File: Department.js

 *

 * Accela, Inc.

 * Copyright (C): 2012-2014

 *

 * Description:

 * <<General description of the class>>

 *

 * Notes:

 * <<Specific programming notes>>

 *

 *

 */


UI.Department = new UI.Component();


Util.extend(UI.Department, UI.Select, {


    afterRender : function(selectID) {

        UI.Department.initUser(selectID);

    }

    

});


UI.Department.initUser = function(selectID) {

    

    var updateUser = function(){

        if(document.readyState=="complete")

        {

            var select = document.getElementById(selectID0);

            if (select.onchange)

                select.onchange();

            clearInterval(timer);

        }

    };

    var selectID0 = selectID;

    var timer = setInterval(updateUser, 500);

}


WidgetManager.registerWidget("department", UI.Department); /**

 * 

 * V360	 

 * File: SummaryTable.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<Common table for Ac360>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.SummaryTable = new UI.Component();

Util.extend(UI.SummaryTable, UI.Table, {

	

	getTableHeaderCss : function()

	{

		return "portlet-section-subheader summary-simple-style AlignL";

	},

	

	getTableBodyCss : function()

	{

		return "portlet-section-body summary-simple-style";

	},

	

	getGenerateCellCss : function()

	{

		return "Info";

	},

	

	getTableHeaderLabel : function(label)

	{

		return label;

	},

	

	getRowHeadEventStr : function(getRowHeadEvent)

	{

		return "";

	},

	

	getNoRecordStr : function()

	{

		return "";

	},

	

	render : function(){

		var outerHTML = this.getTableHeader()+this.getTableBody();

		

		document.write(outerHTML);

		this.renderDelayedElem();

		var table = document.getElementById(this.id);

		table.refJSTable = this;//Add a reference to its corresponding JS Table object.

	}

	

});/**

 * 

 * V360	 

 * File: ProcessBar.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 */

UI.ProcessBar = new UI.Component();

UI.ProcessBar.extend({


	isPageLoadingCircle : false,

	

	PBOID : "PBO_ID_KEY_0000000000",

	

	PBO_IMG_ID : "PBO_IMG_ID_KEY_0000000000",

	

	PG_LOAD_CIRCLE : "pageLoadingCircle",

	

	getRandomNum : function(Min,Max)

	{   

		var Range = Max - Min;   

		var Rand = Math.random();   

		return(Min + Math.round(Rand * Range));   

	},   

	

	init : function(config){

		if(config && config.pageLoadingCircle)

		{

			this.isPageLoadingCircle = config.pageLoadingCircle;

		}

	},

	

	pageLoadingCircle : function(){

		if(this.isPageLoadingCircle)

		{

			top.LOCK_OPERATION_KEY = this.PG_LOAD_CIRCLE;

			var operationKey = this.render();

			var onloadFn = function(operationKey){
				
				top.LOCK_OPERATION_KEY = "invalidation";
				
				this.destroy(operationKey);

			}.bind(this,operationKey);

			Ac360.attachEvent(window,"onload",onloadFn);

		}

		else

		{

			if(top.LOCK_OPERATION_KEY != this.PG_LOAD_CIRCLE)

			{

				this.forceDestroy(this.getTargetDoc().targetDoc);

			}

		}

	},

	

	createOperationKey : function(){

		return  "PBO_OPERATION_KEY_" + this.getRandomNum(10000,999999);

	},

	

	render : function(){

		try{
			
			var frameEle = scrollBarIssue.getFrameElement(document);
			
			if(!oldUI || scrollBarIssue.isTopIframe(frameEle))

			{

				return;

			}

			var result = this.getTargetDoc();

			var targetDoc = result.targetDoc;

			var PBO = targetDoc.getElementById(this.PBOID);

			var checkResult = this.checkShowCondition(targetDoc, PBO, result.isAc360PopUpDoc);

			if(checkResult != "OK") {return checkResult;}

			var newOperationKey = this.createOperationKey();

			this.popUpProcess(result.isPopUpWindow,result.isAc360PopUpDoc,newOperationKey);

			if(!scrollBarIssue.judgeIsObj(PBO))

			{

				PBO = function(PBOID,PBO_IMG_ID){

					var JCC = targetDoc.getElementById(scrollBarIssue.JETSPEED_CONTENT_CONTAINER_ID);

					var  PBO_BG_IFRAME = targetDoc.createElement("IFRAME");

					PBO_BG_IFRAME.id = PBOID+"_IFRAME";

					PBO_BG_IFRAME.style.left = "0px";

					PBO_BG_IFRAME.style.zIndex = "2147483645";

					PBO_BG_IFRAME.style.position = "absolute";

					PBO_BG_IFRAME.style.top = scrollBarIssue.judgeIsObj(JCC) ? JCC.offsetTop+"px" : "0px";

					PBO_BG_IFRAME.style.opacity = "0.5";
					
					var PBO_BG_DIV = targetDoc.createElement("DIV");

					PBO_BG_DIV.id = PBOID;

					PBO_BG_DIV.style.left = "0px";

					PBO_BG_DIV.style.display = "none";

					PBO_BG_DIV.style.zIndex = "2147483646";

					PBO_BG_DIV.style.position = "absolute";

					PBO_BG_DIV.style.backgroundColor = "white";

					PBO_BG_DIV.style.top = scrollBarIssue.judgeIsObj(JCC) ? JCC.offsetTop+"px" : "0px";

					PBO_BG_DIV.style.opacity = "0.5";

					var PBO_IMG = targetDoc.createElement("IMG");

					PBO_IMG.src = document.location.protocol + "//"+ document.location.host + "/portlets/i18n/en_au/images/pageLoading.gif";

					PBO_IMG.style.position="absolute";

					PBO_IMG.id = PBO_IMG_ID;

					PBO_BG_DIV.appendChild(PBO_IMG);

					targetDoc.body.appendChild(PBO_BG_DIV);

					targetDoc.body.appendChild(PBO_BG_IFRAME);

					return PBO_BG_DIV;

				}(this.PBOID,this.PBO_IMG_ID);

			}

			this.display();

			PBO.operationKey = newOperationKey;

			return PBO.operationKey;

		}catch(e){}

	},

	

	getLocationCoordinate : function(targetDoc){

		var topCoordinate = 0;

		var JCC = targetDoc.getElementById(scrollBarIssue.JETSPEED_CONTENT_CONTAINER_ID);

		var clientHeight = targetDoc.body.clientHeight;

		var clientWidth = targetDoc.body.clientWidth;

		if(scrollBarIssue.judgeIsObj(targetDoc.documentElement) && targetDoc.documentElement.clientHeight > 0)

		{

			clientWidth = targetDoc.documentElement.clientHeight;

		}

		if(scrollBarIssue.judgeIsObj(targetDoc.documentElement) && targetDoc.documentElement.clientWidth > 0)

		{

			clientWidth = targetDoc.documentElement.clientWidth;

		}
		
		if(clientHeight == 0)
			
		{
			
			var header = targetDoc.querySelector("header[class='application-bar layer-2 ng-scope']");
			
			var section = targetDoc.querySelector("section[class='main-container admin-view']");
			
			clientHeight += header ? header.offsetHeight : 0;
			
			clientHeight += section ? section.offsetHeight : 0;
			
		}
		
		if(clientWidth == 0)
			
		{
			var section = result.targetDoc.querySelector("section[class='main-container admin-view']");

			clientWidth = header.offsetWidth
			
		}

		if(scrollBarIssue.judgeIsObj(JCC))

		{

			if(JCC.offsetTop > targetDoc.body.scrollTop)

			{

				topCoordinate = (clientHeight - JCC.offsetTop + targetDoc.body.scrollTop) / 2;

			}

			else if(JCC.offsetTop < targetDoc.body.scrollTop)

			{

				topCoordinate = clientHeight / 2 + targetDoc.body.scrollTop - JCC.offsetTop;

			}

		}

		else

		{

			topCoordinate = clientHeight / 2 + targetDoc.body.scrollTop;

		}

		var leftCoordinate = clientWidth / 2 - 16;

		return {"top" : topCoordinate, "left" : leftCoordinate};

	},

	

	isI18NLanguage : function(targetDoc){

		var directionVal = "";
		
		if(scrollBarIssue.judgeIsObj(targetDoc.body.runtimeStyle))
		{
			directionVal = targetDoc.body.runtimeStyle.direction;
		}

		if(scrollBarIssue.judgeIsNull(directionVal))

		{
			var currentStyle = scrollBarIssue.getCurrentStyle(targetDoc, targetDoc.body);
			
			directionVal = currentStyle.direction;

		}

		if(scrollBarIssue.judgeIsNull(directionVal))

		{

			directionVal = targetDoc.body.style.direction;

		}		

		if(scrollBarIssue.judgeIsNotNull(directionVal))

		{

			return directionVal.toUpperCase() == "RTL" ? true : false;

		}

		return false;

	},

	

	display : function()

	{

		var result = this.getTargetDoc();
		
		var PBO_IFRAME = result.targetDoc.getElementById(this.PBOID + "_IFRAME");

		var PBO = result.targetDoc.getElementById(this.PBOID);

		var PBO_IMG = result.targetDoc.getElementById(this.PBO_IMG_ID);

		PBO.style.display = "block";

		var JCC = result.targetDoc.getElementById(scrollBarIssue.JETSPEED_CONTENT_CONTAINER_ID);

		var JCC_OFFSET_TOP = scrollBarIssue.judgeIsObj(JCC) ? JCC.offsetTop : 0;

		var maxValue = scrollBarIssue.findSubNodesMaxValue(result.targetDoc.body);

		if(scrollBarIssue.judgeIsNull(maxValue))

		{

			JCC_OFFSET_TOP = maxValue.overflow_x ? scrollBarIssue.SCROLL_BAR_SIZE + JCC_OFFSET_TOP : JCC_OFFSET_TOP;

		}
		
		var resultHeight = (maxValue.max_height - JCC_OFFSET_TOP) > (result.targetDoc.body.scrollHeight + result.targetDoc.body.scrollTop - JCC_OFFSET_TOP) ? 

						    maxValue.max_height - JCC_OFFSET_TOP : 

						   (result.targetDoc.body.scrollHeight + result.targetDoc.body.scrollTop - JCC_OFFSET_TOP);

		resultHeight = result.isPopUpWindow ? resultHeight - 4 : resultHeight;
		
		if(resultHeight == 0)
			
		{
			
			var header = result.targetDoc.querySelector("header[class='application-bar layer-2 ng-scope']");
			
			var section = result.targetDoc.querySelector("section[class='main-container admin-view']");
			
			resultHeight += header ? header.offsetHeight : 0;
			
			resultHeight += section ? section.offsetHeight : 0;
			
		}

		var PBO_W = scrollBarIssue.isAC360PopUp(result.targetDoc).isAC360PopUp ? result.targetDoc.body.scrollWidth : maxValue.max_width;

		PBO.style.width = PBO_W == 0 ? result.targetDoc.body.scrollWidth - 4 : PBO_W + "px";

		PBO.style.height = resultHeight + "px";
		
		PBO_IFRAME.style.width = PBO_W == 0 ? result.targetDoc.body.scrollWidth - 4 : PBO_W + "px";
		
		PBO_IFRAME.style.height = resultHeight + "px";

		var coordinateVal = this.getLocationCoordinate(result.targetDoc);

		if(this.isI18NLanguage(result.targetDoc))

		{

			PBO_IMG.style.right = coordinateVal.left + "px";

		}

		else

		{

			PBO_IMG.style.left = coordinateVal.left + "px";

		}

		PBO_IMG.style.top = coordinateVal.top + "px";

	},

	

	destroy : function(operationKey){

		try{

			var result = this.getTargetDoc();

			var PBO = result.targetDoc.getElementById(this.PBOID);

			var PBO_IFRAME = result.targetDoc.getElementById(this.PBOID + "_IFRAME");

			if(operationKey == PBO.operationKey)

			{

				if(scrollBarIssue.judgeIsObj(PBO))

				{

					if(!scrollBarIssue.judgeIsHidden(PBO))

					{

						PBO.style.display = "none";

						PBO_IFRAME.style.display = "none";
						
						top.LOCK_OPERATION_KEY = "invalidation";

					}

				}

				if(result.isAc360PopUpDoc)

				{						

					top.LOCK_OPERATION_KEY = "invalidation";

				}

			}

		}catch(e){}

	},

	

	getCustomAttribute : function(attName){

		try{

			if(attName)

			{

				var srcEle = window.event.srcElement;

				var index = 0;

				while(srcEle.nodeName.toUpperCase() != "A" && index < 5)

				{

					srcEle = srcEle.parentNode;

					index++;

				}

				return srcEle.getAttribute(attName);

			}

		}catch(e){}

		return false;

	},

	

	checkShowCondition : function(targetDoc,PBO,isAc360PopUpDoc){

		if(!scrollBarIssue.judgeIsNull(window.event) && this.getCustomAttribute("circle") == "false")

		{

			return scrollBarIssue.judgeIsObj(PBO) ? PBO.operationKey : "";

		}

		else if(scrollBarIssue.judgeIsObj(window.event) && window.event.type.toUpperCase() == "BLUR")

		{

			//ignore "onblur" event to trigger process circle show.

			return scrollBarIssue.judgeIsObj(PBO) ? PBO.operationKey : "";

		}

		else if(!isAc360PopUpDoc && this.isLocked(targetDoc))

		{

			return scrollBarIssue.judgeIsObj(PBO) ? PBO.operationKey : "";

		}

		return "OK";

	},

	

	popUpProcess : function(isPopUpWindow,isAc360PopUpDoc,operationKey){

		try{

			if(isPopUpWindow)

			{

				//force stop process circle of parent window to display.

				this.forceDestroy(window.opener.document);

			}

			else if(isAc360PopUpDoc)

			{

				//stop process circle at the behind of V360 PopUp to display

				top.LOCK_OPERATION_KEY = operationKey;

			}

		}catch(e){};

	},

	

	forceDestroy : function(targetDoc){

		try{

			var PBO = targetDoc.getElementById(this.PBOID);

			var PBO_IFRAME = targetDoc.getElementById(this.PBOID+"_IFRAME");

			if(!scrollBarIssue.judgeIsHidden(PBO))

			{

				PBO.style.display = "none";

				PBO_IFRAME.style.display="none";

			}

		}catch(e){}

	},

	

	forceDestroyExceptPageLoading : function(targetDoc){

		if(top.LOCK_OPERATION_KEY != this.PG_LOAD_CIRCLE)

		{

			this.forceDestroy(targetDoc);

		}

	},

	

	isLocked : function(targetDoc){

		if(!scrollBarIssue.judgeIsNull(top.LOCK_OPERATION_KEY) && top.LOCK_OPERATION_KEY.indexOf("PBO_OPERATION_KEY_") > -1)

		{

			return true;

		}

		return false;

	},

	

	getTargetDoc : function(){

		var result = scrollBarIssue.isAC360PopUp(document);

		var targetDoc = result.isAC360PopUp ? scrollBarIssue.getDocumentFromFrame(result.AC360PopUpObj) : Ac360.getTopDocument();

		return {"targetDoc" : targetDoc, "isAc360PopUpDoc" : result.isAC360PopUp, "isPopUpWindow" : scrollBarIssue.isPopUpWindow(document)};

	},

	

	addDefaultEvent : function(){},

	

	getOuterHTML : function(data){}

});

WidgetManager.registerWidget("processBar", UI.ProcessBar);/**

 * 

 * V360  

 * File: Time.js

 * 

 * Accela, Inc.

 * Copyright (C): 2012-2014

 * 

 * Description:

 * <<General description of the class>>

 * 

 * Notes:

 * <<Specific programming notes>>

 * 

 *

 */


UI.Time = new UI.Component();

UI.Time.extend({

    

init : function(config){

        this.id = config.id || this.getId();

        this.name = config.name || this.getId();

        this.accessKey = config.accessKey || "";

        this.align = config.align || "";

        this.value = config.value || "";

        this.className = config.className || "";

        this.disabled = config.disabled || false;

        this.readOnly = config.readOnly || false;

        this.multiple = config.multiple || false;

        this.style = config.style;

        this.tabIndex = config.tabIndex;

        this.items = config.items || [];

        this.containerId = config.containerId;

        this.eventMap = config.eventMap||{};

        this.supportEvents = config.supportEvents || ["change"];


        this.hour = config.hour;

        this.minute = config.minute;

        this.amPmValue = config.amPmValue;

        this.ampm = config.ampm;

    },

    

    render : function(){

        var select = document.createElement('select');

        select.name = this.name+'_hour';

        select.id = this.id+'_hour';

        if(this.accessKey){

            select.accessKey = this.accessKey;

        }


        if(this.value){

            select.value = this.value;

        }

        

        this.createOptions(24, select);

       

        this.bindEvents(select,this.eventMap,this.supportEvents);

        var container = document.getElementById(this.containerId);

        

        var label = document.createElement('label');

        label.innerHTML = "&nbsp;:&nbsp;&nbsp;";

        

        var minuteSelect = document.createElement('select');

        minuteSelect.name = this.name+'_minute';

        minuteSelect.id = this.id+'_minute';

        if(this.accessKey){

            minuteSelect.accessKey = this.accessKey;

        }


        if(this.value){

            minuteSelect.value = this.value;

        }

        

        this.createOptions(60, minuteSelect);

       

        this.bindEvents(minuteSelect,this.eventMap,this.supportEvents);

       

        if(UI.Base.checkAr()){

           container.appendChild(minuteSelect);

           container.appendChild(label);

           container.appendChild(select);

        }

        else{

           container.appendChild(select);

           container.appendChild(label);

           container.appendChild(minuteSelect);

        }

        

        //default value

        var input = document.createElement('input');

        input.type='hidden';

        input.id = this.id;

        input.name = this.id;

        input.value = this.value;

        container.appendChild(input);

        //append AM/PM

        //appendAMPM();

    }, 

    

    appendAMPM : function()

    {

        

    },

    

    createOptions : function(length, selectObj)

    {

         for(var i = 0; i < length; i++){

            var option = document.createElement('option');

            if(this.value == i){

                option.selected = 'selected';

            }

                option.value = i;

            if (i < 10)

            {

                option.innerHTML = '0'+i;                      

            }

            else

            {

                option.innerHTML = i;

            }

            selectObj.appendChild(option);

        }

    },

    

    getOuterHTML : function(config){

        this.init(config || {});

        var content = new Array();

        content.push(this.getHourHTML());

        content.push("&nbsp;:&nbsp;&nbsp;");

        content.push(this.getMinutesHTML());

        if(UI.Base.checkAr()){

            content.reverse();

        }

        content.push("&nbsp;&nbsp;&nbsp;");

        content.push(this.getAMPMHTML());

        

        content.push("<input id="+this.id+" type=hidden name="+this.id+" value='"+this.value+"'>");

        return content.join("");

    },

    

    getHourHTML : function()

    {

        return this.getTimeHTML("_hour", 12, this.hour);

    },

    

    getMinutesHTML : function()

    {

        return this.getTimeHTML("_minute", 59, this.minute);

    },

    

    getAMPMHTML : function()

    {

        var content = new Array();

        content.push("<select id='");

        content.push(this.id);

        content.push("_ampm' name='");

        content.push(this.name);

        content.push("_ampm'");

        if(this.disabled || this.readOnly){

            content.push(" disabled='disabled'");

        }

        content.push(' class=portlet-form-field');

        content.push(this.eventsToHTML(this.eventMap, this.supportEvents));

        content.push(">");

        content.push('<option value=""></option>'); 

        for(var i = 0; i < this.ampm.length; i++){

            content.push("<option ");

            if(this.ampm[i] == this.amPmValue){

                content.push(" selected='selected'");

            }

            content.push(" value='");

            content.push(this.ampm[i]);

            content.push("'>");

            content.push(this.ampm[++i]);

            content.push("</option>");

        }

        content.push("</select>");

        return content.join("");

    },


    getTimeHTML : function(type, limit, defaultValue)

    {

        var content = new Array();

        content.push("<select id='");

        content.push(this.id);

        content.push(type);

        content.push("' name='");

        content.push(this.name);

        content.push(type);

        content.push("'");

        if(this.disabled || this.readOnly){

            content.push(" disabled='disabled'");

        }

        content.push(' class=portlet-form-field');

        content.push(this.eventsToHTML(this.eventMap, this.supportEvents));

        content.push(">");

        content.push('<option value=""></option>');

        for(var i=0; i <= limit; i++){

        	// start from 01 for hour

        	if(type=='_hour' && i ==0)

        	{

        		continue;

        	}

            content.push("<option ");

            if(i == defaultValue){

                content.push(" selected='selected'");

            }

            content.push(" value='");

            if (i < 10)

            {

                content.push("0" + i);

            }

            else

            {

                content.push(i);

            }

            content.push("'");

            content.push(">");

            if (i < 10)

            {

                content.push("0" + i);

            }

            else

            {

                content.push(i);

            }

            content.push("</option>");

        }

        content.push("</select>");

        return content.join("");

    }


});


UI.Time.postfixArray = ["_hour","_minute","_ampm"];

UI.Time.updateValue = function()

{

    //hour:minute AM/PM

    var target = event.target || event.srcElement; 

    var id = target.id;

    var index = id.lastIndexOf("_");

    var timeID = id.substring(0, index);

    var postfixArray = this.postfixArray;

    var temporaryValue = "";

    var temporaryEle = null

    for (var i = 0; i < postfixArray.length; i++)

    {

        temporaryEle = Ac360.query(timeID + postfixArray[i]);

        if (i==1)

        {

            temporaryValue += ":"+temporaryEle.value;

        }

        else if (i == 2)

        {

            temporaryValue += " "+temporaryEle.value;

        }

        else

        {

            temporaryValue = temporaryEle.value;

        }

        

    }

    

    temporaryEle = Ac360.query(timeID);

    temporaryEle.value = temporaryValue;

}



WidgetManager.registerWidget("time", UI.Time);/**

 *

 * V360

 * File: Department.js

 *

 * Accela, Inc.

 * Copyright (C): 2012-2014

 *

 * Description:no am/pm

 * <<General description of the class>>

 *

 * Notes:

 * <<Specific programming notes>>

 *

 *

 */


UI.SimpleTime = new UI.Component();


Util.extend(UI.SimpleTime, UI.Time, {


    getAMPMHTML : function()

    {

        

    }

    

});


UI.SimpleTime.postfixArray = ["_hour","_minute"];

UI.SimpleTime.updateValue = function()

{    

    //hour:minute AM/PM

    var target = event.target || event.srcElement; 

    var id = target.id;

    var index = id.lastIndexOf("_");

    var timeID = id.substring(0, index);

    var postfixArray = this.postfixArray;

    var temporaryValue = "";

    var temporaryEle = null

    for (var i = 0; i < postfixArray.length; i++)

    {

        temporaryEle = Ac360.query(timeID + postfixArray[i]);

        if (Ac360.validator.isEmpty(temporaryEle.value))

        {

            return;

        }

        if (i==1)

        {

            temporaryValue += ":"+temporaryEle.value;

        }

        else

        {

            temporaryValue = temporaryEle.value;

        }

        

    }

    

    temporaryEle = Ac360.query(timeID);

    temporaryEle.value = temporaryValue;

}

WidgetManager.registerWidget("simplatetime", UI.SimpleTime); 


