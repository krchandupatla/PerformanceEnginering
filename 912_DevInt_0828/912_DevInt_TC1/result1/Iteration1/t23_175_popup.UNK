/**
 * 
 * V360	 
 * File: popup.js
 * 
 * Accela, Inc.
 * Copyright (C): 2010-2014
 * 
 * Description:
 * <<General description of the class>>
 * 
 * Notes:
 * <<Specific programming notes>>
 * 
 * Revision History:
 * <<Date>>, <<Who>>, <<What>>
 * 25/10/2010, Tony Li, Initial version
 *
 */
try
{
	document.write("<script src='/portlets/i18n"+profile.language+"/framework/includes/javascript/I18N.js'></script>");
}
catch(e)
{
	document.write("<script src='/portlets/framework/includes/javascript/I18N.js'></script>");
}

/*
* get the skin_name 
**/

var SkinName =  getThemeFolder();
var tempOnresize = null;
var tempOnscroll = null;

var skinPath = "";
var commonPath = "";
if(document.dir != "rtl")
{
	skinPath = "/portlets/images/"+SkinName+"/img/";
	commonPath = skinPath;
	document.write("<link href='/portlets/images/" + SkinName + "/popUp.css' rel='stylesheet'></link>");
}
else
{
	
	skinPath = "/portlets/i18n/images/"+SkinName+"/img/";
	commonPath = "/portlets/images/"+SkinName+"/img/";
	document.write("<link href='/portlets/i18n/ar_ae/images/" + SkinName + "/popUp.css' rel='stylesheet'></link>");
}


if (!Array.prototype.push) {
    Array.prototype.push = function() {
        var startLength = this.length;
        for (var j = 0; j < arguments.length; j++) {
            this[startLength + j] = arguments[j];
        }
        return this.length;
    }
};
function G() {
    var elements = new Array();
    for (var i = 0; i < arguments.length; i++) {
        var element = arguments[i];
        if (typeof element == 'string') element = document.getElementById(element);
        if (arguments.length == 1) return element;
        elements.push(element)
    };
    return elements
};
function getValue(str) {
    var nResult = 0;
    switch (str) {
    case "scrollTop":
        if (typeof(window.pageYOffset) != 'undefined') {
            nResult = window.pageYOffset;
        } else if (typeof(document.compatMode) != 'undefined' && document.compatMode != 'BackCompat') {
            nResult = document.documentElement.scrollTop;
        } else if (typeof(document.body) != 'undefined') {
            nResult = document.body.scrollTop;
        }
        break;
    case "clientWidth":
        if (typeof(document.compatMode) != 'undefined' && document.compatMode != 'BackCompat') {
            nResult = document.documentElement.clientWidth;
        } else if (typeof(document.body) != 'undefined') {
            nResult = document.body.clientWidth;
        }
        break;
    case "clientHeight":
        if (typeof(document.compatMode) != 'undefined' && document.compatMode != 'BackCompat') {
            nResult = document.documentElement.clientHeight;
        } else if (typeof(document.body) != 'undefined') {
            nResult = document.body.clientHeight;
        }
        break;
    case "clientHeight":
        if (typeof(document.compatMode) != 'undefined' && document.compatMode != 'BackCompat') {
            nResult = document.documentElement.clientHeight;
        } else if (typeof(document.body) != 'undefined') {
            nResult = document.body.clientHeight;
        }
        break;
    case "scrollWidth":
        if (typeof(document.compatMode) != 'undefined' && document.compatMode != 'BackCompat') {
            nResult = document.documentElement.scrollWidth;
        } else if (typeof(document.body) != 'undefined') {
            nResult = document.body.scrollWidth;
        }
        break;
    case "scrollHeight":
        if (typeof(document.compatMode) != 'undefined' && document.compatMode != 'BackCompat') {
            nResult = document.documentElement.scrollHeight;
        } else if (typeof(document.body) != 'undefined') {
            nResult = document.body.scrollHeight;
        }
        break;
    default:
        break;
    }
    return nResult;
};
Function.prototype.bindAsEventListener = function(object) {
    var __method = this;
    return function(event) {
        __method.call(object, event || window.event)
    }
};
Object.extend = function(destination, source) {
    for (property in source) {
        destination[property] = source[property]
    };
    return destination
};
if (!window.Event) {
    var Event = new Object();
};
Object.extend(Event, {
    observers: false,
    element: function(event) {
        return event.target || event.srcElement;
    },
    isLeftClick: function(event) {
        return (((event.which) && (event.which == 1)) || ((event.button) && (event.button == 1)));
    },
    pointerX: function(event) {
        return event.pageX || (event.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft));
    },
    pointerY: function(event) {
        return event.pageY || (event.clientY + (document.documentElement.scrollTop || document.body.scrollTop));
    },
    stop: function(event) {
        if (event.preventDefault) {
            event.preventDefault();
            event.stopPropagation();
        } else {
            event.returnValue = false;
            event.cancelBubble = true;
        };
    },
    findElement: function(event, tagName) {
        var element = Event.element(event);
        while (element.parentNode && (!element.tagName || (element.tagName.toUpperCase() != tagName.toUpperCase()))) element = element.parentNode;
        return element;
    },
    _observeAndCache: function(element, name, observer, useCapture) {
        if (!this.observers) this.observers = [];
        if (element.addEventListener) {
            this.observers.push([element, name, observer, useCapture]);
            element.addEventListener(name, observer, useCapture);
        } else if (element.attachEvent) {
            this.observers.push([element, name, observer, useCapture]);
            element.attachEvent('on' + name, observer);
        };
    },
    unloadCache: function() {
        if (!Event.observers) return;
        for (var j = 0; j < Event.observers.length; j++) {
            Event.stopObserving.apply(this, Event.observers[j]);
            Event.observers[j][0] = null;
        };
        Event.observers = false;
    },
    observe: function(element, name, observer, useCapture) {
        var element = G(element);
        useCapture = useCapture || false;
        if (name == 'keypress' && (navigator.appVersion.match(/Konqueror|Safari|KHTML/) || element.attachEvent)) name = 'keydown';
        this._observeAndCache(element, name, observer, useCapture);
    },
    stopObserving: function(element, name, observer, useCapture) {
        var element = G(element);
        useCapture = useCapture || false;
        if (name == 'keypress' && (navigator.appVersion.match(/Konqueror|Safari|KHTML/) || element.detachEvent)) name = 'keydown';
        if (element.removeEventListener) {
            element.removeEventListener(name, observer, useCapture);
        } else if (element.detachEvent) {
            element.detachEvent('on' + name, observer);
        };
    }
});
Event.observe(window, 'unload', Event.unloadCache, false);
var Class = function() {
    var _class = function() {
        this.initialize.apply(this, arguments);
    };
    for (j = 0; j < arguments.length; j++) {
        superClass = arguments[j];
        for (member in superClass.prototype) {
            _class.prototype[member] = superClass.prototype[member];
        };
    };
    _class.child = function() {
        return new Class(this);
    };
    _class.extend = function(f) {
        for (property in f) {
            _class.prototype[property] = f[property];
        };
    };
    return _class;
};
function spaceForPop(flag) {
    if (flag == "begin") {
        var ele = document.getElementById("ft");
        if (typeof(ele) != "undefined" && ele != null) ele.id = "ft_popup";
        ele = document.getElementById("usrbar");
        if (typeof(ele) != "undefined" && ele != null) ele.id = "usrbar_popup";
    } else if (flag == "end") {
        var ele = document.getElementById("ft_popup");
        if (typeof(ele) != "undefined" && ele != null) ele.id = "ft";
        ele = document.getElementById("usrbar_popup");
        if (typeof(ele) != "undefined" && ele != null) ele.id = "usrbar";
    };
};
var Popup = new Class();
Popup.prototype = {
    iframeIdName: 'ifr_popup',
    initialize: function(config) {
		//It is represent which object trigger the event
		this.triggerObj = 
		{
			offsetL:"",
			offsetT:"",
			objWidth:"",
			objHeight:""
		},
        this.config = Object.extend({
            contentType: 1,
            isHaveTitle: true,
            scrollType: 'no',
            isBackgroundCanClick: false,
            isSupportDraging: true,
            isShowShadow: true,
            isReloadOnClose: true,
            width: 400,
            height: 300
            
        },
        config || {});
        this.info = {
            shadowWidth: 4,
            title: "",
            contentUrl: "",
            contentHtml: "",
            callBack: null,
            parameter: null,
            confirmCon: "",
            alertCon: "",
            someHiddenTag: "object,embed",
            someHiddenEle: "",
            overlay: 0,
            coverOpacity: 40,
            btnYESLabel:null,
            btnNOLabel:null,
            callDocument:null,
            customMargin:"0 10px 0 10px"
        };
        this.color = {//color init
            cColor: "#DFDFDF",
            bColor: "#DFDFDF",
            tColor: "#DFDFDF",
            wColor: "black"
        };
        this.dropClass = null;
        this.someToHidden = [];
        if (!this.config.isHaveTitle) {
            this.config.isSupportDraging = false;
        }
        this.iniBuild();
    },
    setContent: function(arrt, val) {
        if (val != '') {
            switch (arrt) {
            case 'width':
            	this.config.width = val + 30;
                break;
            case 'height':
                this.config.height = val;
                break;
            case 'scrollType':
                this.config.scrollType = val;
                break;
            case 'contentType':
                this.config.contentType = val;
                break;
            case 'title':
                this.info.title = val;
                break;
            case 'contentUrl':
                this.info.contentUrl = val;
                break;
            case 'contentHtml':
                this.info.contentHtml = val;
                break;
            case 'callBack':
                this.info.callBack = val;
                break;
            case 'parameter':
                this.info.parameter = val;
                break;
            case 'confirmCon':
                this.info.confirmCon = val;
                break;
            case 'alertCon':
                this.info.alertCon = val;
                break;
            case 'someHiddenTag':
                this.info.someHiddenTag = val;
                break;
            case 'someHiddenEle':
                this.info.someHiddenEle = val;
                break;
            case 'btnNOLabel':
                this.info.btnNOLabel = val;
                break;
            case 'btnYESLabel':
                this.info.btnYESLabel = val;
                break;
            case 'sideLeft':
                this.info.sideLeft = val;
                break;
            case 'sideTop':
                this.info.sideLeft = val;
                break;
            case 'callDocument':
                this.info.callDocument = val;
                break;
            case 'overlay':
                this.info.overlay = val;
                break;
            case 'customMargin':
                this.info.customMargin = val;
                break;
            case 'closeBtn':
                this.info.closeBtn = val;
                break;
            case 'closeBtn_hover':
                this.info.closeBtn_hover = val;
                break;
            case 'callBackAfterClose':
                this.info.callBackAfterClose = val;
                break;
            };
        };
    },
    //Initial the trigger object position,width,height
    initTriggerObjAttr:function(x,y,offsetWidth,offsetHeight)
    {
    	this.triggerObj.offsetL = x;
    	this.triggerObj.offsetT = y;
    	this.triggerObj.objWidth = offsetWidth;
    	this.triggerObj.objHeight= offsetHeight;
    },
    
    iniBuild: function() {
        G('dialogCase') ? G('dialogCase').parentNode.removeChild(G('dialogCase')) : function() {};
        var oDiv = document.createElement('span');
        oDiv.id = 'dialogCase';
        document.body.appendChild(oDiv);
    },
    _setCss : function(el, argCssName) 
    {
    	el.className = argCssName;
	},
	_setStyle : function(el, cssContent) 
	{
		if (navigator.userAgent.indexOf("MSIE")>0) 
		{
			el.style.cssText = cssContent;
		} 
		else 
		{
			el.setAttribute("style",cssContent) ; 
		}
	},
	createTitleContainer:function()
	{
		 	var titleContainer = document.createElement("table");
		    this._setCss(titleContainer,"titleContainer");
		    
		    var titleContainerTR = titleContainer.insertRow();
		    
		    
		    var leftTitleContinerSpace = document.createElement("td");
		    leftTitleContinerSpace.height = "18";
		    leftTitleContinerSpace.width  = "6";
		    
		    titleContainerTR.appendChild(leftTitleContinerSpace);
		  
		    var titleBar = document.createElement("td");
		    titleBar.noWrap = true;
		    titleBar.id = "dialogBoxTitle";
		  
		    var titleText = document.createElement("span");
		    titleText.alt = BaseJS.htmlDecode(this.info.title);
		    titleText.innerHTML = BaseJS.htmlDecode(this.info.title);
		    titleBar.appendChild(titleText);
		    titleBar.style.width="80%";
		    titleBar.className = "AlignLeft";
		    titleContainerTR.appendChild(titleBar);
		
		   
		    var middleTitleContinerSpace = document.createElement("td");
		    middleTitleContinerSpace.width = "10%";
		    titleContainerTR.appendChild(middleTitleContinerSpace);
		    
		    var closeSectionBar = document.createElement("td");
		    closeSectionBar.id = "dialogClose";
		    closeSectionBar.className = "AlignRignt";
		    closeSectionBar.style.width = "10%";
		    closeSectionBar.appendChild(this.createCloseSection());
		    titleContainerTR.appendChild(closeSectionBar);
		   
		    var rightTitleContinerSpace = document.createElement("td");
		    rightTitleContinerSpace.width = "1";
		    titleContainerTR.appendChild(rightTitleContinerSpace);
		    return titleContainer;
	},
	createCloseSection:function()
	{
		var closeContainer = document.createElement("div");
		closeContainer.id = "closeContainer";
		var cancelLabel = getTextlable("error_js_lefttree_cancel");
		if(typeof(globalCancelLabel) != 'undefined' && globalCancelLabel != 'null' && globalCancelLabel != "")
		{
			cancelLabel = globalCancelLabel;
		}
		
	    var colseHref = document.createElement("a");
	    colseHref.href = "javascript:void(0)";
	    colseHref.id = "closeHref";
	    colseHref.alt = cancelLabel;
	    this._setStyle(colseHref,"text-decoration: none;");
	    
	    
	    var closeButton = document.createElement("input");
	    closeButton.id = "dialogBoxClose";
	    closeButton.type = "image";
	    closeButton.alt = cancelLabel;
	    closeButton.border="0"; 
	    closeButton.src = this.info.closeBtn;
	    closeButton.height = 18;
	    colseHref.appendChild(closeButton);
	    
	    closeContainer.appendChild(colseHref);
	    return closeContainer;
	},
	createBodyContainer:function(bodyContainer)
	{
		var borderHeight = this.config.height + 6;
	    var bodyContainerContentRow = bodyContainer.insertRow();
	    bodyContainerContentRow.vAlign = "top";
	    bodyContainerContentRow.height = this.config.height + "px"; 
	    
	    var leftLineTD = document.createElement("td");
	    var leftLineImage = document.createElement("div");
	    leftLineImage.style.height = borderHeight + "px"; 
	    this._setCss(leftLineImage,"leftLineImage");
	    var leftLineSpace = document.createElement("div");
	    leftLineSpace.style.height = borderHeight + "px"; 
	    this._setCss(leftLineSpace,"leftLineSpace");

	    var middelContentTD = document.createElement("td");
	    middelContentTD.id = "dialogBody";
	    this._setCss(middelContentTD,"middelContentTD");
	    
	    var rightLineTD = document.createElement("td");
	    var rightLineSpace = document.createElement("div");
	    this._setCss(rightLineSpace,"rightLineSpace");
	    rightLineSpace.style.width = '6px';
	    rightLineSpace.style.height = borderHeight + "px"; 
	    var rightLineImage = document.createElement("div");
	    this._setCss(rightLineImage,"rightLineImage");
	    rightLineImage.style.width = '9px';
	    rightLineImage.style.height = borderHeight + "px"; 
	    leftLineTD.appendChild(leftLineImage);
	    leftLineTD.appendChild(leftLineSpace);
	    rightLineTD.appendChild(rightLineSpace);
    	rightLineTD.appendChild(rightLineImage);
	    if(document.dir != 'rtl')
	    {
	    	bodyContainerContentRow.appendChild(leftLineTD);
	    	bodyContainerContentRow.appendChild(middelContentTD);
	    	bodyContainerContentRow.appendChild(rightLineTD);
	    }
	    else
	    {
	    	bodyContainerContentRow.appendChild(rightLineTD);
	    	bodyContainerContentRow.appendChild(middelContentTD);
	    	bodyContainerContentRow.appendChild(leftLineTD);
	    	
	    }
	},
	createBodyContainerTop:function(bodyContainer)
	{
	    var bodyContainerTopRow = bodyContainer.insertRow();
	    bodyContainerTopRow.height = "30";
	    bodyContainerTopRow.id = "titleBarContainer";
	    
	    var leftTopCorner = document.createElement("td");
	    leftTopCorner.width = "15";
	    bodyContainerTopRow.appendChild(leftTopCorner);
	    
	    this._setCss(leftTopCorner,"leftTopCorner");
	    
	    var middleTop = document.createElement("td");
	    this._setCss(middleTop,"middleTop");
	    middleTop.appendChild(this.createTitleContainer());
	    bodyContainerTopRow.appendChild(middleTop);
	    
	    var rightTopCorner = document.createElement("td");
	    this._setCss(rightTopCorner,"rightTopCorner");
	    bodyContainerTopRow.appendChild(rightTopCorner);
	},
	createBodyContainerBottom : function (bodyContainer)
	{
		var bodyContainerBottom = bodyContainer.insertRow();
		var leftBottomCorner =  document.createElement("td");
		leftBottomCorner.style.height = "17px";
		this._setCss(leftBottomCorner,"leftBottomCorner");
		var middelBottomCorner = document.createElement("td");
		middelBottomCorner.style.height = "17px";
		this._setCss(middelBottomCorner,"middelBottomCorner");
		var ringtBottomCorner = document.createElement("td");
		ringtBottomCorner.style.height = "17px";
		this._setCss(ringtBottomCorner,"ringtBottomCorner");
		bodyContainerBottom.appendChild(leftBottomCorner);
		bodyContainerBottom.appendChild(middelBottomCorner);
		bodyContainerBottom.appendChild(ringtBottomCorner);
	},
	createContainerForOldUI:function(path,cancelLabel,baseurl)
	{
	     //Set content for Title DIV
		
	     var content = '<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="' + this.color.bColor + '">';
	     var closeSection= '<a href="javascript:void(0)" id="closeHref" style="TEXT-DECORATION:none" alt="'+ cancelLabel+'" >'+
		   '<input  type="image" id="dialogBoxClose"   src="' + path + '" border="0" align="absmiddle" />'+
		   '</a>';	     
	     
	     if (this.config.isHaveTitle)
	     {
	    	 content += 	'<tr height="30" id="titleBarContainer" style="background: url('+baseurl +'bg_titlebar.png)" bgcolor="' + this.color.tColor + '">'+
	            			'<td>'+
		            			'<table style="-moz-user-select:none;height:24px;table-layout:fixed;" width="100%" border="0" cellpadding="0" cellspacing="0" >'+
			            			'<tr>' + 
			            			 	'<td width="6" height="18"></td>'+
				            			 	'<td id="dialogBoxTitle" width=80% style="white-space: nowrap;overflow:hidden;text-overflow:ellipsis;color:#636363;font-size:12px;font-weight:bold;padding-top:4px;" nowrap>'+
				            			 	'<span alt='+BaseJS.htmlDecode(this.info.title)+'>' + BaseJS.htmlDecode(this.info.title) + '</span>'+
				            			 	'</td>'+
			            			 	'<td width=10%></td>' + 
			            			 	'<td id="dialogClose" width="*" class="AlignRignt" valign="middle">' + closeSection + '</td>'+
			            			 	'<td width="1px"></td>'+
			            			 '</tr>'+
			            		 '</table>'+
			            	'</td>'+
			            	'</tr>';//title init
	       } 
	     else 
	     {
	        	content += '<tr height="10"><td align="right">' + closeSection + '</td></tr>'
	     };
	     
	     content += '<tr style="height:' + this.config.height + 'px" valign="top"><td id="dialogBody" bgcolor="#ffffff" style="position:relative;"></td></tr></table>';
	     return content;
	},
    build: function() {
	
		var cancelLabel = getTextlable("error_js_lefttree_cancel");
		if(typeof(globalCancelLabel) != 'undefined' && globalCancelLabel != 'null' && globalCancelLabel != "")
		{
			cancelLabel = globalCancelLabel;
		}
       
        
		var baseZIndex = 100001 + this.info.overlay * 10;
        var showZIndex = baseZIndex + 2;
        this.iframeIdName = 'ifr_popup' + this.info.overlay;
        var path = this.info.closeBtn;
        var maskBox = document.createElement("div");
        maskBox.id = "dialogBoxBG";
        var mainBox = document.createElement("div");
        mainBox.id = "dialogBox";
        var shadowBox = document.createElement("div");
        shadowBox.id = "dialogBoxShadow";

        if(!this.config.isBackgroundCanClick)
        {
        	G('dialogCase').appendChild(maskBox);
        }
        G('dialogCase').appendChild(mainBox);
        G('dialogCase').appendChild(shadowBox);
        G('dialogBox').innerHTML = "";
        var cssMask=  "position:absolute;top:0px;left:0px;z-index:"+baseZIndex +
			";filter:alpha(opacity=50);-moz-opacity:0.5;opacity: 0.5;"+
			"background-color:#4E4E4E;display:none;overflow-y:hidden;";

        this._setStyle(G('dialogBoxBG'),cssMask);
      var contentCss = "border:0px solid ;display:none;z-index:" + showZIndex + ";position:relative;width:" + this.config.width + "px;overflow:hidden;";

//      if () {
//        contentCss = "border:0px solid ;display:none;z-index:" + showZIndex + ";position:relative;width:" + this.config.width + "px;overflow:hidden;";
//      }

	    this._setStyle(G('dialogBox'),contentCss);
	    var shadowCss = 'display:none;z-index:' + (baseZIndex +1)+ ';';
	    this._setStyle(G('dialogBoxShadow'),shadowCss);
	    var bodyContainer = document.createElement("table");
	    bodyContainer.width = "100%";
	    bodyContainer.cellSpacing = "0";
	    bodyContainer.cellPadding = "0";
	    this._setStyle(bodyContainer,"table-layout: fixed;");
	    
    	this.info.closeBtn = commonPath + "btn_close.png";
        this.info.closeBtn_hover = commonPath + "btn_close_hover.png";
    	this.createBodyContainerTop(bodyContainer);
   
    	this.createBodyContainer(bodyContainer);
   
    	this.createBodyContainerBottom(bodyContainer);
    	G('dialogBox').appendChild(bodyContainer);
	     
	    if (!this.config.isBackgroundCanClick) 
	    {
	    	if(window.onresize != null)
	    	{
	    		tempOnresize = window.onresize;
	    	}
	    	if(window.onscroll != null)
	    	{
	    		tempOnscroll = window.onresize;
	    	}
	        this.setBackgroundSize();
	        window.onresize = this.setBackgroundSize;
	        window.onscroll = this.setBackgroundSize;
	    }
	     
        Event.observe(G('dialogBoxClose'), "click",this.reset.bindAsEventListener(this), false);
        Event.observe(G('closeHref'), "click",this.closeOnEnter.bindAsEventListener(this), false);
        Event.observe(G('dialogBoxClose'), "mouseout",this.closeBarOnMouseout.bindAsEventListener(this), false);
        Event.observe(G('dialogBoxClose'), "mouseover",this.closeBarOnMouseover.bindAsEventListener(this), false);
        Event.observe(G('dialogBoxBG'), "keydown",this.closeOnEsc.bindAsEventListener(this), false);
        Event.observe(G('dialogBox'), "keydown",this.closeOnEsc.bindAsEventListener(this), false);
        
        //dialogBoxBG
        //dialogBox
        if (this.config.isSupportDraging) {
            dropClass = new Dragdrop(this.config.width, this.config.height, this.info.shadowWidth, this.config.isSupportDraging, this.config.contentType);
            G("dialogBoxTitle").style.cursor = "move";
        };
       
        this.lastBuild();
      
    },
    setBackgroundSize: function() {
        var getMaxValueWidth = [getValue("clientWidth"), getValue("scrollWidth")];
        var getValueWidth = eval("Math.max(" + getMaxValueWidth.toString() + ")");
        G('dialogBoxBG').style.width = getValueWidth+"px";
        try
        {
          if(scrollBarIssue.isPopUpWindow(document))
          {
        	  var maxValue = scrollBarIssue.findSubNodesMaxValue(top.document.body);
        	  G('dialogBoxBG').style.height = (maxValue.overflow_x ? top.document.body.scrollHeight - scrollBarIssue.SCROLL_BAR_SIZE : top.document.body.scrollHeight) + "px";
        	  return;
          }
        }catch(e){}
        var getMaxValueHeight = [getValue("clientHeight"), getValue("scrollHeight")];
        var getValueHeight = eval("Math.max(" + getMaxValueHeight.toString() + ")");
        G('dialogBoxBG').style.height = getValueHeight+"px";
    },
    lastBuild: function() {
        var confirm = '<div style="width:100%;height:100%;text-align:center;"><div id="_msgContent" style="margin:20px 20px 0 20px;font-size:14px;line-height:16px;color:#000000;">' + this.info.confirmCon + '</div><div style="margin:20px;"><input width=40 style="width: 60px;" id="dialogOk" type="button" value="'+this.info.btnYESLabel+'"/>&nbsp;&nbsp;&nbsp;&nbsp;<input style="width: 60px;" id="dialogCancel" type="button" width=40 value="'+this.info.btnNOLabel+'"/></div></div>';
        var alert = '<div style="width:100%;height:100%;text-align:center;"><div style="margin:20px 20px 0 20px;font-size:14px;line-height:16px;color:#000000;">' + this.info.alertCon + '</div><div style="margin:20px;"><input id="dialogYES" type="button" value=" YES "/></div></div>';
        var baseZIndex = 10001 + this.info.overlay * 10;
        var coverIfZIndex = baseZIndex + 4;
        if (this.config.contentType == 1) {
	       var ie = ("ActiveXObject" in window)? true : false;
	       if(ie)
	       {
			    var openIframe = "<iframe onload='scrollBarIssue.autoResizePopUpContainer(null,\"dialogBoxBG\");' width='100%' ignore='self' style='border:#ffffff;margin:" + this.info.customMargin + ";height:" + this.config.height + "px' name='" + this.iframeIdName + "' id='menuFrame' frameborder='0' scrolling='"+this.config.scrollType+"'></iframe>";
	            var coverIframe = "<div id='iframeBG' style='border:#ffffff;position:absolute;top:0px;left:0px;width:1px;height:1px;z-index:" + coverIfZIndex + ";filter: alpha(opacity=00);opacity:0.00;background-color:#ffffff;'><div>";
	            G("dialogBody").innerHTML = openIframe + coverIframe;
	            
	            this.doAction(this.info.contentUrl);
		   }else
		   {
			     var openIframe = "<iframe onload='scrollBarIssue.autoResizePopUpContainer(null,\"dialogBoxBG\");' width='100%' ignore='self' style='height:" + this.config.height + "px' name='" + this.iframeIdName+ "' src='" + this.info.contentUrl + "' id='menuFrame' frameborder='0' scrolling='yes'></iframe>";
           		 var coverIframe = "<div id='iframeBG' style='position:absolute;top:0px;left:0px;width:1px;height:1px;z-index:" + coverIfZIndex + ";filter: alpha(opacity=00);opacity:0.00;background-color:#ffffff;'><div>";
            	 G("dialogBody").innerHTML = openIframe + coverIframe;            	
			}
          
        } else if (this.config.contentType == 2) {
            G("dialogBody").innerHTML = this.info.contentHtml;
        } else if (this.config.contentType == 3) {
            G("dialogBody").innerHTML = confirm;
            Event.observe(G('dialogOk'), "click", this.forCallback.bindAsEventListener(this), false);
            Event.observe(G('dialogCancel'), "click", this.close.bindAsEventListener(this), false);
        } else if (this.config.contentType == 4) {
            G("dialogBody").innerHTML = alert;
            Event.observe(G('dialogYES'), "click", this.close.bindAsEventListener(this), false);
        };
    },
    doAction: function(url)
    {
		var href = "menuFrame.location.href='" + url + "'";
		window.setTimeout(href,0);
		window.status="Finished";	
	},
    reBuild: function() {

        G('dialogBody').height = G('dialogBody').clientHeight;
        this.lastBuild()
    },
    show: function() {
        this.hiddenSome();
        this.middle();
        if (this.config.isShowShadow) this.shadow();
        this.focusDialogBox();
    },
    focusDialogBox:function(){
    	 var dialogBoxDiv=document.getElementById('dialogBox');
         dialogBoxDiv.focus();
    },
    showFloatWin: function() {
        this.hiddenSome();
        this.setAbsPosition();
        if (this.config.isShowShadow) this.shadow()
    },
    forCallback: function() {
        return this.info.callBack(this.info.parameter)
    },
    shadow: function() {
        var oShadow = G('dialogBoxShadow');
        var oDialog = G('dialogBox');
        oShadow['style']['position'] = "absolute";
        //oShadow['style']['background'] = "#000";
        oShadow['style']['display'] = "";
        oShadow['style']['opacity'] = "0.2";
        //oShadow['style']['filter'] = "alpha(opacity=20)";
        oShadow['style']['top'] = oDialog.offsetTop + this.info.shadowWidth + "px";
        oShadow['style']['left'] = oDialog.offsetLeft + this.info.shadowWidth+ "px";
        oShadow['style']['width'] = oDialog.offsetWidth + "px";
        oShadow['style']['height'] = oDialog.offsetHeight + "px";
        
    },
    middle: function() {
        if (!this.config.isBackgroundCanClick) G('dialogBoxBG').style.display = '';
        var isPopUpWindow = scrollBarIssue.isPopUpWindow(document);
        var oDialog = G('dialogBox');
        oDialog['style']['position'] = "absolute";
        oDialog['style']['display'] = '';
        var sClientWidth = getValue("clientWidth");
        var sClientHeight = getValue("clientHeight");
        if(isPopUpWindow)
        {
        	sClientHeight = top.document.body.clientHeight;
        }
        var sScrollTop = getValue("scrollTop");
        var sleft = (sClientWidth / 2) - (oDialog.offsetWidth / 2);
        var iTop = (sClientHeight / 2 + sScrollTop) - (oDialog.offsetHeight / 2);
        var sTop = iTop > 0 ? iTop: (sClientHeight / 2 + sScrollTop) - (oDialog.offsetHeight / 2);
        if (sTop < 1) sTop = "20";
        if (sleft < 1) sleft = "20";
        oDialog['style']['left'] = sleft + "px";
        oDialog['style']['top'] = sTop + "px";
    },
   
    getDialogBoxBGHeight : function()
    {
    	 var bgHeight = G('dialogBoxBG').style.height;
	     if(bgHeight.indexOf("px") > 0)
	     {
	        bgHeight = bgHeight.substring(0, (bgHeight.length - 2));
	     }
	     var bgBoxHeight = (46 + parseInt(this.config.height) + parseInt(G('titleBarContainer').height));
	     var targetDoc = Ac360.getTopWindow().window.document.body;
	     if(scrollBarIssue.isShowModalDialog(this.info.callDocument))
	     {
	        targetDoc = this.info.callDocument; 
	     }
	     var max_value = scrollBarIssue.findSubNodesMaxValue(targetDoc);
	     var max_height = targetDoc.offsetHeight;
	     if(!scrollBarIssue.judgeIsNull(max_value))
	     {
	        max_height = max_value.overflow_x ? max_value.max_height + scrollBarIssue.SCROLL_BAR_SIZE : max_value.max_height;
	        max_height = max_height < targetDoc.offsetHeight ? targetDoc.offsetHeight : max_height;
	     }
	     return max_height > bgBoxHeight ? max_height : bgBoxHeight;
    },
    
    setAbsPosition: function() 
    {
        if (!this.config.isBackgroundCanClick) G('dialogBoxBG').style.display = '';
        var oDialog = G('dialogBox');
        oDialog['style']['position'] = "absolute";
        oDialog['style']['display'] = '';
        var sClientWidth = getValue("clientWidth");
        var sClientHeight = getValue("clientHeight");
        
    	var winWidth = oDialog.offsetWidth;
    	var winHeight = oDialog.offsetHeight;
    	
    	var sLeft,sTop;
    	/**
    	 * If it can't display completely at right of trigger object, it will display them on the left 
    	 * base on the right border of trigger object
    	 */
    	if((this.triggerObj.offsetL + winWidth) > sClientWidth)
    	{
    		sLeft = this.triggerObj.offsetL + this.triggerObj.objWidth - winWidth;
    	}
    	else
    	{
    		sLeft = this.triggerObj.offsetL;
    	}
        
    	/**
    	 * If it can display total height under current trigger object,
    	 * it will display at the top of the trigger object
    	 */
        if((this.triggerObj.offsetT + this.triggerObj.objHeight + winHeight) > sClientHeight)
        {
        	sTop = this.triggerObj.offsetT - winHeight;
        }
        else
        {
        	sTop = this.triggerObj.offsetT+this.triggerObj.objHeight;
        }
        
        oDialog['style']['left'] = sLeft + "px";
        oDialog['style']['top'] = sTop + "px";
    },
    
    reset: function() {
        if (this.config.isReloadOnClose) {
        	Ac360.getTopWindow().location.reload();
        };
        this.close();
    },
    closeBarOnMouseover:function()
    {
    	G('dialogBoxClose').src = this.info.closeBtn_hover;
    	
    },
    closeBarOnMouseout:function()
    {    	
    	G('dialogBoxClose').src = this.info.closeBtn;
    	
    },
    closeOnEsc:function()
    {
    	 var event = window.event || event;   
    	 if(event.keyCode == 27)
    	 {
    		  if (this.config.isReloadOnClose) {
    			  Ac360.getTopWindow().location.reload();
    	        };
    	        this.close();
    	 }
    }
    ,
    closeOnEnter:function()
    {
	   	 var event = Ac360.getEvent(); 
	   	 if(event.keyCode == 0)
	   	 {
		   	  if (this.config.isReloadOnClose) {
		   		Ac360.getTopWindow().location.reload();
		      };
		      this.close();
	   	 }
   }
    ,
    close: function() {
		//Fix for AAETA-1259 silverlight map is overlapping the popup.
		try{
		$('#buildingpermits', parent.document).css("visibility", "");
		}
		catch(e)
		{
			
		}
		if(typeof(clear)!='undefined')
		{
			try
			{
				if(clear != 'skip')
				{
					clear();
				}
			}
			catch(e)
			{
			}
		}
        G('dialogBox').style.display = 'none';
        if (!this.config.isBackgroundCanClick) G('dialogBoxBG').style.display = 'none';
        if (this.config.isShowShadow) G('dialogBoxShadow').style.display = 'none';
        G('dialogBody').innerHTML = '';
        this.showSome();
        scrollBarIssue.autoResizePopUpContainer(null,"dialogBoxBG");
        
    	window.onresize = tempOnresize;
    	window.onscroll = tempOnscroll;
    	Ac360.getTopWindow().LOCK_OPERATION_KEY = "invalidation";
    	if(this.info.callBackAfterClose)
    	{
    		this.info.callBackAfterClose();
    	}
    },
    hiddenSome: function() {
        var tag = this.info.someHiddenTag.split(",");
        if (tag.length == 1 && tag[0] == "") {
            tag.length = 0;
        }
        for (var j = 0; j < tag.length; j++) {
            this.hiddenTag(tag[j]);
        };
        var ids = this.info.someHiddenEle.split(",");
        if (ids.length == 1 && ids[0] == "") ids.length = 0;
        for (var j = 0; j < ids.length; j++) {
            this.hiddenEle(ids[j]);
        };
        spaceForPop("begin");
    },
    hiddenTag: function(tagName) {
        var ele = document.getElementsByTagName(tagName);
        if (ele != null) {
            for (var j = 0; j < ele.length; j++) {
                if (ele[j].style.display != "none" && ele[j].style.visibility != 'hidden') {
                    ele[j].style.visibility = 'hidden';
                    this.someToHidden.push(ele[j]);
                };
            };
        };
    },
    hiddenEle: function(id) {
        var ele = document.getElementById(id);
        if (typeof(ele) != "undefined" && ele != null) {
            ele.style.visibility = 'hidden';
            this.someToHidden.push(ele);
        }
    },
    showSome: function() {
        for (var j = 0; j < this.someToHidden.length; j++) {
            this.someToHidden[j].style.visibility = 'visible';
        };
        spaceForPop("end");
    },
    changeImage:function(imageUrl,obj){
    	obj.src=imageUrl;
    }
    
};
var Dragdrop = new Class();
Dragdrop.prototype = {// the initialize method
    initialize: function(width, height, shadowWidth, showShadow, contentType,layout) {
        this.dragData = null;
        this.dragDataIn = null;
        this.backData = null;
        this.width = width;
        this.height = height;
        this.shadowWidth = shadowWidth;
        this.showShadow = showShadow;
        this.contentType = contentType;
        this.IsDraging = false;
		this.layout=layout;
        this.oObj = G('dialogBox');
        Event.observe(G('dialogBoxTitle'), "mousedown", this.moveStart.bindAsEventListener(this), false);
    },
    moveStart: function(event) {
        this.IsDraging = true;
        if (this.contentType == 1) {
            G("iframeBG").style.display = "";
            G("iframeBG").style.width = this.width;
            G("iframeBG").style.height = this.height;
        };
        Event.observe(document, "mousemove", this.mousemove.bindAsEventListener(this), false);
        Event.observe(document, "mouseup", this.mouseup.bindAsEventListener(this), false);
        Event.observe(document, "selectstart", this.returnFalse, false);
        this.dragData = {
            x: Event.pointerX(event),
            y: Event.pointerY(event)
        };
        this.backData = {
            x: parseInt(this.oObj.style.left),
            y: parseInt(this.oObj.style.top)
        };
    },
    mousemove: function(event) {
        if (!this.IsDraging) return;
        var iLeft = Event.pointerX(event) - this.dragData["x"] + parseInt(this.oObj.style.left);
        var iTop = Event.pointerY(event) - this.dragData["y"] + parseInt(this.oObj.style.top);
        if (this.dragData["y"] < parseInt(this.oObj.style.top)) iTop = iTop - 12;
        else if (this.dragData["y"] > parseInt(this.oObj.style.top) + 25) iTop = iTop + 12;
        this.oObj.style.left = iLeft + "px";
        this.oObj.style.top = iTop + "px";;
        if (this.showShadow) {
            G('dialogBoxShadow').style.left = iLeft + this.shadowWidth + "px";
            G('dialogBoxShadow').style.top = iTop + this.shadowWidth + "px";
        };
        this.dragData = {
            x: Event.pointerX(event),
            y: Event.pointerY(event)
        };
        document.body.style.cursor = "move";
    },
    mouseup: function(event) {
        if (!this.IsDraging) return;
        if (this.contentType == 1) G("iframeBG").style.display = "none";
        document.onmousemove = null;
        document.onmouseup = null;
        var mousX = Event.pointerX(event) - (document.documentElement.scrollLeft || document.body.scrollLeft);
        var mousY = Event.pointerY(event) - (document.documentElement.scrollTop || document.body.scrollTop);
        var oObjBottom;
        var oObjRight;
        if (this.showShadow) {
            oObjBottom = parseInt(this.oObj.style.top) + this.height + this.shadowWidth;
            oObjRight = parseInt(this.oObj.style.left) + this.width + this.shadowWidth;
        } else {
            oObjBottom = parseInt(this.oObj.style.top) + this.height;
            oObjRight = parseInt(this.oObj.style.left) + this.width;
        };
        if (mousX < 1 || mousY < 1 || mousX > document.body.clientWidth || mousY > document.body.clientHeight || parseInt(this.oObj.style.left) < 0 || parseInt(this.oObj.style.top) < 0 || oObjRight > document.body.clientWidth || oObjBottom > document.body.clientHeight) {
            this.oObj.style.left = this.backData["x"];
            this.oObj.style.top = this.backData["y"];
            if (this.showShadow) {
                G('dialogBoxShadow').style.left = this.backData.x + this.shadowWidth;
                G('dialogBoxShadow').style.top = this.backData.y + this.shadowWidth;
            };
        };
        this.IsDraging = false;
        document.body.style.cursor = "";
        Event.stopObserving(document, "selectstart", this.returnFalse, false);
    },
    returnFalse: function() {
        return false;
    }
};
function openshow(url, title, w, h, stype) {
    g_pop = new Popup({
        contentType: stype,
        isReloadOnClose: false,
        width: w,
        height: h
    });
    g_pop.setContent("title", title);
    g_pop.setContent("contentUrl", url);
    g_pop.build();
    g_pop.show();
}

function openWindowWithScroll(url, title, w, h, stype,obj) {
	
    var xy = getXYValues(obj);
    g_pop = new Popup({
        contentType: stype,
        isReloadOnClose: false,
        width: w,
        height: h
    });
    g_pop.initTriggerObjAttr(xy.x,xy.y,obj.offsetWidth,obj.offsetHeight);
    
    g_pop.setContent("title", title);
    g_pop.setContent("contentUrl", url);
    //Display horizontal scroll 
    g_pop.config.scrollType = "yes";
    
    g_pop.build();
    g_pop.showFloatWin();
    
}
function getXYValues(obj)
{
    var xy ;
 	if (!obj.x || !obj.y)
 	{
			xy = this.getAbsPoint(obj);
	} 
 	else 
 	{
			xy = {
				"x" : ops.x,
				"y" : ops.y
			};
	}
 	
 	return xy;
}

function getAbsPoint(e) 
{
	var x = e.offsetLeft;
	var y = e.offsetTop;

	while (e = e.offsetParent) {
		x += e.offsetLeft;
		if (e.style.overflow == "auto") {
			x -= e.scrollLeft;
		}
		y += e.offsetTop;
		if (e.style.overflow == "auto") {
			y -= e.scrollTop;
		}
	}

	return {
		"x" : x,
		"y" : y
	};
}

function g_close_pop_re() {
    g_pop.close();
    location.reload();
}
function Comment(url, w, h) {
    g_pop = new Popup({
        contentType: 1,
        isReloadOnClose: false,
        width: w,
        height: h
    });
    g_pop.setContent("title", "login");
    g_pop.setContent("scrollType", "no");
    g_pop.setContent("contentUrl", url);
    g_pop.build();
    g_pop.show();
}
function g_close_pop() {

    g_pop.close();
    g_pop = null;
}
function ShowAlert(title, content, w, h) {
    var pop = new Popup({
        contentType: 4,
        isReloadOnClose: false,
        width: w,
        height: h
    });
    pop.setContent("title", title);
    pop.setContent("alertCon", content);
    pop.build();
    pop.show();
}
function Wclose() {
    g_pop.close();
    g_pop = null;
}

